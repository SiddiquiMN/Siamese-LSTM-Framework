{"cells":[{"cell_type":"markdown","metadata":{"id":"wofTkJrheFpN"},"source":["htt"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30591,"status":"ok","timestamp":1708120522320,"user":{"displayName":"thesis research","userId":"06634674941398765871"},"user_tz":-360},"id":"BwqEWq905A2r","outputId":"fa9a149a-92ff-4fcc-f6d8-568de37eb95a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"cNedC_vTdePs"},"source":["CSV file containing path of masks of all custom dataset"]},{"cell_type":"code","source":["import pandas as pd\n","\n","\n","\n","# Load the dataset into a dataframe\n","df = pd.read_csv('/content/drive/MyDrive/CSV Files/Custom Mask Path All.csv')\n","\n","# Display the first few rows of the dataframe to understand its structure\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"hJIsVkWyQ0ZA","executionInfo":{"status":"ok","timestamp":1708120544020,"user_tz":-360,"elapsed":1576,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"b0810b97-ebbc-4cf1-e192-41a12c5bb826"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   Path\n","0     /content/drive/MyDrive/custommasks/pp_Blue Hav...\n","1     /content/drive/MyDrive/custommasks/pp_Blue Hav...\n","2     /content/drive/MyDrive/custommasks/pp_Rancho P...\n","3     /content/drive/MyDrive/custommasks/pp_Rancho P...\n","4     /content/drive/MyDrive/custommasks/pp_Rancho P...\n","...                                                 ...\n","1700  /content/drive/MyDrive/custommasks/pp_Victor H...\n","1701  /content/drive/MyDrive/custommasks/pp_Alice Sp...\n","1702  /content/drive/MyDrive/custommasks/pp_Folkston...\n","1703  /content/drive/MyDrive/custommasks/pp_Blue Hav...\n","1704  /content/drive/MyDrive/custommasks/pp_Blue Hav...\n","\n","[1705 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-2561fcdc-ff9e-4dcc-b357-6f0b578b15dd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Blue Hav...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Blue Hav...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Rancho P...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Rancho P...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Rancho P...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1700</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Victor H...</td>\n","    </tr>\n","    <tr>\n","      <th>1701</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","    </tr>\n","    <tr>\n","      <th>1702</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Folkston...</td>\n","    </tr>\n","    <tr>\n","      <th>1703</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Blue Hav...</td>\n","    </tr>\n","    <tr>\n","      <th>1704</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Blue Hav...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1705 rows Ã— 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2561fcdc-ff9e-4dcc-b357-6f0b578b15dd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2561fcdc-ff9e-4dcc-b357-6f0b578b15dd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2561fcdc-ff9e-4dcc-b357-6f0b578b15dd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-716911f1-2227-4895-8f56-a23441b64004\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-716911f1-2227-4895-8f56-a23441b64004')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-716911f1-2227-4895-8f56-a23441b64004 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_38ad89f4-7046-463a-9f48-a090e9bf8f2a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_38ad89f4-7046-463a-9f48-a090e9bf8f2a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1705,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_Zigzag-2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_vertical_Greenpark_2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_vertical_sultanpark_2010_mask.jpg\"\n        ],\n        \"num_unique_values\": 1705,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["seperating the image paths according to years"],"metadata":{"id":"I0smws8SZXuD"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load the CSV file into a Pandas DataFrame\n","csv_path = \"/content/drive/MyDrive/CSV Files/Custom Mask Path All.csv\"  # Replace with the actual path to your CSV file\n","df = pd.read_csv(csv_path)\n","\n","# Extract the year from the image paths and create separate DataFrames\n","year_dataframes = {}\n","\n","for index, row in df.iterrows():\n","    image_path = row['Path']\n","\n","    # Extract the year from the image path (assuming a specific pattern in the file name)\n","    year = image_path.split('_mask')[0][-4:]\n","    # Create a DataFrame for the current year if it doesn't exist\n","    if year not in year_dataframes:\n","        year_dataframes[year] = pd.DataFrame(columns=df.columns)\n","\n","    # Append the row to the DataFrame of the corresponding year\n","    year_dataframes[year] = year_dataframes[year].append(row, ignore_index=True)\n","\n","# Example usage:\n","# Access DataFrames by year, e.g., year_dataframes['2020']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gZgpw63XWK57","executionInfo":{"status":"ok","timestamp":1708120549587,"user_tz":-360,"elapsed":1914,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"969701a3-251f-4bfc-859b-2c363a461f9c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-e0ba66083bec>:20: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  year_dataframes[year] = year_dataframes[year].append(row, ignore_index=True)\n","<ipython-input-3-e0ba66083bec>:20: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  year_dataframes[year] = year_dataframes[year].append(row, ignore_index=True)\n","<ipython-input-3-e0ba66083bec>:20: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  year_dataframes[year] = year_dataframes[year].append(row, ignore_index=True)\n","<ipython-input-3-e0ba66083bec>:20: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  year_dataframes[year] = year_dataframes[year].append(row, ignore_index=True)\n","<ipython-input-3-e0ba66083bec>:20: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  year_dataframes[year] = year_dataframes[year].append(row, ignore_index=True)\n"]}]},{"cell_type":"code","source":["df_2000=year_dataframes['2000']"],"metadata":{"id":"zQhFpYH-WYQD","executionInfo":{"status":"ok","timestamp":1708120552972,"user_tz":-360,"elapsed":555,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df_2005=year_dataframes['2005']"],"metadata":{"id":"LvMq_gzNWhZj","executionInfo":{"status":"ok","timestamp":1708120554396,"user_tz":-360,"elapsed":8,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["df_2005"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":687},"id":"QPjO7CtthLP4","executionInfo":{"status":"ok","timestamp":1707828628639,"user_tz":-360,"elapsed":29,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"d11d070e-48c0-4fa8-e60e-cc951782745f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  Path\n","0    /content/drive/MyDrive/custommasks/pp_Rancho P...\n","1    /content/drive/MyDrive/custommasks/pp_Bora Bor...\n","2    /content/drive/MyDrive/custommasks/pp_augmente...\n","3    /content/drive/MyDrive/custommasks/pp_augmente...\n","4    /content/drive/MyDrive/custommasks/pp_augmente...\n","..                                                 ...\n","336  /content/drive/MyDrive/custommasks/pp_Devonpor...\n","337  /content/drive/MyDrive/custommasks/pp_Kalgoorl...\n","338  /content/drive/MyDrive/custommasks/pp_Mount Ga...\n","339  /content/drive/MyDrive/custommasks/pp_Victor H...\n","340  /content/drive/MyDrive/custommasks/pp_Blue Hav...\n","\n","[341 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-2354b3cb-48b2-47d0-b58d-8272c4270915\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Rancho P...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Bora Bor...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Devonpor...</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Kalgoorl...</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Mount Ga...</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Victor H...</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Blue Hav...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2354b3cb-48b2-47d0-b58d-8272c4270915')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2354b3cb-48b2-47d0-b58d-8272c4270915 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2354b3cb-48b2-47d0-b58d-8272c4270915');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-51a99cab-fe2d-46b5-995c-1af641af68a4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-51a99cab-fe2d-46b5-995c-1af641af68a4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-51a99cab-fe2d-46b5-995c-1af641af68a4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4a1c3a84-cfaa-4366-8899-18620ea16585\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2005')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4a1c3a84-cfaa-4366-8899-18620ea16585 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2005');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df_2010=year_dataframes['2010']"],"metadata":{"id":"XfDAGmnjWjer","executionInfo":{"status":"ok","timestamp":1708120556822,"user_tz":-360,"elapsed":8,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["df_2010"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":687},"id":"_3F7G1ayNdrq","executionInfo":{"status":"ok","timestamp":1708091897315,"user_tz":-360,"elapsed":910,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"c16a76ed-2ddd-45d3-b361-69b8fe4a149c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  Path\n","0    /content/drive/MyDrive/custommasks/pp_Blue Hav...\n","1    /content/drive/MyDrive/custommasks/pp_Rancho P...\n","2    /content/drive/MyDrive/custommasks/pp_Morisset...\n","3    /content/drive/MyDrive/custommasks/pp_augmente...\n","4    /content/drive/MyDrive/custommasks/pp_augmente...\n","..                                                 ...\n","336  /content/drive/MyDrive/custommasks/pp_Devonpor...\n","337  /content/drive/MyDrive/custommasks/pp_Kalgoorl...\n","338  /content/drive/MyDrive/custommasks/pp_Mount Ga...\n","339  /content/drive/MyDrive/custommasks/pp_Victor H...\n","340  /content/drive/MyDrive/custommasks/pp_Alice Sp...\n","\n","[341 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-0f7789e4-4081-441b-90dc-deb1da97a516\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Blue Hav...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Rancho P...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Morisset...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Devonpor...</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Kalgoorl...</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Mount Ga...</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Victor H...</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f7789e4-4081-441b-90dc-deb1da97a516')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0f7789e4-4081-441b-90dc-deb1da97a516 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0f7789e4-4081-441b-90dc-deb1da97a516');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-db5985ae-db53-49d9-a09e-e16174c52f75\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db5985ae-db53-49d9-a09e-e16174c52f75')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-db5985ae-db53-49d9-a09e-e16174c52f75 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cff8f867-7b16-4cb1-8432-d2eb12053065\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2010')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cff8f867-7b16-4cb1-8432-d2eb12053065 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2010');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2010","summary":"{\n  \"name\": \"df_2010\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_Bunbury-2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_vertical_silva_2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_vertical_casas_2010_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df_2015=year_dataframes['2015']"],"metadata":{"id":"cCFQLLw4Wnl2","executionInfo":{"status":"ok","timestamp":1708120559274,"user_tz":-360,"elapsed":9,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df_2020=year_dataframes['2020']"],"metadata":{"id":"bsgfbGXnWrV0","executionInfo":{"status":"ok","timestamp":1708120561389,"user_tz":-360,"elapsed":5,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["\n"],"metadata":{"id":"YJNw_Y_ANLPy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["calculating gvi for 2000"],"metadata":{"id":"tFZH0H_-Zg67"}},{"cell_type":"code","source":["import pandas as pd\n","import cv2\n","import os\n","import numpy as np\n","\n","# Function to calculate GVI from a binary image\n","def calculate_gvi(image_path):\n","    image = cv2.imread(image_path)\n","    white_pixels = np.sum(image == 255)\n","    black_pixels = np.sum(image == 0)\n","    gvi = white_pixels / (white_pixels + black_pixels)\n","    return gvi\n","\n","# Function to process an image and calculate GVI\n","#def process_image_and_calculate_gvi(image_path):\n","    #image = cv2.imread(image_path)\n","\n","    # Convert the image to HSV color space\n","    #hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n","\n","    # Increase the saturation by a factor (e.g., 1.5 for 50% increase)\n","    #saturation_factor = 1.5\n","    #hsv_image[:, :, 1] = np.clip(hsv_image[:, :, 1] * saturation_factor, 0, 255).astype(np.uint8)\n","\n","    # Define the lower and upper bounds for green in the HSV color space\n","    #lower_green = np.array([40, 40, 40])\n","    #upper_green = np.array([80, 255, 255])\n","    #green_mask = cv2.inRange(hsv_image, lower_green, upper_green)\n","    #green_binary_image = np.where(green_mask == 255, 255, 0)\n","    #gvi_value = calculate_gvi(green_binary_image)\n","    #return gvi_value\n","\n","\n","\n","# Sort the DataFrame in alphabetical order based on the 'Path' column\n","df_2000 = df_2000.sort_values(by='Path')\n","\n","# Iterate through the DataFrame, calculate GVI, and store the values in a new column\n","df_2000['GVI'] = df_2000['Path'].apply(calculate_gvi)\n","\n","# Print or save the updated DataFrame\n","df_2000\n","# df.to_csv(\"/path/to/your/updated_csv_file.csv\", index=False)  # Uncomment to save the updated DataFrame to a new CSV file\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"0tXbJcEMXm-p","executionInfo":{"status":"ok","timestamp":1708096391462,"user_tz":-360,"elapsed":245051,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"00c0d312-edfa-4e4c-d528-4170e9b78d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  Path       GVI\n","334  /content/drive/MyDrive/custommasks/pp_Albany-2...  0.090059\n","292  /content/drive/MyDrive/custommasks/pp_Alice Sp...  0.191472\n","134  /content/drive/MyDrive/custommasks/pp_Als_2000...  0.054908\n","206  /content/drive/MyDrive/custommasks/pp_Alto da ...  0.000538\n","207  /content/drive/MyDrive/custommasks/pp_Armidale...  0.000352\n","..                                                 ...       ...\n","64   /content/drive/MyDrive/custommasks/pp_silva_20...  0.013786\n","132  /content/drive/MyDrive/custommasks/pp_sultanpa...  0.000689\n","233  /content/drive/MyDrive/custommasks/pp_vanier p...  0.004895\n","138  /content/drive/MyDrive/custommasks/pp_water_20...  0.046305\n","53   /content/drive/MyDrive/custommasks/pp_yakutf_2...  0.208025\n","\n","[341 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-789b620a-005f-4c71-bbc2-6706181fb827\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","      <th>GVI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>334</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>0.090059</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>0.191472</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2000...</td>\n","      <td>0.054908</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.000538</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.000352</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>0.013786</td>\n","    </tr>\n","    <tr>\n","      <th>132</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>0.000689</td>\n","    </tr>\n","    <tr>\n","      <th>233</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>0.004895</td>\n","    </tr>\n","    <tr>\n","      <th>138</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>0.046305</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>0.208025</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-789b620a-005f-4c71-bbc2-6706181fb827')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-789b620a-005f-4c71-bbc2-6706181fb827 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-789b620a-005f-4c71-bbc2-6706181fb827');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f32af7d2-b119-4105-9ff1-6d315d2732c9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f32af7d2-b119-4105-9ff1-6d315d2732c9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f32af7d2-b119-4105-9ff1-6d315d2732c9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_8234e297-3a1f-4604-b96e-3dab65a4644e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2000')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8234e297-3a1f-4604-b96e-3dab65a4644e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2000');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2000","summary":"{\n  \"name\": \"df_2000\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2000_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2000_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2000_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20860055973291858,\n        \"min\": 0.0,\n        \"max\": 0.8099334559145434,\n        \"samples\": [\n          0.000459460287315833,\n          0.08128445024659124,\n          0.28330308151300826\n        ],\n        \"num_unique_values\": 287,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["import pandas as pd\n","import cv2\n","import os\n","import numpy as np\n","\n","# Function to calculate GVI from a binary image\n","def calculate_gvi(image_path):\n","    image = cv2.imread(image_path)\n","    white_pixels = np.sum(image == 255)\n","    black_pixels = np.sum(image == 0)\n","    gvi = white_pixels / (white_pixels + black_pixels)\n","    return gvi\n","\n","# Function to process an image and calculate GVI\n","#def process_image_and_calculate_gvi(image_path):\n","    #image = cv2.imread(image_path)\n","\n","    # Convert the image to HSV color space\n","    #hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n","\n","    # Increase the saturation by a factor (e.g., 1.5 for 50% increase)\n","    #saturation_factor = 1.5\n","    #hsv_image[:, :, 1] = np.clip(hsv_image[:, :, 1] * saturation_factor, 0, 255).astype(np.uint8)\n","\n","    # Define the lower and upper bounds for green in the HSV color space\n","    #lower_green = np.array([40, 40, 40])\n","    #upper_green = np.array([80, 255, 255])\n","    #green_mask = cv2.inRange(hsv_image, lower_green, upper_green)\n","    #green_binary_image = np.where(green_mask == 255, 255, 0)\n","    #gvi_value = calculate_gvi(green_binary_image)\n","    #return gvi_value\n","\n","\n","\n","# Sort the DataFrame in alphabetical order based on the 'Path' column\n","df_2005 = df_2005.sort_values(by='Path')\n","\n","# Iterate through the DataFrame, calculate GVI, and store the values in a new column\n","df_2005['GVI'] = df_2005['Path'].apply(calculate_gvi)\n","\n","# Print or save the updated DataFrame\n","df_2005\n","# df.to_csv(\"/path/to/your/updated_csv_file.csv\", index=False)  # Uncomment to save the updated DataFrame to a new CSV file"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"22GCzXegZLY4","executionInfo":{"status":"ok","timestamp":1708096960041,"user_tz":-360,"elapsed":232452,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"436d988e-e131-4cff-d4d2-8bebaca7e9a7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  Path       GVI\n","335  /content/drive/MyDrive/custommasks/pp_Albany-2...  0.058147\n","306  /content/drive/MyDrive/custommasks/pp_Alice Sp...  0.064024\n","134  /content/drive/MyDrive/custommasks/pp_Als_2005...  0.000000\n","209  /content/drive/MyDrive/custommasks/pp_Alto da ...  0.000878\n","208  /content/drive/MyDrive/custommasks/pp_Armidale...  0.003667\n","..                                                 ...       ...\n","64   /content/drive/MyDrive/custommasks/pp_silva_20...  0.000000\n","131  /content/drive/MyDrive/custommasks/pp_sultanpa...  0.033346\n","237  /content/drive/MyDrive/custommasks/pp_vanier p...  0.003345\n","138  /content/drive/MyDrive/custommasks/pp_water_20...  0.082818\n","53   /content/drive/MyDrive/custommasks/pp_yakutf_2...  0.016070\n","\n","[341 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-d1b02bfd-dd4e-4814-9226-a543fed1f5b1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","      <th>GVI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>335</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>0.058147</td>\n","    </tr>\n","    <tr>\n","      <th>306</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>0.064024</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2005...</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>209</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.000878</td>\n","    </tr>\n","    <tr>\n","      <th>208</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.003667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>131</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>0.033346</td>\n","    </tr>\n","    <tr>\n","      <th>237</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>0.003345</td>\n","    </tr>\n","    <tr>\n","      <th>138</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>0.082818</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>0.016070</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1b02bfd-dd4e-4814-9226-a543fed1f5b1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d1b02bfd-dd4e-4814-9226-a543fed1f5b1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d1b02bfd-dd4e-4814-9226-a543fed1f5b1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-04adaa92-7794-491d-8e14-12f9a007f227\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04adaa92-7794-491d-8e14-12f9a007f227')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-04adaa92-7794-491d-8e14-12f9a007f227 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2be743fe-b918-45ef-872e-010f7f705e37\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2005')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2be743fe-b918-45ef-872e-010f7f705e37 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2005');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2005","summary":"{\n  \"name\": \"df_2005\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2005_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2005_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2005_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15636199656454666,\n        \"min\": 0.0,\n        \"max\": 0.8618791548460855,\n        \"samples\": [\n          0.26416735431209437,\n          0.0016639711370987809,\n          0.17093300934266203\n        ],\n        \"num_unique_values\": 290,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Reset indices\n","df_2000.reset_index(drop=True, inplace=True)\n","df_2005.reset_index(drop=True, inplace=True)\n","\n","# Reindex columns if needed\n","df_2005= df_2005[df_2000.columns]\n","\n","# Create a new DataFrame to store the GVI differences\n","df_gvi_diff1 = pd.DataFrame()\n","\n","# Calculate GVI differences for each corresponding row\n","\n","df_gvi_diff1['Path1'] = df_2000['Path']\n","df_gvi_diff1['Path2'] = df_2005['Path']\n","\n","df_gvi_diff1['GVI_diff'] = df_2005['GVI'].values - df_2000['GVI'].values\n","\n","# Print the new DataFrame with the calculated GVI differences\n","df_gvi_diff1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"n7aGX4C2SkVt","executionInfo":{"status":"ok","timestamp":1708097004701,"user_tz":-360,"elapsed":646,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"5a98919d-9d85-48c8-9d1e-0e358a78d6b7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                 Path1  \\\n","0    /content/drive/MyDrive/custommasks/pp_Albany-2...   \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp...   \n","2    /content/drive/MyDrive/custommasks/pp_Als_2000...   \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ...   \n","4    /content/drive/MyDrive/custommasks/pp_Armidale...   \n","..                                                 ...   \n","336  /content/drive/MyDrive/custommasks/pp_silva_20...   \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa...   \n","338  /content/drive/MyDrive/custommasks/pp_vanier p...   \n","339  /content/drive/MyDrive/custommasks/pp_water_20...   \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2...   \n","\n","                                                 Path2  GVI_diff  \n","0    /content/drive/MyDrive/custommasks/pp_Albany-2... -0.031912  \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp... -0.127448  \n","2    /content/drive/MyDrive/custommasks/pp_Als_2005... -0.054908  \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ...  0.000340  \n","4    /content/drive/MyDrive/custommasks/pp_Armidale...  0.003315  \n","..                                                 ...       ...  \n","336  /content/drive/MyDrive/custommasks/pp_silva_20... -0.013786  \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa...  0.032657  \n","338  /content/drive/MyDrive/custommasks/pp_vanier p... -0.001549  \n","339  /content/drive/MyDrive/custommasks/pp_water_20...  0.036514  \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2... -0.191955  \n","\n","[341 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-812e2fa5-7fef-418e-8413-6b44b321163a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path1</th>\n","      <th>Path2</th>\n","      <th>GVI_diff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>-0.031912</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>-0.127448</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2000...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2005...</td>\n","      <td>-0.054908</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.000340</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.003315</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>-0.013786</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>0.032657</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>-0.001549</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>0.036514</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>-0.191955</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-812e2fa5-7fef-418e-8413-6b44b321163a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-812e2fa5-7fef-418e-8413-6b44b321163a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-812e2fa5-7fef-418e-8413-6b44b321163a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-341639f9-5928-48c8-97ed-5df30a764e68\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-341639f9-5928-48c8-97ed-5df30a764e68')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-341639f9-5928-48c8-97ed-5df30a764e68 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_918154c8-ded1-4789-8eb4-12761f6fe18b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_gvi_diff1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_918154c8-ded1-4789-8eb4-12761f6fe18b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_gvi_diff1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_gvi_diff1","summary":"{\n  \"name\": \"df_gvi_diff1\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2000_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2000_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2000_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2005_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2005_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2005_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23386969571715463,\n        \"min\": -0.8085035598325713,\n        \"max\": 0.45960064784209553,\n        \"samples\": [\n          0.0012658227848101266,\n          0.03811205209166035,\n          -0.08012669836426282\n        ],\n        \"num_unique_values\": 301,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["import pandas as pd\n","import cv2\n","import os\n","import numpy as np\n","\n","# Function to calculate GVI from a binary image\n","def calculate_gvi(image_path):\n","    image = cv2.imread(image_path)\n","    white_pixels = np.sum(image == 255)\n","    black_pixels = np.sum(image == 0)\n","    gvi = white_pixels / (white_pixels + black_pixels)\n","    return gvi\n","\n","# Function to process an image and calculate GVI\n","#def process_image_and_calculate_gvi(image_path):\n","    #image = cv2.imread(image_path)\n","\n","    # Convert the image to HSV color space\n","    #hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n","\n","    # Increase the saturation by a factor (e.g., 1.5 for 50% increase)\n","    #saturation_factor = 1.5\n","    #hsv_image[:, :, 1] = np.clip(hsv_image[:, :, 1] * saturation_factor, 0, 255).astype(np.uint8)\n","\n","    # Define the lower and upper bounds for green in the HSV color space\n","    #lower_green = np.array([40, 40, 40])\n","    #upper_green = np.array([80, 255, 255])\n","    #green_mask = cv2.inRange(hsv_image, lower_green, upper_green)\n","    #green_binary_image = np.where(green_mask == 255, 255, 0)\n","    #gvi_value = calculate_gvi(green_binary_image)\n","    #return gvi_value\n","\n","\n","\n","# Sort the DataFrame in alphabetical order based on the 'Path' column\n","df_2010 = df_2010.sort_values(by='Path')\n","\n","# Iterate through the DataFrame, calculate GVI, and store the values in a new column\n","df_2010['GVI'] = df_2010['Path'].apply(calculate_gvi)\n","\n","# Print or save the updated DataFrame\n","df_2010"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"hNE3lk95RgG5","executionInfo":{"status":"ok","timestamp":1708097241894,"user_tz":-360,"elapsed":233483,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"1dbd3ec6-ad9f-43e3-a82d-7446e84576c8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  Path       GVI\n","335  /content/drive/MyDrive/custommasks/pp_Albany-2...  0.025236\n","340  /content/drive/MyDrive/custommasks/pp_Alice Sp...  0.052063\n","136  /content/drive/MyDrive/custommasks/pp_Als_2010...  0.231807\n","208  /content/drive/MyDrive/custommasks/pp_Alto da ...  0.240822\n","209  /content/drive/MyDrive/custommasks/pp_Armidale...  0.058538\n","..                                                 ...       ...\n","66   /content/drive/MyDrive/custommasks/pp_silva_20...  0.000122\n","133  /content/drive/MyDrive/custommasks/pp_sultanpa...  0.032830\n","236  /content/drive/MyDrive/custommasks/pp_vanier p...  0.130645\n","140  /content/drive/MyDrive/custommasks/pp_water_20...  0.248088\n","55   /content/drive/MyDrive/custommasks/pp_yakutf_2...  0.797939\n","\n","[341 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-f4749687-7454-4063-b747-840110023579\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","      <th>GVI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>335</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>0.025236</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>0.052063</td>\n","    </tr>\n","    <tr>\n","      <th>136</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2010...</td>\n","      <td>0.231807</td>\n","    </tr>\n","    <tr>\n","      <th>208</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.240822</td>\n","    </tr>\n","    <tr>\n","      <th>209</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.058538</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>0.000122</td>\n","    </tr>\n","    <tr>\n","      <th>133</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>0.032830</td>\n","    </tr>\n","    <tr>\n","      <th>236</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>0.130645</td>\n","    </tr>\n","    <tr>\n","      <th>140</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>0.248088</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>0.797939</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4749687-7454-4063-b747-840110023579')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f4749687-7454-4063-b747-840110023579 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f4749687-7454-4063-b747-840110023579');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-70efa220-06dc-4cb5-b1c3-60fbe7979d0e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-70efa220-06dc-4cb5-b1c3-60fbe7979d0e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-70efa220-06dc-4cb5-b1c3-60fbe7979d0e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e9de7a39-16be-455e-9d8b-19875200ff24\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2010')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e9de7a39-16be-455e-9d8b-19875200ff24 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2010');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2010","summary":"{\n  \"name\": \"df_2010\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2010_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1702782518005115,\n        \"min\": 0.0,\n        \"max\": 0.7999957986723805,\n        \"samples\": [\n          0.0016606655078222,\n          0.17395029991431019,\n          0.32421461348393926\n        ],\n        \"num_unique_values\": 295,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Reset indices\n","df_2010.reset_index(drop=True, inplace=True)\n","df_2005.reset_index(drop=True, inplace=True)\n","\n","# Reindex columns if needed\n","df_2010= df_2010[df_2005.columns]\n","\n","# Create a new DataFrame to store the GVI differences\n","df_gvi_diff2 = pd.DataFrame()\n","\n","# Calculate GVI differences for each corresponding row\n","\n","df_gvi_diff2['Path1'] = df_2005['Path']\n","df_gvi_diff2['Path2'] = df_2010['Path']\n","\n","df_gvi_diff2['GVI_diff'] = df_2010['GVI'].values - df_2005['GVI'].values\n","\n","# Print the new DataFrame with the calculated GVI differences\n","df_gvi_diff2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"fvdaAL30UtRR","executionInfo":{"status":"ok","timestamp":1708097250274,"user_tz":-360,"elapsed":652,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"bda1833a-1c31-41bd-8573-56c88b8baac9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                 Path1  \\\n","0    /content/drive/MyDrive/custommasks/pp_Albany-2...   \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp...   \n","2    /content/drive/MyDrive/custommasks/pp_Als_2005...   \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ...   \n","4    /content/drive/MyDrive/custommasks/pp_Armidale...   \n","..                                                 ...   \n","336  /content/drive/MyDrive/custommasks/pp_silva_20...   \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa...   \n","338  /content/drive/MyDrive/custommasks/pp_vanier p...   \n","339  /content/drive/MyDrive/custommasks/pp_water_20...   \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2...   \n","\n","                                                 Path2  GVI_diff  \n","0    /content/drive/MyDrive/custommasks/pp_Albany-2... -0.032911  \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp... -0.011962  \n","2    /content/drive/MyDrive/custommasks/pp_Als_2010...  0.231807  \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ...  0.239944  \n","4    /content/drive/MyDrive/custommasks/pp_Armidale...  0.054872  \n","..                                                 ...       ...  \n","336  /content/drive/MyDrive/custommasks/pp_silva_20...  0.000122  \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa... -0.000516  \n","338  /content/drive/MyDrive/custommasks/pp_vanier p...  0.127300  \n","339  /content/drive/MyDrive/custommasks/pp_water_20...  0.165270  \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2...  0.781869  \n","\n","[341 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-55e3e494-c074-41d5-937c-4708193ec924\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path1</th>\n","      <th>Path2</th>\n","      <th>GVI_diff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>-0.032911</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>-0.011962</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2005...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2010...</td>\n","      <td>0.231807</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.239944</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.054872</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>0.000122</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>-0.000516</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>0.127300</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>0.165270</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>0.781869</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55e3e494-c074-41d5-937c-4708193ec924')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-55e3e494-c074-41d5-937c-4708193ec924 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-55e3e494-c074-41d5-937c-4708193ec924');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d0e40bb0-ef62-43c0-8822-ec57275c25ee\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0e40bb0-ef62-43c0-8822-ec57275c25ee')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d0e40bb0-ef62-43c0-8822-ec57275c25ee button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5e09c576-1caa-485d-997a-1933d8c3afc8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_gvi_diff2')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5e09c576-1caa-485d-997a-1933d8c3afc8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_gvi_diff2');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_gvi_diff2","summary":"{\n  \"name\": \"df_gvi_diff2\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2005_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2005_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2005_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2010_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23315209182032087,\n        \"min\": -0.8385489112251757,\n        \"max\": 0.7843083178972343,\n        \"samples\": [\n          0.03077023244165123,\n          0.5620465050678425,\n          0.020265417936504444\n        ],\n        \"num_unique_values\": 309,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["import pandas as pd\n","import cv2\n","import os\n","import numpy as np\n","\n","# Function to calculate GVI from a binary image\n","def calculate_gvi(image_path):\n","    image = cv2.imread(image_path)\n","    white_pixels = np.sum(image == 255)\n","    black_pixels = np.sum(image == 0)\n","    gvi = white_pixels / (white_pixels + black_pixels)\n","    return gvi\n","\n","# Function to process an image and calculate GVI\n","#def process_image_and_calculate_gvi(image_path):\n","    #image = cv2.imread(image_path)\n","\n","    # Convert the image to HSV color space\n","    #hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n","\n","    # Increase the saturation by a factor (e.g., 1.5 for 50% increase)\n","    #saturation_factor = 1.5\n","    #hsv_image[:, :, 1] = np.clip(hsv_image[:, :, 1] * saturation_factor, 0, 255).astype(np.uint8)\n","\n","    # Define the lower and upper bounds for green in the HSV color space\n","    #lower_green = np.array([40, 40, 40])\n","    #upper_green = np.array([80, 255, 255])\n","    #green_mask = cv2.inRange(hsv_image, lower_green, upper_green)\n","    #green_binary_image = np.where(green_mask == 255, 255, 0)\n","    #gvi_value = calculate_gvi(green_binary_image)\n","    #return gvi_value\n","\n","\n","\n","# Sort the DataFrame in alphabetical order based on the 'Path' column\n","df_2015 = df_2015.sort_values(by='Path')\n","\n","# Iterate through the DataFrame, calculate GVI, and store the values in a new column\n","df_2015['GVI'] = df_2015['Path'].apply(calculate_gvi)\n","\n","# Print or save the updated DataFrame\n","df_2015"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"kkaYg4AYVAoC","executionInfo":{"status":"ok","timestamp":1708120653377,"user_tz":-360,"elapsed":79395,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"751138fa-2ec7-4ab1-fbec-fc9d1561643e"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  Path       GVI\n","335  /content/drive/MyDrive/custommasks/pp_Albany-2...  0.083995\n","340  /content/drive/MyDrive/custommasks/pp_Alice Sp...  0.059627\n","134  /content/drive/MyDrive/custommasks/pp_Als_2015...  0.078635\n","206  /content/drive/MyDrive/custommasks/pp_Alto da ...  0.005369\n","207  /content/drive/MyDrive/custommasks/pp_Armidale...  0.717805\n","..                                                 ...       ...\n","64   /content/drive/MyDrive/custommasks/pp_silva_20...  0.001551\n","131  /content/drive/MyDrive/custommasks/pp_sultanpa...  0.222450\n","234  /content/drive/MyDrive/custommasks/pp_vanier p...  0.148345\n","138  /content/drive/MyDrive/custommasks/pp_water_20...  0.073291\n","53   /content/drive/MyDrive/custommasks/pp_yakutf_2...  0.101002\n","\n","[341 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-c4e15a61-810e-404c-a29a-39a8a693fbbc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","      <th>GVI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>335</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>0.083995</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>0.059627</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2015...</td>\n","      <td>0.078635</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.005369</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.717805</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>0.001551</td>\n","    </tr>\n","    <tr>\n","      <th>131</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>0.222450</td>\n","    </tr>\n","    <tr>\n","      <th>234</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>0.148345</td>\n","    </tr>\n","    <tr>\n","      <th>138</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>0.073291</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>0.101002</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4e15a61-810e-404c-a29a-39a8a693fbbc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c4e15a61-810e-404c-a29a-39a8a693fbbc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c4e15a61-810e-404c-a29a-39a8a693fbbc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ccc3b52a-14a6-47e3-a783-0e96eedbb7ab\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ccc3b52a-14a6-47e3-a783-0e96eedbb7ab')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ccc3b52a-14a6-47e3-a783-0e96eedbb7ab button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_86fe8efd-eea5-4274-96bb-153fe1dbfd69\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2015')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_86fe8efd-eea5-4274-96bb-153fe1dbfd69 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2015');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2015","summary":"{\n  \"name\": \"df_2015\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2015_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13546055854142738,\n        \"min\": 0.0,\n        \"max\": 0.7197842661583781,\n        \"samples\": [\n          0.2421418385587178,\n          0.059208599631345935,\n          0.008302265108556032\n        ],\n        \"num_unique_values\": 290,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Reset indices\n","df_2010.reset_index(drop=True, inplace=True)\n","df_2015.reset_index(drop=True, inplace=True)\n","\n","# Reindex columns if needed\n","df_2015= df_2015[df_2010.columns]\n","\n","# Create a new DataFrame to store the GVI differences\n","df_gvi_diff3 = pd.DataFrame()\n","\n","# Calculate GVI differences for each corresponding row\n","\n","df_gvi_diff3['Path1'] = df_2010['Path']\n","df_gvi_diff3['Path2'] = df_2015['Path']\n","\n","df_gvi_diff3['GVI_diff'] = df_2015['GVI'].values - df_2010['GVI'].values\n","\n","# Print the new DataFrame with the calculated GVI differences\n","df_gvi_diff3\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"18JVtqQzWR_I","executionInfo":{"status":"ok","timestamp":1708097502706,"user_tz":-360,"elapsed":694,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"479c31a9-f2dd-46bd-9126-c85fbdba38b4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                 Path1  \\\n","0    /content/drive/MyDrive/custommasks/pp_Albany-2...   \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp...   \n","2    /content/drive/MyDrive/custommasks/pp_Als_2010...   \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ...   \n","4    /content/drive/MyDrive/custommasks/pp_Armidale...   \n","..                                                 ...   \n","336  /content/drive/MyDrive/custommasks/pp_silva_20...   \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa...   \n","338  /content/drive/MyDrive/custommasks/pp_vanier p...   \n","339  /content/drive/MyDrive/custommasks/pp_water_20...   \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2...   \n","\n","                                                 Path2  GVI_diff  \n","0    /content/drive/MyDrive/custommasks/pp_Albany-2...  0.058759  \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp...  0.007565  \n","2    /content/drive/MyDrive/custommasks/pp_Als_2015... -0.153172  \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ... -0.235454  \n","4    /content/drive/MyDrive/custommasks/pp_Armidale...  0.659267  \n","..                                                 ...       ...  \n","336  /content/drive/MyDrive/custommasks/pp_silva_20...  0.001428  \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa...  0.189620  \n","338  /content/drive/MyDrive/custommasks/pp_vanier p...  0.017700  \n","339  /content/drive/MyDrive/custommasks/pp_water_20... -0.174797  \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2... -0.696937  \n","\n","[341 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-0babf6f7-30fa-4586-9488-b0319017ff01\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path1</th>\n","      <th>Path2</th>\n","      <th>GVI_diff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>0.058759</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>0.007565</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2010...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2015...</td>\n","      <td>-0.153172</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>-0.235454</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.659267</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>0.001428</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>0.189620</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>0.017700</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>-0.174797</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>-0.696937</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0babf6f7-30fa-4586-9488-b0319017ff01')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0babf6f7-30fa-4586-9488-b0319017ff01 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0babf6f7-30fa-4586-9488-b0319017ff01');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e3b2c25c-40dd-4245-a0fc-f90fb863cf35\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3b2c25c-40dd-4245-a0fc-f90fb863cf35')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e3b2c25c-40dd-4245-a0fc-f90fb863cf35 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_fae2ac5c-03d3-4020-9aec-a51692a6e9d1\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_gvi_diff3')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fae2ac5c-03d3-4020-9aec-a51692a6e9d1 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_gvi_diff3');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_gvi_diff3","summary":"{\n  \"name\": \"df_gvi_diff3\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2010_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2010_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2015_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22930157912393512,\n        \"min\": -0.7001252126121106,\n        \"max\": 0.6624452760092494,\n        \"samples\": [\n          0.042404853399973144,\n          0.09316930203254858,\n          0.0694267846978667\n        ],\n        \"num_unique_values\": 305,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["import pandas as pd\n","import cv2\n","import os\n","import numpy as np\n","\n","# Function to calculate GVI from a binary image\n","def calculate_gvi(image_path):\n","    image = cv2.imread(image_path)\n","    white_pixels = np.sum(image == 255)\n","    black_pixels = np.sum(image == 0)\n","    gvi = white_pixels / (white_pixels + black_pixels)\n","    return gvi\n","\n","# Function to process an image and calculate GVI\n","#def process_image_and_calculate_gvi(image_path):\n","    #image = cv2.imread(image_path)\n","\n","    # Convert the image to HSV color space\n","    #hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n","\n","    # Increase the saturation by a factor (e.g., 1.5 for 50% increase)\n","    #saturation_factor = 1.5\n","    #hsv_image[:, :, 1] = np.clip(hsv_image[:, :, 1] * saturation_factor, 0, 255).astype(np.uint8)\n","\n","    # Define the lower and upper bounds for green in the HSV color space\n","    #lower_green = np.array([40, 40, 40])\n","    #upper_green = np.array([80, 255, 255])\n","    #green_mask = cv2.inRange(hsv_image, lower_green, upper_green)\n","    #green_binary_image = np.where(green_mask == 255, 255, 0)\n","    #gvi_value = calculate_gvi(green_binary_image)\n","    #return gvi_value\n","\n","\n","\n","# Sort the DataFrame in alphabetical order based on the 'Path' column\n","df_2020 = df_2020.sort_values(by='Path')\n","\n","# Iterate through the DataFrame, calculate GVI, and store the values in a new column\n","df_2020['GVI'] = df_2020['Path'].apply(calculate_gvi)\n","\n","# Print or save the updated DataFrame\n","df_2020"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"arUrmL8EXmlv","executionInfo":{"status":"ok","timestamp":1708120752733,"user_tz":-360,"elapsed":75678,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"cc8397bc-4543-4574-efb9-cb4b8ae5109e"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  Path       GVI\n","335  /content/drive/MyDrive/custommasks/pp_Albany-2...  0.004717\n","340  /content/drive/MyDrive/custommasks/pp_Alice Sp...  0.042591\n","137  /content/drive/MyDrive/custommasks/pp_Als_2020...  0.010347\n","207  /content/drive/MyDrive/custommasks/pp_Alto da ...  0.032438\n","206  /content/drive/MyDrive/custommasks/pp_Armidale...  0.002684\n","..                                                 ...       ...\n","67   /content/drive/MyDrive/custommasks/pp_silva_20...  0.000444\n","134  /content/drive/MyDrive/custommasks/pp_sultanpa...  0.149426\n","235  /content/drive/MyDrive/custommasks/pp_vanier p...  0.007425\n","141  /content/drive/MyDrive/custommasks/pp_water_20...  0.020150\n","56   /content/drive/MyDrive/custommasks/pp_yakutf_2...  0.689292\n","\n","[341 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-bd3868d5-12a2-4ea4-a3c9-7b0552697049\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path</th>\n","      <th>GVI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>335</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>0.004717</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>0.042591</td>\n","    </tr>\n","    <tr>\n","      <th>137</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2020...</td>\n","      <td>0.010347</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.032438</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>0.002684</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>0.000444</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>0.149426</td>\n","    </tr>\n","    <tr>\n","      <th>235</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>0.007425</td>\n","    </tr>\n","    <tr>\n","      <th>141</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>0.020150</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>0.689292</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd3868d5-12a2-4ea4-a3c9-7b0552697049')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bd3868d5-12a2-4ea4-a3c9-7b0552697049 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bd3868d5-12a2-4ea4-a3c9-7b0552697049');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-557bcc11-ec37-4dd4-ba3e-42490fa4bf04\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-557bcc11-ec37-4dd4-ba3e-42490fa4bf04')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-557bcc11-ec37-4dd4-ba3e-42490fa4bf04 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a34e8699-803e-4085-867f-2a0c123ae791\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2020')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a34e8699-803e-4085-867f-2a0c123ae791 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2020');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2020","summary":"{\n  \"name\": \"df_2020\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2020_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14015524956421327,\n        \"min\": 0.00013788876972575456,\n        \"max\": 0.7005850879556564,\n        \"samples\": [\n          0.4566004585288509,\n          0.034067138161171434,\n          0.06252159437132895\n        ],\n        \"num_unique_values\": 298,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Reset indices\n","df_2015.reset_index(drop=True, inplace=True)\n","df_2020.reset_index(drop=True, inplace=True)\n","\n","# Reindex columns if needed\n","df_2020= df_2020[df_2015.columns]\n","\n","# Create a new DataFrame to store the GVI differences\n","df_gvi_diff4 = pd.DataFrame()\n","\n","# Calculate GVI differences for each corresponding row\n","\n","df_gvi_diff4['Path1'] = df_2015['Path']\n","df_gvi_diff4['Path2'] = df_2020['Path']\n","\n","df_gvi_diff4['GVI_diff'] = df_2020['GVI'].values - df_2015['GVI'].values\n","\n","# Print the new DataFrame with the calculated GVI differences\n","df_gvi_diff4\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"4XSWHNNgZHmW","executionInfo":{"status":"ok","timestamp":1708120776604,"user_tz":-360,"elapsed":856,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"737da3b3-23f8-4b3c-918f-e913f966b9e2"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                 Path1  \\\n","0    /content/drive/MyDrive/custommasks/pp_Albany-2...   \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp...   \n","2    /content/drive/MyDrive/custommasks/pp_Als_2015...   \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ...   \n","4    /content/drive/MyDrive/custommasks/pp_Armidale...   \n","..                                                 ...   \n","336  /content/drive/MyDrive/custommasks/pp_silva_20...   \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa...   \n","338  /content/drive/MyDrive/custommasks/pp_vanier p...   \n","339  /content/drive/MyDrive/custommasks/pp_water_20...   \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2...   \n","\n","                                                 Path2  GVI_diff  \n","0    /content/drive/MyDrive/custommasks/pp_Albany-2... -0.079278  \n","1    /content/drive/MyDrive/custommasks/pp_Alice Sp... -0.017036  \n","2    /content/drive/MyDrive/custommasks/pp_Als_2020... -0.068288  \n","3    /content/drive/MyDrive/custommasks/pp_Alto da ...  0.027069  \n","4    /content/drive/MyDrive/custommasks/pp_Armidale... -0.715121  \n","..                                                 ...       ...  \n","336  /content/drive/MyDrive/custommasks/pp_silva_20... -0.001106  \n","337  /content/drive/MyDrive/custommasks/pp_sultanpa... -0.073024  \n","338  /content/drive/MyDrive/custommasks/pp_vanier p... -0.140920  \n","339  /content/drive/MyDrive/custommasks/pp_water_20... -0.053141  \n","340  /content/drive/MyDrive/custommasks/pp_yakutf_2...  0.588289  \n","\n","[341 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-d3e6b38d-30fc-40d8-9185-97f55aad96a1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path1</th>\n","      <th>Path2</th>\n","      <th>GVI_diff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Albany-2...</td>\n","      <td>-0.079278</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alice Sp...</td>\n","      <td>-0.017036</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2015...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Als_2020...</td>\n","      <td>-0.068288</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Alto da ...</td>\n","      <td>0.027069</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Armidale...</td>\n","      <td>-0.715121</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_silva_20...</td>\n","      <td>-0.001106</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_sultanpa...</td>\n","      <td>-0.073024</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_vanier p...</td>\n","      <td>-0.140920</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_water_20...</td>\n","      <td>-0.053141</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_yakutf_2...</td>\n","      <td>0.588289</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>341 rows Ã— 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3e6b38d-30fc-40d8-9185-97f55aad96a1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d3e6b38d-30fc-40d8-9185-97f55aad96a1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d3e6b38d-30fc-40d8-9185-97f55aad96a1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bd227802-a94b-404d-9332-af19370a974a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd227802-a94b-404d-9332-af19370a974a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bd227802-a94b-404d-9332-af19370a974a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_da18584e-4db7-490e-8d2e-0beb3fb39d6d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_gvi_diff4')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_da18584e-4db7-490e-8d2e-0beb3fb39d6d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_gvi_diff4');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_gvi_diff4","summary":"{\n  \"name\": \"df_gvi_diff4\",\n  \"rows\": 341,\n  \"fields\": [\n    {\n      \"column\": \"Path1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2015_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_escola_2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Coffs Harbour-2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_Casa do Taichi, Brazil 2020_mask.jpg\"\n        ],\n        \"num_unique_values\": 341,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GVI_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19259908529624997,\n        \"min\": -0.7169178267409625,\n        \"max\": 0.6940728094352958,\n        \"samples\": [\n          -0.08964640739001886,\n          -0.25030063019263854,\n          -0.23595656467937648\n        ],\n        \"num_unique_values\": 306,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["splitting all 4 gvi differences into train test, maintaining uniformity"],"metadata":{"id":"qcpJ1p9VaiFo"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","#df_gvi_diff1_train, df_gvi_diff1_test =train_test_split(df_gvi_diff1,test_size=0.2, random_state=42)\n","#df_gvi_diff2_train, df_gvi_diff2_test =train_test_split(df_gvi_diff2,test_size=0.2, random_state=42)\n","#df_gvi_diff3_train, df_gvi_diff3_test =train_test_split(df_gvi_diff3,test_size=0.2, random_state=42)\n","df_gvi_diff4_train, df_gvi_diff4_test =train_test_split(df_gvi_diff4,test_size=0.2, random_state=42)"],"metadata":{"id":"tX6oNehsWeiT","executionInfo":{"status":"ok","timestamp":1708120785619,"user_tz":-360,"elapsed":1894,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["df_gvi_diff4_test.to_csv('/content/drive/MyDrive/Maliha Prediction/Actual GVI Difference 2020-2015 (test data).csv',index=False)"],"metadata":{"id":"VyeNpHtcZZi3","executionInfo":{"status":"ok","timestamp":1708120927667,"user_tz":-360,"elapsed":520,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ueCOAsb-nYUW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Stored the predicted values (for df_gvi_1_test) of siamese model1 in precited_array1"],"metadata":{"id":"IlLqG2U9nYuB"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np  # Add this import statement\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import numpy as np\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","from keras.layers import Input, concatenate, Flatten, Dense, Dropout, Conv2D, MaxPooling2D\n","from keras.models import Model\n","\n","# Load the CSV file\n","#csv_path = '/content/drive/MyDrive/CSV Files//DATASET SUPREMACY.csv'\n","df = df_gvi_diff1_train\n","\n","width = 224\n","height = 224\n","channels = 3\n","input_shape = (height, width, channels)\n","\n","# Create empty lists to store data\n","Image1 = []  # List to store images from Path1\n","Image2 = []  # List to store images from Path2\n","y = []       # List to store GVI differences\n","\n","# Iterate through rows and load images\n","for index, row in df.iterrows():\n","    image_path1 = row['Path1']\n","    image_path2 = row['Path2']\n","\n","\n","\n","    # Open images using PIL and convert to RGB format\n","    img1 = Image.open(image_path1).convert('RGB').resize((width, height))\n","    img2 = Image.open(image_path2).convert('RGB').resize((width, height))\n","\n","    # Organize images based on iteration\n","    #if index % 4 == 0:\n","     #Image1.append(np.array(img1))\n","     #Image2.append(np.array(img2))\n","     #y.append(row['GVI_diff'])\n","    #elif index % 4 == 1:\n","        #Image2.append(np.array(img))\n","    #elif index % 4 == 2:\n","        #Image3.append(np.array(img))\n","    #if index % 4 == 2:\n","    Image1.append(np.array(img1))\n","    Image2.append(np.array(img2))\n","    y.append(row['GVI_diff'])\n","\n","\n","\n","\n","# Convert lists to NumPy arrays\n","Image1 = np.array(Image1)\n","Image2 = np.array(Image2)\n","y = np.array(y)\n","# Print the shape of input images\n","print(\"Shape of Image1:\", Image1.shape)\n","print(\"Shape of Image2:\", Image2.shape)\n","print(\"Shape of labels (y):\", y.shape)\n","\n","\n","\n","from keras.layers import Input, concatenate, Flatten, Dense, Dropout, Conv2D, MaxPooling2D\n","from keras.models import Model\n","\n","# Assuming input image size of 224x224 pixels and 3 channels for RGB images\n","df2 = df_gvi_diff1_test\n","\n","width = 224\n","height = 224\n","channels = 3\n","input_shape = (height, width, channels)\n","\n","# Create empty lists to store data\n","X1_test = []  # List to store images from Path1\n","X2_test = []  # List to store images from Path2\n","y_test = []       # List to store GVI differences\n","\n","# Iterate through rows and load images\n","for index, row in df2.iterrows():\n","    image_path1 = row['Path1']\n","    image_path2 = row['Path2']\n","\n","\n","\n","    # Open images using PIL and convert to RGB format\n","    img1 = Image.open(image_path1).convert('RGB').resize((width, height))\n","    img2 = Image.open(image_path2).convert('RGB').resize((width, height))\n","\n","    # Organize images based on iteration\n","    #if index % 4 == 0:\n","     #Image1.append(np.array(img1))\n","     #Image2.append(np.array(img2))\n","     #y.append(row['GVI_diff'])\n","    #elif index % 4 == 1:\n","        #Image2.append(np.array(img))\n","    #elif index % 4 == 2:\n","        #Image3.append(np.array(img))\n","    #if index % 4 == 2:\n","    X1_test.append(np.array(img1))\n","    X2_test.append(np.array(img2))\n","    y_test.append(row['GVI_diff'])\n","\n","\n","\n","\n","# Convert lists to NumPy arrays\n","X1_test = np.array(X1_test)\n","X2_test = np.array(X2_test)\n","y_test = np.array(y_test)\n","\n","# Build the Siamese model for regression with a simple CNN and RGB image input\n","def build_siamese_model(input_shape):\n","    input_a = Input(shape=input_shape)\n","    input_b = Input(shape=input_shape)\n","\n","    # Shared convolutional layers\n","    conv1 = Conv2D(32, (3, 3), activation='relu')(input_a)\n","    maxpool1 = MaxPooling2D((2, 2))(conv1)\n","    conv2 = Conv2D(64, (3, 3), activation='relu')(maxpool1)\n","    maxpool2 = MaxPooling2D((2, 2))(conv2)\n","    conv3 = Conv2D(128, (3, 3), activation='relu')(maxpool2)\n","    maxpool3 = MaxPooling2D((2, 2))(conv3)\n","\n","    # Flatten and add dropout for regularization\n","    flattened_features = Flatten()(maxpool3)\n","    dropout_1 = Dropout(0.5)(flattened_features)\n","\n","    # Separate branches for each input image\n","    fc_a = Dense(256, activation='relu')(dropout_1)\n","    fc_b = Dense(256, activation='relu')(dropout_1)\n","\n","    # Additional fully connected layers for regression\n","    fc2_a = Dense(128, activation='relu')(fc_a)\n","    fc2_b = Dense(128, activation='relu')(fc_b)\n","\n","    # Output layer for regression\n","    output_layer = Dense(1, activation='linear')(concatenate([fc2_a, fc2_b]))\n","\n","    model = Model(inputs=[input_a, input_b], outputs=output_layer)\n","\n","    return model\n","\n","# Create an instance of the Siamese model with 3-channel RGB input\n","siamese_model_rgb = build_siamese_model(input_shape)\n","\n","# Compile the model\n","siamese_model_rgb.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n","\n","# Display the model summary\n","siamese_model_rgb.summary()\n","\n","# Display the model summary\n","siamese_model_rgb.summary()\n","# Split data into training and validation sets\n","# (Make sure to load and preprocess binary images and labels correctly)\n","#X1_train, X1_test, X2_train, X2_test, y_train, y_val = train_test_split(Image1, Image2, y, test_size=0.2, random_state=42)\n","#print(\"Shape of X1_train:\", X1_train.shape)\n","#print(\"Shape of X2_train:\", X2_train.shape)\n","#print(\"Shape of y_train:\", y_train.shape)\n","\n","# Assuming X1_train, X2_train, X1_test, X2_test are loaded and preprocessed grayscale images with shape (224, 224, 1)\n","\n","# Train the Siamese model\n","history_binary = siamese_model_rgb.fit(\n","    x=[Image1, Image2],\n","    y=y,\n","    batch_size=16,\n","    epochs=7,\n","    #validation_data=([X1_test, X2_test], y_test)\n",")\n","\n","# Evaluate the model on the test set\n","y_pred_binary = siamese_model_rgb.predict([X1_test, X2_test])\n","\n","# Print the actual and predicted values\n","for actual, predicted in zip(y_test, y_pred_binary):\n","    print(\"Actual: {:.4f}, Predicted: {:.4f}\".format(actual, predicted[0]))\n","\n","# Convert the predicted values to a NumPy array\n","predicted_array1 = np.array([pred[0] for pred in y_pred_binary])\n","print(\"Predicted values array:\", predicted_array1)\n","\n","# Calculate metrics\n","mae_binary = mean_absolute_error(y_test, y_pred_binary)\n","mse_binary = mean_squared_error(y_test, y_pred_binary)\n","rmse_binary = np.sqrt(mse_binary)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae_binary)\n","print(\"Test MSE:\", mse_binary)\n","print(\"Test RMSE:\", rmse_binary)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5eAw8ftsiwz-","executionInfo":{"status":"ok","timestamp":1708106273892,"user_tz":-360,"elapsed":332209,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"27060b22-4593-41d4-d0d3-1b84f7c787ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of Image1: (272, 224, 224, 3)\n","Shape of Image2: (272, 224, 224, 3)\n","Shape of labels (y): (272,)\n","Model: \"model_7\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_15 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," conv2d_21 (Conv2D)          (None, 222, 222, 32)         896       ['input_15[0][0]']            \n","                                                                                                  \n"," max_pooling2d_21 (MaxPooli  (None, 111, 111, 32)         0         ['conv2d_21[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_22 (Conv2D)          (None, 109, 109, 64)         18496     ['max_pooling2d_21[0][0]']    \n","                                                                                                  \n"," max_pooling2d_22 (MaxPooli  (None, 54, 54, 64)           0         ['conv2d_22[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_23 (Conv2D)          (None, 52, 52, 128)          73856     ['max_pooling2d_22[0][0]']    \n","                                                                                                  \n"," max_pooling2d_23 (MaxPooli  (None, 26, 26, 128)          0         ['conv2d_23[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," flatten_7 (Flatten)         (None, 86528)                0         ['max_pooling2d_23[0][0]']    \n","                                                                                                  \n"," dropout_7 (Dropout)         (None, 86528)                0         ['flatten_7[0][0]']           \n","                                                                                                  \n"," dense_35 (Dense)            (None, 256)                  2215142   ['dropout_7[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_36 (Dense)            (None, 256)                  2215142   ['dropout_7[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_37 (Dense)            (None, 128)                  32896     ['dense_35[0][0]']            \n","                                                                                                  \n"," dense_38 (Dense)            (None, 128)                  32896     ['dense_36[0][0]']            \n","                                                                                                  \n"," concatenate_7 (Concatenate  (None, 256)                  0         ['dense_37[0][0]',            \n"," )                                                                   'dense_38[0][0]']            \n","                                                                                                  \n"," input_16 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," dense_39 (Dense)            (None, 1)                    257       ['concatenate_7[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 44462145 (169.61 MB)\n","Trainable params: 44462145 (169.61 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","__________________________________________________________________________________________________\n","Model: \"model_7\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_15 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," conv2d_21 (Conv2D)          (None, 222, 222, 32)         896       ['input_15[0][0]']            \n","                                                                                                  \n"," max_pooling2d_21 (MaxPooli  (None, 111, 111, 32)         0         ['conv2d_21[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_22 (Conv2D)          (None, 109, 109, 64)         18496     ['max_pooling2d_21[0][0]']    \n","                                                                                                  \n"," max_pooling2d_22 (MaxPooli  (None, 54, 54, 64)           0         ['conv2d_22[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_23 (Conv2D)          (None, 52, 52, 128)          73856     ['max_pooling2d_22[0][0]']    \n","                                                                                                  \n"," max_pooling2d_23 (MaxPooli  (None, 26, 26, 128)          0         ['conv2d_23[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," flatten_7 (Flatten)         (None, 86528)                0         ['max_pooling2d_23[0][0]']    \n","                                                                                                  \n"," dropout_7 (Dropout)         (None, 86528)                0         ['flatten_7[0][0]']           \n","                                                                                                  \n"," dense_35 (Dense)            (None, 256)                  2215142   ['dropout_7[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_36 (Dense)            (None, 256)                  2215142   ['dropout_7[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_37 (Dense)            (None, 128)                  32896     ['dense_35[0][0]']            \n","                                                                                                  \n"," dense_38 (Dense)            (None, 128)                  32896     ['dense_36[0][0]']            \n","                                                                                                  \n"," concatenate_7 (Concatenate  (None, 256)                  0         ['dense_37[0][0]',            \n"," )                                                                   'dense_38[0][0]']            \n","                                                                                                  \n"," input_16 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," dense_39 (Dense)            (None, 1)                    257       ['concatenate_7[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 44462145 (169.61 MB)\n","Trainable params: 44462145 (169.61 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","__________________________________________________________________________________________________\n","Epoch 1/7\n","17/17 [==============================] - 42s 2s/step - loss: 2249516.0000 - mae: 374.8966\n","Epoch 2/7\n","17/17 [==============================] - 39s 2s/step - loss: 137.4797 - mae: 8.1716\n","Epoch 3/7\n","17/17 [==============================] - 39s 2s/step - loss: 15.7940 - mae: 2.9399\n","Epoch 4/7\n","17/17 [==============================] - 39s 2s/step - loss: 2.1689 - mae: 1.1122\n","Epoch 5/7\n","17/17 [==============================] - 39s 2s/step - loss: 1.8441 - mae: 1.0175\n","Epoch 6/7\n","17/17 [==============================] - 38s 2s/step - loss: 1.2503 - mae: 0.8179\n","Epoch 7/7\n","17/17 [==============================] - 39s 2s/step - loss: 1.1236 - mae: 0.8008\n","3/3 [==============================] - 2s 531ms/step\n","Actual: 0.0019, Predicted: 0.0032\n","Actual: -0.2628, Predicted: -1.2935\n","Actual: -0.0121, Predicted: -0.0239\n","Actual: -0.0475, Predicted: 0.6002\n","Actual: 0.0400, Predicted: -0.0171\n","Actual: -0.3291, Predicted: -1.9837\n","Actual: 0.0246, Predicted: -1.0569\n","Actual: -0.1375, Predicted: 0.0691\n","Actual: -0.0015, Predicted: 1.0993\n","Actual: 0.0088, Predicted: 1.7471\n","Actual: 0.0031, Predicted: -0.2638\n","Actual: 0.0690, Predicted: 0.0032\n","Actual: -0.0135, Predicted: 0.2816\n","Actual: -0.0557, Predicted: 1.0507\n","Actual: -0.3777, Predicted: -0.7769\n","Actual: -0.1198, Predicted: -1.9340\n","Actual: 0.4531, Predicted: -0.2485\n","Actual: 0.1205, Predicted: 0.6735\n","Actual: -0.4997, Predicted: -2.6333\n","Actual: 0.0781, Predicted: 0.5227\n","Actual: 0.0065, Predicted: 0.1860\n","Actual: -0.3313, Predicted: -2.5179\n","Actual: 0.0364, Predicted: 0.4141\n","Actual: -0.1880, Predicted: -0.2386\n","Actual: -0.2715, Predicted: -1.5425\n","Actual: 0.0219, Predicted: 0.1310\n","Actual: -0.4755, Predicted: -0.8328\n","Actual: 0.0851, Predicted: -0.8429\n","Actual: -0.3234, Predicted: -1.7475\n","Actual: 0.0873, Predicted: -0.2218\n","Actual: -0.2233, Predicted: -1.8999\n","Actual: -0.5155, Predicted: -2.4997\n","Actual: -0.1799, Predicted: -1.1976\n","Actual: -0.0959, Predicted: -1.6200\n","Actual: -0.0801, Predicted: -0.8087\n","Actual: 0.0096, Predicted: -1.8189\n","Actual: -0.8085, Predicted: -0.5184\n","Actual: 0.0002, Predicted: 0.2309\n","Actual: 0.0754, Predicted: -1.3026\n","Actual: 0.1272, Predicted: -0.0158\n","Actual: 0.2552, Predicted: 0.9575\n","Actual: 0.0003, Predicted: -0.3630\n","Actual: -0.0083, Predicted: 0.8313\n","Actual: -0.0547, Predicted: 0.8261\n","Actual: 0.0425, Predicted: 1.7919\n","Actual: 0.1160, Predicted: 0.4623\n","Actual: -0.5039, Predicted: -0.7921\n","Actual: -0.1913, Predicted: 1.1644\n","Actual: 0.0062, Predicted: 0.1986\n","Actual: -0.0819, Predicted: -1.1303\n","Actual: 0.2101, Predicted: 0.0032\n","Actual: -0.4062, Predicted: -0.5726\n","Actual: 0.1004, Predicted: -0.9003\n","Actual: 0.0521, Predicted: -1.1438\n","Actual: -0.0871, Predicted: -0.5799\n","Actual: 0.2230, Predicted: 0.6307\n","Actual: -0.1244, Predicted: 0.3157\n","Actual: -0.0008, Predicted: -0.4556\n","Actual: 0.2104, Predicted: 0.0032\n","Actual: 0.0491, Predicted: -1.0212\n","Actual: 0.1878, Predicted: -0.3072\n","Actual: 0.2300, Predicted: 0.3740\n","Actual: -0.2954, Predicted: -1.2601\n","Actual: 0.1892, Predicted: 0.1919\n","Actual: 0.1005, Predicted: 0.8521\n","Actual: 0.0000, Predicted: -1.0716\n","Actual: 0.1545, Predicted: -0.8581\n","Actual: -0.0889, Predicted: 1.1495\n","Actual: 0.1395, Predicted: 1.1674\n","Predicted values array: [ 0.00317881 -1.2934552  -0.0239283   0.60024345 -0.01707719 -1.9836866\n"," -1.0569078   0.06912504  1.0992931   1.7471427  -0.26382938  0.00317881\n","  0.28155598  1.0507005  -0.7769147  -1.9339896  -0.24848618  0.67350566\n"," -2.6332824   0.52270705  0.1860312  -2.5178735   0.4141458  -0.23856129\n"," -1.5424682   0.13097559 -0.83280575 -0.8428842  -1.7475368  -0.22183098\n"," -1.8998533  -2.499746   -1.1976024  -1.6200386  -0.8086921  -1.8188587\n"," -0.51835835  0.23093377 -1.3025953  -0.01582159  0.9574703  -0.3630046\n","  0.8313159   0.8260864   1.7919387   0.46231803 -0.7920824   1.1644353\n","  0.19860087 -1.1302644   0.00317881 -0.57259905 -0.90032494 -1.1438133\n"," -0.57993186  0.6307206   0.31572184 -0.45563713  0.00317881 -1.0212113\n"," -0.30717102  0.37396643 -1.2601119   0.19186674  0.8520669  -1.0716468\n"," -0.8581439   1.1494869   1.167405  ]\n","Test MAE: 0.7742510659673282\n","Test MSE: 0.9443362271034577\n","Test RMSE: 0.9717696368499366\n"]}]},{"cell_type":"code","source":["predicted_array1.size"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jPXdA9S4B48C","executionInfo":{"status":"ok","timestamp":1708106303054,"user_tz":-360,"elapsed":14,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"168bb23a-99d1-4c44-fba5-f1adbe3f4bfc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["69"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# Convert the predicted values to a NumPy array\n","predicted_array1 = np.array([pred[0] for pred in y_pred_binary])\n","print(\"Predicted values array:\", predicted_array1)\n","\n","# Calculate metrics\n","mae_binary = mean_absolute_error(y_test, y_pred_binary)\n","mse_binary = mean_squared_error(y_test, y_pred_binary)\n","rmse_binary = np.sqrt(mse_binary)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae_binary)\n","print(\"Test MSE:\", mse_binary)\n","print(\"Test RMSE:\", rmse_binary)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aZiVrl8onDCw","executionInfo":{"status":"ok","timestamp":1708106313214,"user_tz":-360,"elapsed":652,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"d3010a64-d2f2-4b91-eba0-2fa19b216994"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted values array: [ 0.00317881 -1.2934552  -0.0239283   0.60024345 -0.01707719 -1.9836866\n"," -1.0569078   0.06912504  1.0992931   1.7471427  -0.26382938  0.00317881\n","  0.28155598  1.0507005  -0.7769147  -1.9339896  -0.24848618  0.67350566\n"," -2.6332824   0.52270705  0.1860312  -2.5178735   0.4141458  -0.23856129\n"," -1.5424682   0.13097559 -0.83280575 -0.8428842  -1.7475368  -0.22183098\n"," -1.8998533  -2.499746   -1.1976024  -1.6200386  -0.8086921  -1.8188587\n"," -0.51835835  0.23093377 -1.3025953  -0.01582159  0.9574703  -0.3630046\n","  0.8313159   0.8260864   1.7919387   0.46231803 -0.7920824   1.1644353\n","  0.19860087 -1.1302644   0.00317881 -0.57259905 -0.90032494 -1.1438133\n"," -0.57993186  0.6307206   0.31572184 -0.45563713  0.00317881 -1.0212113\n"," -0.30717102  0.37396643 -1.2601119   0.19186674  0.8520669  -1.0716468\n"," -0.8581439   1.1494869   1.167405  ]\n","Test MAE: 0.7742510659673282\n","Test MSE: 0.9443362271034577\n","Test RMSE: 0.9717696368499366\n"]}]},{"cell_type":"code","source":["predicted_array1.size"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PaFUoDlX9-R0","executionInfo":{"status":"ok","timestamp":1708105714885,"user_tz":-360,"elapsed":656,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"e0e743d1-60a9-43ed-9c26-bb795c6c13c6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["272"]},"metadata":{},"execution_count":68}]},{"cell_type":"markdown","source":["Siamese model1 (2000-2005)\n","batch size 16 epoch 7\n","Test MAE: 0.7742510659673282\n","Test MSE: 0.9443362271034577\n","Test RMSE: 0.9717696368499366"],"metadata":{"id":"-4ainGoFnJdk"}},{"cell_type":"markdown","source":["siamese model 2. test data er predictions stored in predicted_array2"],"metadata":{"id":"QiLqfOeFnraM"}},{"cell_type":"markdown","source":["Siamese model 2 batch size 16 epoch 7\n","Test MAE: 0.5294998926296566\n","Test MSE: 0.4218144530876655\n","Test RMSE: 0.6494724421310465"],"metadata":{"id":"40Jk3pHariur"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np  # Add this import statement\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import numpy as np\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","from keras.layers import Input, concatenate, Flatten, Dense, Dropout, Conv2D, MaxPooling2D\n","from keras.models import Model\n","\n","# Load the CSV file\n","#csv_path = '/content/drive/MyDrive/CSV Files//DATASET SUPREMACY.csv'\n","df = df_gvi_diff2_train\n","\n","width = 224\n","height = 224\n","channels = 3\n","input_shape = (height, width, channels)\n","\n","# Create empty lists to store data\n","Image1 = []  # List to store images from Path1\n","Image2 = []  # List to store images from Path2\n","y = []       # List to store GVI differences\n","\n","# Iterate through rows and load images\n","for index, row in df.iterrows():\n","    image_path1 = row['Path1']\n","    image_path2 = row['Path2']\n","\n","\n","\n","    # Open images using PIL and convert to RGB format\n","    img1 = Image.open(image_path1).convert('RGB').resize((width, height))\n","    img2 = Image.open(image_path2).convert('RGB').resize((width, height))\n","\n","    # Organize images based on iteration\n","    #if index % 4 == 0:\n","     #Image1.append(np.array(img1))\n","     #Image2.append(np.array(img2))\n","     #y.append(row['GVI_diff'])\n","    #elif index % 4 == 1:\n","        #Image2.append(np.array(img))\n","    #elif index % 4 == 2:\n","        #Image3.append(np.array(img))\n","    #if index % 4 == 2:\n","    Image1.append(np.array(img1))\n","    Image2.append(np.array(img2))\n","    y.append(row['GVI_diff'])\n","\n","\n","\n","\n","# Convert lists to NumPy arrays\n","Image1 = np.array(Image1)\n","Image2 = np.array(Image2)\n","y = np.array(y)\n","# Print the shape of input images\n","print(\"Shape of Image1:\", Image1.shape)\n","print(\"Shape of Image2:\", Image2.shape)\n","print(\"Shape of labels (y):\", y.shape)\n","\n","\n","\n","from keras.layers import Input, concatenate, Flatten, Dense, Dropout, Conv2D, MaxPooling2D\n","from keras.models import Model\n","\n","# Assuming input image size of 224x224 pixels and 3 channels for RGB images\n","df2 = df_gvi_diff2_test\n","\n","width = 224\n","height = 224\n","channels = 3\n","input_shape = (height, width, channels)\n","\n","# Create empty lists to store data\n","X1_test = []  # List to store images from Path1\n","X2_test = []  # List to store images from Path2\n","y_test = []       # List to store GVI differences\n","\n","# Iterate through rows and load images\n","for index, row in df2.iterrows():\n","    image_path1 = row['Path1']\n","    image_path2 = row['Path2']\n","\n","\n","\n","    # Open images using PIL and convert to RGB format\n","    img1 = Image.open(image_path1).convert('RGB').resize((width, height))\n","    img2 = Image.open(image_path2).convert('RGB').resize((width, height))\n","\n","    # Organize images based on iteration\n","    #if index % 4 == 0:\n","     #Image1.append(np.array(img1))\n","     #Image2.append(np.array(img2))\n","     #y.append(row['GVI_diff'])\n","    #elif index % 4 == 1:\n","        #Image2.append(np.array(img))\n","    #elif index % 4 == 2:\n","        #Image3.append(np.array(img))\n","    #if index % 4 == 2:\n","    X1_test.append(np.array(img1))\n","    X2_test.append(np.array(img2))\n","    y_test.append(row['GVI_diff'])\n","\n","\n","\n","\n","# Convert lists to NumPy arrays\n","X1_test = np.array(X1_test)\n","X2_test = np.array(X2_test)\n","y_test = np.array(y_test)\n","\n","# Build the Siamese model for regression with a simple CNN and RGB image input\n","def build_siamese_model(input_shape):\n","    input_a = Input(shape=input_shape)\n","    input_b = Input(shape=input_shape)\n","\n","    # Shared convolutional layers\n","    conv1 = Conv2D(32, (3, 3), activation='relu')(input_a)\n","    maxpool1 = MaxPooling2D((2, 2))(conv1)\n","    conv2 = Conv2D(64, (3, 3), activation='relu')(maxpool1)\n","    maxpool2 = MaxPooling2D((2, 2))(conv2)\n","    conv3 = Conv2D(128, (3, 3), activation='relu')(maxpool2)\n","    maxpool3 = MaxPooling2D((2, 2))(conv3)\n","\n","    # Flatten and add dropout for regularization\n","    flattened_features = Flatten()(maxpool3)\n","    dropout_1 = Dropout(0.5)(flattened_features)\n","\n","    # Separate branches for each input image\n","    fc_a = Dense(256, activation='relu')(dropout_1)\n","    fc_b = Dense(256, activation='relu')(dropout_1)\n","\n","    # Additional fully connected layers for regression\n","    fc2_a = Dense(128, activation='relu')(fc_a)\n","    fc2_b = Dense(128, activation='relu')(fc_b)\n","\n","    # Output layer for regression\n","    output_layer = Dense(1, activation='linear')(concatenate([fc2_a, fc2_b]))\n","\n","    model = Model(inputs=[input_a, input_b], outputs=output_layer)\n","\n","    return model\n","\n","# Create an instance of the Siamese model with 3-channel RGB input\n","siamese_model_rgb = build_siamese_model(input_shape)\n","\n","# Compile the model\n","siamese_model_rgb.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n","\n","# Display the model summary\n","siamese_model_rgb.summary()\n","\n","# Display the model summary\n","siamese_model_rgb.summary()\n","# Split data into training and validation sets\n","# (Make sure to load and preprocess binary images and labels correctly)\n","#X1_train, X1_test, X2_train, X2_test, y_train, y_val = train_test_split(Image1, Image2, y, test_size=0.2, random_state=42)\n","#print(\"Shape of X1_train:\", X1_train.shape)\n","#print(\"Shape of X2_train:\", X2_train.shape)\n","#print(\"Shape of y_train:\", y_train.shape)\n","\n","# Assuming X1_train, X2_train, X1_test, X2_test are loaded and preprocessed grayscale images with shape (224, 224, 1)\n","\n","# Train the Siamese model\n","history_binary = siamese_model_rgb.fit(\n","    x=[Image1, Image2],\n","    y=y,\n","    batch_size=16,\n","    epochs=7,\n","    validation_data=([X1_test, X2_test], y_test)\n",")\n","\n","# Evaluate the model on the test set\n","y_pred_binary = siamese_model_rgb.predict([X1_test, X2_test])\n","\n","# Print the actual and predicted values\n","for actual, predicted in zip(y_test, y_pred_binary):\n","    print(\"Actual: {:.4f}, Predicted: {:.4f}\".format(actual, predicted[0]))\n","\n","# Convert the predicted values to a NumPy array\n","predicted_array2 = np.array([pred[0] for pred in y_pred_binary])\n","print(\"Predicted values array:\", predicted_array2)\n","\n","# Calculate metrics\n","mae_binary = mean_absolute_error(y_test, y_pred_binary)\n","mse_binary = mean_squared_error(y_test, y_pred_binary)\n","rmse_binary = np.sqrt(mse_binary)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae_binary)\n","print(\"Test MSE:\", mse_binary)\n","print(\"Test RMSE:\", rmse_binary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yn-WFSyvng_e","executionInfo":{"status":"ok","timestamp":1708106676673,"user_tz":-360,"elapsed":332443,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"cf3159e0-c60d-4113-8777-c01f7cc28eb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of Image1: (272, 224, 224, 3)\n","Shape of Image2: (272, 224, 224, 3)\n","Shape of labels (y): (272,)\n","Model: \"model_8\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_17 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," conv2d_24 (Conv2D)          (None, 222, 222, 32)         896       ['input_17[0][0]']            \n","                                                                                                  \n"," max_pooling2d_24 (MaxPooli  (None, 111, 111, 32)         0         ['conv2d_24[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_25 (Conv2D)          (None, 109, 109, 64)         18496     ['max_pooling2d_24[0][0]']    \n","                                                                                                  \n"," max_pooling2d_25 (MaxPooli  (None, 54, 54, 64)           0         ['conv2d_25[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_26 (Conv2D)          (None, 52, 52, 128)          73856     ['max_pooling2d_25[0][0]']    \n","                                                                                                  \n"," max_pooling2d_26 (MaxPooli  (None, 26, 26, 128)          0         ['conv2d_26[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," flatten_8 (Flatten)         (None, 86528)                0         ['max_pooling2d_26[0][0]']    \n","                                                                                                  \n"," dropout_8 (Dropout)         (None, 86528)                0         ['flatten_8[0][0]']           \n","                                                                                                  \n"," dense_40 (Dense)            (None, 256)                  2215142   ['dropout_8[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_41 (Dense)            (None, 256)                  2215142   ['dropout_8[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_42 (Dense)            (None, 128)                  32896     ['dense_40[0][0]']            \n","                                                                                                  \n"," dense_43 (Dense)            (None, 128)                  32896     ['dense_41[0][0]']            \n","                                                                                                  \n"," concatenate_8 (Concatenate  (None, 256)                  0         ['dense_42[0][0]',            \n"," )                                                                   'dense_43[0][0]']            \n","                                                                                                  \n"," input_18 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," dense_44 (Dense)            (None, 1)                    257       ['concatenate_8[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 44462145 (169.61 MB)\n","Trainable params: 44462145 (169.61 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","__________________________________________________________________________________________________\n","Model: \"model_8\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_17 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," conv2d_24 (Conv2D)          (None, 222, 222, 32)         896       ['input_17[0][0]']            \n","                                                                                                  \n"," max_pooling2d_24 (MaxPooli  (None, 111, 111, 32)         0         ['conv2d_24[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_25 (Conv2D)          (None, 109, 109, 64)         18496     ['max_pooling2d_24[0][0]']    \n","                                                                                                  \n"," max_pooling2d_25 (MaxPooli  (None, 54, 54, 64)           0         ['conv2d_25[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_26 (Conv2D)          (None, 52, 52, 128)          73856     ['max_pooling2d_25[0][0]']    \n","                                                                                                  \n"," max_pooling2d_26 (MaxPooli  (None, 26, 26, 128)          0         ['conv2d_26[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," flatten_8 (Flatten)         (None, 86528)                0         ['max_pooling2d_26[0][0]']    \n","                                                                                                  \n"," dropout_8 (Dropout)         (None, 86528)                0         ['flatten_8[0][0]']           \n","                                                                                                  \n"," dense_40 (Dense)            (None, 256)                  2215142   ['dropout_8[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_41 (Dense)            (None, 256)                  2215142   ['dropout_8[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_42 (Dense)            (None, 128)                  32896     ['dense_40[0][0]']            \n","                                                                                                  \n"," dense_43 (Dense)            (None, 128)                  32896     ['dense_41[0][0]']            \n","                                                                                                  \n"," concatenate_8 (Concatenate  (None, 256)                  0         ['dense_42[0][0]',            \n"," )                                                                   'dense_43[0][0]']            \n","                                                                                                  \n"," input_18 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," dense_44 (Dense)            (None, 1)                    257       ['concatenate_8[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 44462145 (169.61 MB)\n","Trainable params: 44462145 (169.61 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","__________________________________________________________________________________________________\n","Epoch 1/7\n","17/17 [==============================] - 46s 3s/step - loss: 493518.4062 - mae: 190.7043 - val_loss: 144.0647 - val_mae: 10.9109\n","Epoch 2/7\n","17/17 [==============================] - 41s 2s/step - loss: 111.5007 - mae: 9.3271 - val_loss: 67.9224 - val_mae: 7.5467\n","Epoch 3/7\n","17/17 [==============================] - 40s 2s/step - loss: 27.6026 - mae: 4.3166 - val_loss: 1.1493 - val_mae: 0.8475\n","Epoch 4/7\n","17/17 [==============================] - 40s 2s/step - loss: 2.0447 - mae: 1.0942 - val_loss: 0.8112 - val_mae: 0.7282\n","Epoch 5/7\n","17/17 [==============================] - 40s 2s/step - loss: 1.0451 - mae: 0.7561 - val_loss: 0.7281 - val_mae: 0.7007\n","Epoch 6/7\n","17/17 [==============================] - 40s 2s/step - loss: 0.8152 - mae: 0.7008 - val_loss: 0.5680 - val_mae: 0.6286\n","Epoch 7/7\n","17/17 [==============================] - 42s 3s/step - loss: 0.5582 - mae: 0.5669 - val_loss: 0.4218 - val_mae: 0.5295\n","3/3 [==============================] - 2s 501ms/step\n","Actual: 0.0005, Predicted: 0.0094\n","Actual: 0.4205, Predicted: -0.2283\n","Actual: 0.1016, Predicted: 0.5698\n","Actual: 0.0697, Predicted: 1.1309\n","Actual: 0.5307, Predicted: 0.2272\n","Actual: 0.5491, Predicted: -0.4535\n","Actual: -0.0848, Predicted: -0.3518\n","Actual: 0.0262, Predicted: 0.9376\n","Actual: 0.1273, Predicted: 0.6179\n","Actual: 0.2816, Predicted: 0.4447\n","Actual: 0.2926, Predicted: 0.8877\n","Actual: 0.0377, Predicted: -0.9934\n","Actual: 0.0001, Predicted: 0.0141\n","Actual: 0.2313, Predicted: 0.0141\n","Actual: -0.0538, Predicted: -0.6373\n","Actual: 0.0189, Predicted: 2.1427\n","Actual: -0.5995, Predicted: -1.0597\n","Actual: -0.1026, Predicted: -1.0274\n","Actual: 0.2804, Predicted: 0.4599\n","Actual: 0.5620, Predicted: 0.7254\n","Actual: 0.1038, Predicted: 0.2468\n","Actual: 0.0726, Predicted: -0.3158\n","Actual: 0.1696, Predicted: 0.7188\n","Actual: 0.0033, Predicted: -0.2823\n","Actual: 0.2419, Predicted: 0.9999\n","Actual: -0.0802, Predicted: -0.4583\n","Actual: 0.0051, Predicted: 0.0093\n","Actual: -0.2597, Predicted: -0.1658\n","Actual: 0.2358, Predicted: 0.3631\n","Actual: -0.0337, Predicted: -0.7923\n","Actual: 0.2473, Predicted: 0.4107\n","Actual: 0.1283, Predicted: 0.5695\n","Actual: 0.0020, Predicted: 0.7422\n","Actual: -0.0446, Predicted: 0.6632\n","Actual: 0.0578, Predicted: 0.6491\n","Actual: 0.1157, Predicted: -0.6439\n","Actual: 0.2068, Predicted: 0.0480\n","Actual: 0.0002, Predicted: 0.1501\n","Actual: -0.0701, Predicted: -0.0367\n","Actual: -0.0952, Predicted: -0.9207\n","Actual: 0.0600, Predicted: -0.4483\n","Actual: 0.2399, Predicted: 0.4604\n","Actual: 0.1082, Predicted: 0.7469\n","Actual: 0.2289, Predicted: 0.0141\n","Actual: 0.3227, Predicted: -0.2745\n","Actual: 0.0251, Predicted: 0.5022\n","Actual: 0.0303, Predicted: 0.2973\n","Actual: 0.7841, Predicted: 0.6037\n","Actual: 0.0912, Predicted: 1.2204\n","Actual: -0.2621, Predicted: -0.6275\n","Actual: -0.1940, Predicted: -0.5185\n","Actual: 0.0931, Predicted: -0.1577\n","Actual: -0.0674, Predicted: -0.7884\n","Actual: -0.8385, Predicted: -1.1923\n","Actual: -0.0077, Predicted: 0.7680\n","Actual: -0.2244, Predicted: 0.0959\n","Actual: 0.0203, Predicted: 0.9875\n","Actual: 0.0639, Predicted: 0.6961\n","Actual: -0.1933, Predicted: -0.5488\n","Actual: 0.0631, Predicted: -0.9517\n","Actual: -0.2102, Predicted: 1.0503\n","Actual: -0.2308, Predicted: -0.3438\n","Actual: 0.0012, Predicted: 0.5639\n","Actual: -0.2103, Predicted: 0.5954\n","Actual: -0.1222, Predicted: -1.0388\n","Actual: 0.1743, Predicted: 1.4264\n","Actual: -0.1608, Predicted: -0.4536\n","Actual: 0.4865, Predicted: -0.2188\n","Actual: -0.0352, Predicted: -0.6724\n","Predicted values array: [ 0.00941378 -0.22834426  0.56978244  1.1308854   0.2271902  -0.45349413\n"," -0.35182267  0.9375741   0.61790746  0.44465083  0.8876793  -0.9934409\n","  0.01408863  0.01408863 -0.6372836   2.1427133  -1.0597438  -1.0273573\n","  0.4598927   0.72535914  0.24679404 -0.3158267   0.7188265  -0.28233892\n","  0.99994105 -0.45830375  0.00932354 -0.16576213  0.36309475 -0.79229337\n","  0.41072577  0.56947535  0.7421996   0.66324633  0.649085   -0.64389855\n","  0.04800433  0.15009087 -0.03669292 -0.92070466 -0.44829947  0.4604364\n","  0.7469428   0.01408863 -0.27452928  0.5021698   0.2972725   0.60373896\n","  1.2203777  -0.62750083 -0.51851493 -0.15767604 -0.78840524 -1.1922731\n","  0.7679855   0.09586447  0.9874999   0.6960556  -0.548816   -0.9516986\n","  1.050257   -0.3438285   0.5638841   0.5954084  -1.0387638   1.4263561\n"," -0.45356065 -0.21876842 -0.6723698 ]\n","Test MAE: 0.5294998926296566\n","Test MSE: 0.4218144530876655\n","Test RMSE: 0.6494724421310465\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np  # Add this import statement\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import numpy as np\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","from keras.layers import Input, concatenate, Flatten, Dense, Dropout, Conv2D, MaxPooling2D\n","from keras.models import Model\n","\n","# Load the CSV file\n","#csv_path = '/content/drive/MyDrive/CSV Files//DATASET SUPREMACY.csv'\n","df = df_gvi_diff3_train\n","\n","width = 224\n","height = 224\n","channels = 3\n","input_shape = (height, width, channels)\n","\n","# Create empty lists to store data\n","Image1 = []  # List to store images from Path1\n","Image2 = []  # List to store images from Path2\n","y = []       # List to store GVI differences\n","\n","# Iterate through rows and load images\n","for index, row in df.iterrows():\n","    image_path1 = row['Path1']\n","    image_path2 = row['Path2']\n","\n","\n","\n","    # Open images using PIL and convert to RGB format\n","    img1 = Image.open(image_path1).convert('RGB').resize((width, height))\n","    img2 = Image.open(image_path2).convert('RGB').resize((width, height))\n","\n","    # Organize images based on iteration\n","    #if index % 4 == 0:\n","     #Image1.append(np.array(img1))\n","     #Image2.append(np.array(img2))\n","     #y.append(row['GVI_diff'])\n","    #elif index % 4 == 1:\n","        #Image2.append(np.array(img))\n","    #elif index % 4 == 2:\n","        #Image3.append(np.array(img))\n","    #if index % 4 == 2:\n","    Image1.append(np.array(img1))\n","    Image2.append(np.array(img2))\n","    y.append(row['GVI_diff'])\n","\n","\n","\n","\n","# Convert lists to NumPy arrays\n","Image1 = np.array(Image1)\n","Image2 = np.array(Image2)\n","y = np.array(y)\n","# Print the shape of input images\n","print(\"Shape of Image1:\", Image1.shape)\n","print(\"Shape of Image2:\", Image2.shape)\n","print(\"Shape of labels (y):\", y.shape)\n","\n","\n","\n","from keras.layers import Input, concatenate, Flatten, Dense, Dropout, Conv2D, MaxPooling2D\n","from keras.models import Model\n","\n","# Assuming input image size of 224x224 pixels and 3 channels for RGB images\n","df2 = df_gvi_diff3_test\n","\n","width = 224\n","height = 224\n","channels = 3\n","input_shape = (height, width, channels)\n","\n","# Create empty lists to store data\n","X1_test = []  # List to store images from Path1\n","X2_test = []  # List to store images from Path2\n","y_test = []       # List to store GVI differences\n","\n","# Iterate through rows and load images\n","for index, row in df2.iterrows():\n","    image_path1 = row['Path1']\n","    image_path2 = row['Path2']\n","\n","\n","\n","    # Open images using PIL and convert to RGB format\n","    img1 = Image.open(image_path1).convert('RGB').resize((width, height))\n","    img2 = Image.open(image_path2).convert('RGB').resize((width, height))\n","\n","    # Organize images based on iteration\n","    #if index % 4 == 0:\n","     #Image1.append(np.array(img1))\n","     #Image2.append(np.array(img2))\n","     #y.append(row['GVI_diff'])\n","    #elif index % 4 == 1:\n","        #Image2.append(np.array(img))\n","    #elif index % 4 == 2:\n","        #Image3.append(np.array(img))\n","    #if index % 4 == 2:\n","    X1_test.append(np.array(img1))\n","    X2_test.append(np.array(img2))\n","    y_test.append(row['GVI_diff'])\n","\n","\n","\n","\n","# Convert lists to NumPy arrays\n","X1_test = np.array(X1_test)\n","X2_test = np.array(X2_test)\n","y_test = np.array(y_test)\n","\n","# Build the Siamese model for regression with a simple CNN and RGB image input\n","def build_siamese_model(input_shape):\n","    input_a = Input(shape=input_shape)\n","    input_b = Input(shape=input_shape)\n","\n","    # Shared convolutional layers\n","    conv1 = Conv2D(32, (3, 3), activation='relu')(input_a)\n","    maxpool1 = MaxPooling2D((2, 2))(conv1)\n","    conv2 = Conv2D(64, (3, 3), activation='relu')(maxpool1)\n","    maxpool2 = MaxPooling2D((2, 2))(conv2)\n","    conv3 = Conv2D(128, (3, 3), activation='relu')(maxpool2)\n","    maxpool3 = MaxPooling2D((2, 2))(conv3)\n","\n","    # Flatten and add dropout for regularization\n","    flattened_features = Flatten()(maxpool3)\n","    dropout_1 = Dropout(0.5)(flattened_features)\n","\n","    # Separate branches for each input image\n","    fc_a = Dense(256, activation='relu')(dropout_1)\n","    fc_b = Dense(256, activation='relu')(dropout_1)\n","\n","    # Additional fully connected layers for regression\n","    fc2_a = Dense(128, activation='relu')(fc_a)\n","    fc2_b = Dense(128, activation='relu')(fc_b)\n","\n","    # Output layer for regression\n","    output_layer = Dense(1, activation='linear')(concatenate([fc2_a, fc2_b]))\n","\n","    model = Model(inputs=[input_a, input_b], outputs=output_layer)\n","\n","    return model\n","\n","# Create an instance of the Siamese model with 3-channel RGB input\n","siamese_model_rgb = build_siamese_model(input_shape)\n","\n","# Compile the model\n","siamese_model_rgb.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n","\n","# Display the model summary\n","siamese_model_rgb.summary()\n","\n","# Display the model summary\n","siamese_model_rgb.summary()\n","# Split data into training and validation sets\n","# (Make sure to load and preprocess binary images and labels correctly)\n","#X1_train, X1_test, X2_train, X2_test, y_train, y_val = train_test_split(Image1, Image2, y, test_size=0.2, random_state=42)\n","#print(\"Shape of X1_train:\", X1_train.shape)\n","#print(\"Shape of X2_train:\", X2_train.shape)\n","#print(\"Shape of y_train:\", y_train.shape)\n","\n","# Assuming X1_train, X2_train, X1_test, X2_test are loaded and preprocessed grayscale images with shape (224, 224, 1)\n","\n","# Train the Siamese model\n","history_binary = siamese_model_rgb.fit(\n","    x=[Image1, Image2],\n","    y=y,\n","    batch_size=16,\n","    epochs=7,\n","    validation_data=([X1_test, X2_test], y_test)\n",")\n","\n","# Evaluate the model on the test set\n","y_pred_binary = siamese_model_rgb.predict([X1_test, X2_test])\n","\n","# Print the actual and predicted values\n","for actual, predicted in zip(y_test, y_pred_binary):\n","    print(\"Actual: {:.4f}, Predicted: {:.4f}\".format(actual, predicted[0]))\n","\n","# Convert the predicted values to a NumPy array\n","predicted_array3 = np.array([pred[0] for pred in y_pred_binary])\n","print(\"Predicted values array:\", predicted_array3)\n","\n","# Calculate metrics\n","mae_binary = mean_absolute_error(y_test, y_pred_binary)\n","mse_binary = mean_squared_error(y_test, y_pred_binary)\n","rmse_binary = np.sqrt(mse_binary)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae_binary)\n","print(\"Test MSE:\", mse_binary)\n","print(\"Test RMSE:\", rmse_binary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KuOQkfHrrsPI","executionInfo":{"status":"ok","timestamp":1708107008665,"user_tz":-360,"elapsed":294338,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"0e161033-9e26-4fee-a7b3-2623b166c7f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of Image1: (272, 224, 224, 3)\n","Shape of Image2: (272, 224, 224, 3)\n","Shape of labels (y): (272,)\n","Model: \"model_9\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_19 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," conv2d_27 (Conv2D)          (None, 222, 222, 32)         896       ['input_19[0][0]']            \n","                                                                                                  \n"," max_pooling2d_27 (MaxPooli  (None, 111, 111, 32)         0         ['conv2d_27[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_28 (Conv2D)          (None, 109, 109, 64)         18496     ['max_pooling2d_27[0][0]']    \n","                                                                                                  \n"," max_pooling2d_28 (MaxPooli  (None, 54, 54, 64)           0         ['conv2d_28[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_29 (Conv2D)          (None, 52, 52, 128)          73856     ['max_pooling2d_28[0][0]']    \n","                                                                                                  \n"," max_pooling2d_29 (MaxPooli  (None, 26, 26, 128)          0         ['conv2d_29[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," flatten_9 (Flatten)         (None, 86528)                0         ['max_pooling2d_29[0][0]']    \n","                                                                                                  \n"," dropout_9 (Dropout)         (None, 86528)                0         ['flatten_9[0][0]']           \n","                                                                                                  \n"," dense_45 (Dense)            (None, 256)                  2215142   ['dropout_9[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_46 (Dense)            (None, 256)                  2215142   ['dropout_9[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_47 (Dense)            (None, 128)                  32896     ['dense_45[0][0]']            \n","                                                                                                  \n"," dense_48 (Dense)            (None, 128)                  32896     ['dense_46[0][0]']            \n","                                                                                                  \n"," concatenate_9 (Concatenate  (None, 256)                  0         ['dense_47[0][0]',            \n"," )                                                                   'dense_48[0][0]']            \n","                                                                                                  \n"," input_20 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," dense_49 (Dense)            (None, 1)                    257       ['concatenate_9[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 44462145 (169.61 MB)\n","Trainable params: 44462145 (169.61 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","__________________________________________________________________________________________________\n","Model: \"model_9\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_19 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," conv2d_27 (Conv2D)          (None, 222, 222, 32)         896       ['input_19[0][0]']            \n","                                                                                                  \n"," max_pooling2d_27 (MaxPooli  (None, 111, 111, 32)         0         ['conv2d_27[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_28 (Conv2D)          (None, 109, 109, 64)         18496     ['max_pooling2d_27[0][0]']    \n","                                                                                                  \n"," max_pooling2d_28 (MaxPooli  (None, 54, 54, 64)           0         ['conv2d_28[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," conv2d_29 (Conv2D)          (None, 52, 52, 128)          73856     ['max_pooling2d_28[0][0]']    \n","                                                                                                  \n"," max_pooling2d_29 (MaxPooli  (None, 26, 26, 128)          0         ['conv2d_29[0][0]']           \n"," ng2D)                                                                                            \n","                                                                                                  \n"," flatten_9 (Flatten)         (None, 86528)                0         ['max_pooling2d_29[0][0]']    \n","                                                                                                  \n"," dropout_9 (Dropout)         (None, 86528)                0         ['flatten_9[0][0]']           \n","                                                                                                  \n"," dense_45 (Dense)            (None, 256)                  2215142   ['dropout_9[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_46 (Dense)            (None, 256)                  2215142   ['dropout_9[0][0]']           \n","                                                          4                                       \n","                                                                                                  \n"," dense_47 (Dense)            (None, 128)                  32896     ['dense_45[0][0]']            \n","                                                                                                  \n"," dense_48 (Dense)            (None, 128)                  32896     ['dense_46[0][0]']            \n","                                                                                                  \n"," concatenate_9 (Concatenate  (None, 256)                  0         ['dense_47[0][0]',            \n"," )                                                                   'dense_48[0][0]']            \n","                                                                                                  \n"," input_20 (InputLayer)       [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," dense_49 (Dense)            (None, 1)                    257       ['concatenate_9[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 44462145 (169.61 MB)\n","Trainable params: 44462145 (169.61 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","__________________________________________________________________________________________________\n","Epoch 1/7\n","17/17 [==============================] - 44s 3s/step - loss: 195772.1250 - mae: 167.1823 - val_loss: 105.2438 - val_mae: 9.3194\n","Epoch 2/7\n","17/17 [==============================] - 40s 2s/step - loss: 18.5791 - mae: 2.7424 - val_loss: 2.5577 - val_mae: 1.4583\n","Epoch 3/7\n","17/17 [==============================] - 40s 2s/step - loss: 2.2070 - mae: 1.1961 - val_loss: 0.1476 - val_mae: 0.2863\n","Epoch 4/7\n","17/17 [==============================] - 41s 2s/step - loss: 0.2818 - mae: 0.4034 - val_loss: 0.2031 - val_mae: 0.3607\n","Epoch 5/7\n","17/17 [==============================] - 41s 2s/step - loss: 0.1507 - mae: 0.3000 - val_loss: 0.1039 - val_mae: 0.2439\n","Epoch 6/7\n","17/17 [==============================] - 40s 2s/step - loss: 0.1030 - mae: 0.2518 - val_loss: 0.1084 - val_mae: 0.2489\n","Epoch 7/7\n","17/17 [==============================] - 41s 2s/step - loss: 0.0821 - mae: 0.2156 - val_loss: 0.0907 - val_mae: 0.2259\n","3/3 [==============================] - 2s 520ms/step\n","Actual: 0.1125, Predicted: 0.0267\n","Actual: -0.4575, Predicted: 0.2338\n","Actual: -0.1441, Predicted: 0.0680\n","Actual: -0.0681, Predicted: 0.0717\n","Actual: -0.4369, Predicted: 0.0191\n","Actual: -0.6415, Predicted: -0.0257\n","Actual: 0.0136, Predicted: -0.2404\n","Actual: 0.0160, Predicted: -0.0249\n","Actual: 0.0177, Predicted: -0.0081\n","Actual: -0.1119, Predicted: 0.0369\n","Actual: -0.3134, Predicted: -0.0485\n","Actual: -0.0373, Predicted: 0.2383\n","Actual: 0.0012, Predicted: -0.0088\n","Actual: -0.1529, Predicted: 0.4008\n","Actual: 0.2230, Predicted: -0.4328\n","Actual: -0.0097, Predicted: 0.1129\n","Actual: 0.0855, Predicted: -0.4337\n","Actual: -0.0309, Predicted: -0.2794\n","Actual: -0.2170, Predicted: 0.3034\n","Actual: -0.6341, Predicted: 0.0652\n","Actual: -0.1125, Predicted: 0.1453\n","Actual: 0.1242, Predicted: 0.1590\n","Actual: -0.1807, Predicted: -0.0183\n","Actual: 0.0528, Predicted: -0.5173\n","Actual: -0.2853, Predicted: -0.0678\n","Actual: 0.0147, Predicted: -0.0305\n","Actual: -0.0122, Predicted: 0.0260\n","Actual: -0.1139, Predicted: 0.0780\n","Actual: 0.1390, Predicted: 0.0206\n","Actual: 0.1717, Predicted: 0.0673\n","Actual: -0.0493, Predicted: 0.1228\n","Actual: 0.2099, Predicted: 0.0393\n","Actual: 0.1682, Predicted: 0.2014\n","Actual: -0.0038, Predicted: -0.0806\n","Actual: 0.0540, Predicted: -0.0884\n","Actual: -0.4656, Predicted: 0.0185\n","Actual: -0.2051, Predicted: -0.1564\n","Actual: 0.0682, Predicted: 0.0697\n","Actual: 0.0689, Predicted: 0.1900\n","Actual: -0.0987, Predicted: 0.0552\n","Actual: -0.0821, Predicted: -0.0635\n","Actual: -0.2355, Predicted: 0.1133\n","Actual: -0.0530, Predicted: 0.0342\n","Actual: -0.1505, Predicted: -0.1482\n","Actual: -0.1597, Predicted: 0.1228\n","Actual: -0.0148, Predicted: 0.1980\n","Actual: 0.2133, Predicted: -0.0103\n","Actual: -0.6999, Predicted: -0.1823\n","Actual: 0.2670, Predicted: 0.0946\n","Actual: -0.0084, Predicted: -0.1836\n","Actual: 0.2565, Predicted: -0.5107\n","Actual: 0.0206, Predicted: 0.2951\n","Actual: -0.0974, Predicted: 0.1076\n","Actual: 0.0036, Predicted: -0.1632\n","Actual: 0.0343, Predicted: -0.0222\n","Actual: 0.0702, Predicted: -0.0040\n","Actual: -0.0135, Predicted: 0.2099\n","Actual: 0.1095, Predicted: 0.1148\n","Actual: 0.2575, Predicted: 0.2061\n","Actual: -0.2258, Predicted: -0.1277\n","Actual: -0.0024, Predicted: -0.0093\n","Actual: 0.0753, Predicted: -0.1289\n","Actual: 0.0381, Predicted: 0.1165\n","Actual: -0.0023, Predicted: 0.0203\n","Actual: -0.0041, Predicted: 0.1041\n","Actual: -0.2200, Predicted: 0.1480\n","Actual: 0.0715, Predicted: -0.0892\n","Actual: -0.5387, Predicted: -0.0493\n","Actual: -0.1196, Predicted: 0.3827\n","Predicted values array: [ 0.02674912  0.23378675  0.06795762  0.0717244   0.01911645 -0.02571059\n"," -0.24035574 -0.02493192 -0.00812687  0.03693916 -0.04850699  0.2383139\n"," -0.00876319  0.40080166 -0.4328456   0.11292528 -0.43365312 -0.27935815\n","  0.30337214  0.06524696  0.1452782   0.15898035 -0.01825215 -0.5172763\n"," -0.06784917 -0.03051711  0.0260024   0.07797073  0.02059959  0.06730936\n","  0.12276839  0.03934907  0.20136856 -0.08059599 -0.08844377  0.01851724\n"," -0.15639319  0.06972621  0.1900482   0.05520271 -0.06353642  0.11325799\n","  0.0342214  -0.14815141  0.12277649  0.19801663 -0.01026441 -0.1823207\n","  0.09459637 -0.18357326 -0.5107465   0.29512262  0.10761188 -0.1632457\n"," -0.02224137 -0.00397457  0.20989917  0.11483584  0.20608328 -0.12772341\n"," -0.00933458 -0.12891378  0.1165347   0.02031301  0.10408019  0.14802991\n"," -0.08917786 -0.04931847  0.3826524 ]\n","Test MAE: 0.2259326172181292\n","Test MSE: 0.09069819184154815\n","Test RMSE: 0.30116140496675226\n"]}]},{"cell_type":"markdown","source":["siamese model 3 batch size 16 epoch 7\n","Test MAE: 0.2259326172181292\n","Test MSE: 0.09069819184154815\n","Test RMSE: 0.30116140496675226"],"metadata":{"id":"jOpn-8ApvPbC"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# ... (previous code)\n","\n","# Convert predicted_array to a DataFrame\n","predicted_df1 = pd.DataFrame({\"2005-2000\": predicted_array1})\n","predicted_df2 = pd.DataFrame({\"2010-2005\": predicted_array2})\n","predicted_df3 = pd.DataFrame({\"2015-2010\": predicted_array3})\n","# Save the DataFrame to a CSV file\n","predicted_df1.to_csv('/content/drive/MyDrive/Maliha Prediction/Siamese Prediction 2005-2000.csv', index=False)\n","predicted_df2.to_csv('/content/drive/MyDrive/Maliha Prediction/Siamese Prediction 2010-2005.csv', index=False)\n","predicted_df3.to_csv('/content/drive/MyDrive/Maliha Prediction/Siamese Prediction 2015-2010.csv', index=False)\n","\n"],"metadata":{"id":"nRs2EeFltkH1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predicted_df1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"J4U8fMXh9UIP","executionInfo":{"status":"ok","timestamp":1708107072356,"user_tz":-360,"elapsed":673,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"0995218d-7d30-48fe-ca2e-b4ff72a9093b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    2005-2000\n","0    0.003179\n","1   -1.293455\n","2   -0.023928\n","3    0.600243\n","4   -0.017077\n","..        ...\n","64   0.852067\n","65  -1.071647\n","66  -0.858144\n","67   1.149487\n","68   1.167405\n","\n","[69 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-eec04c16-bb22-4d06-9bf2-54dd354678b8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>2005-2000</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.003179</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-1.293455</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.023928</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.600243</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.017077</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>0.852067</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>-1.071647</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>-0.858144</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>1.149487</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>1.167405</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>69 rows Ã— 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eec04c16-bb22-4d06-9bf2-54dd354678b8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eec04c16-bb22-4d06-9bf2-54dd354678b8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eec04c16-bb22-4d06-9bf2-54dd354678b8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1c6388fd-3af2-47d4-8690-5dc892b387f6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c6388fd-3af2-47d4-8690-5dc892b387f6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1c6388fd-3af2-47d4-8690-5dc892b387f6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_68147012-485e-42d6-a22a-b4555f540ad7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('predicted_df1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_68147012-485e-42d6-a22a-b4555f540ad7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('predicted_df1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"predicted_df1","summary":"{\n  \"name\": \"predicted_df1\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"2005-2000\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"samples\": [\n          0.3157218396663666,\n          -1.071646809577942,\n          0.003178810002282262\n        ],\n        \"num_unique_values\": 66,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["df_gvi_diff4.to_csv('/content/drive/MyDrive/Maliha Prediction/Actual GVI Difference 2020-2015 (test data).csv')"],"metadata":{"id":"ImRZ31vkvTqq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["combined_df = pd.concat([predicted_df1, predicted_df2, predicted_df3], axis=1)\n","\n","# Save the combined DataFrame to a CSV file\n","#"],"metadata":{"id":"gSwQjGIWv7Ui"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["combined_df.to_csv('/content/drive/MyDrive/Maliha Prediction/Test Data Siamese Prediction (all).csv', index=False)"],"metadata":{"id":"ZaXy4eqBwB3x"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["1. load LSTM model\n","2. load dataset (Siamese prediction ALL)\n","3. predict data with model\n","4. store the predictions\n","5. store actual value, predicted value\n","6. calculate mae,mse,rmse\n"],"metadata":{"id":"yJUwtn3NxmvZ"}},{"cell_type":"markdown","metadata":{"id":"NQB5q-MYK7yI"},"source":[]},{"cell_type":"code","source":["from keras.models import load_model\n","lstm_model = load_model('/content/drive/MyDrive/Maliha Prediction/LSTM_GVI_diff.h5')"],"metadata":{"id":"A04a1mRtxWYr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data =pd.read_csv('/content/drive/MyDrive/Maliha Prediction/Test Data Siamese Prediction (all).csv')"],"metadata":{"id":"VHzw0uffxfwU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"0OW76XQax8A3","executionInfo":{"status":"ok","timestamp":1708107103073,"user_tz":-360,"elapsed":834,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"21057a7b-41a2-494c-e0f4-bc3ac0eee038"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    2005-2000  2010-2005  2015-2010\n","0    0.003179   0.009414   0.026749\n","1   -1.293455  -0.228344   0.233787\n","2   -0.023928   0.569782   0.067958\n","3    0.600243   1.130885   0.071724\n","4   -0.017077   0.227190   0.019116\n","..        ...        ...        ...\n","64   0.852067  -1.038764   0.104080\n","65  -1.071647   1.426356   0.148030\n","66  -0.858144  -0.453561  -0.089178\n","67   1.149487  -0.218768  -0.049318\n","68   1.167405  -0.672370   0.382652\n","\n","[69 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-9ecea51d-701d-498e-823a-e9e97b29ee8a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>2005-2000</th>\n","      <th>2010-2005</th>\n","      <th>2015-2010</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.003179</td>\n","      <td>0.009414</td>\n","      <td>0.026749</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-1.293455</td>\n","      <td>-0.228344</td>\n","      <td>0.233787</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.023928</td>\n","      <td>0.569782</td>\n","      <td>0.067958</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.600243</td>\n","      <td>1.130885</td>\n","      <td>0.071724</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.017077</td>\n","      <td>0.227190</td>\n","      <td>0.019116</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>0.852067</td>\n","      <td>-1.038764</td>\n","      <td>0.104080</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>-1.071647</td>\n","      <td>1.426356</td>\n","      <td>0.148030</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>-0.858144</td>\n","      <td>-0.453561</td>\n","      <td>-0.089178</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>1.149487</td>\n","      <td>-0.218768</td>\n","      <td>-0.049318</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>1.167405</td>\n","      <td>-0.672370</td>\n","      <td>0.382652</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>69 rows Ã— 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ecea51d-701d-498e-823a-e9e97b29ee8a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9ecea51d-701d-498e-823a-e9e97b29ee8a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9ecea51d-701d-498e-823a-e9e97b29ee8a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3b555af4-fa1b-4135-b6b2-c2c24a5774a0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b555af4-fa1b-4135-b6b2-c2c24a5774a0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3b555af4-fa1b-4135-b6b2-c2c24a5774a0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1af94fce-f97b-450f-900b-af449804c0ab\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1af94fce-f97b-450f-900b-af449804c0ab button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"2005-2000\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0264781195303019,\n        \"min\": -2.6332824,\n        \"max\": 1.7919387,\n        \"samples\": [\n          0.31572184,\n          -1.0716468,\n          0.00317881\n        ],\n        \"num_unique_values\": 66,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2010-2005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7001581443801032,\n        \"min\": -1.1922731,\n        \"max\": 2.1427133,\n        \"samples\": [\n          0.15009087,\n          -1.0273573,\n          0.2271902\n        ],\n        \"num_unique_values\": 67,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2015-2010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1823906833989172,\n        \"min\": -0.5172763,\n        \"max\": 0.40080166,\n        \"samples\": [\n          -0.018252145,\n          0.026749123,\n          -0.1823207\n        ],\n        \"num_unique_values\": 69,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Load the new dataset\n","new_data = pd.read_csv('/content/drive/MyDrive/Maliha Prediction/Test Data Siamese Prediction (all).csv')\n","\n","# Create an empty DataFrame to store predictions\n","predictions_df = pd.DataFrame(columns=['Prediction'])\n","\n","# Reshape the array to match the input shape expected by your model\n","sequence_length = 1\n","\n","# Iterate through each row in new_data\n","for i in range(len(new_data)):\n","    # Fetch the row\n","    current_row = new_data.iloc[i]\n","\n","    # Convert the row to a NumPy array\n","    input_data = np.array(current_row)\n","\n","    # Reshape the array\n","    input_data_reshaped = np.reshape(input_data, (1, sequence_length, input_data.shape[0]))\n","\n","    # Make predictions using the model\n","    current_prediction = lstm_model.predict(input_data_reshaped)[0, 0]  # Assuming the prediction is a scalar\n","\n","    # Append the prediction to the DataFrame\n","    predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","\n","# Print the DataFrame with predictions\n","print(predictions_df)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"63LoB9Clx-ZO","executionInfo":{"status":"ok","timestamp":1708110665019,"user_tz":-360,"elapsed":8575,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"a239451d-b726-472f-b464-cdf86853e373"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 3s 3s/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 29ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 33ms/step\n","1/1 [==============================] - ETA: 0s"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 34ms/step\n","1/1 [==============================] - 0s 28ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 38ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 31ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 21ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 38ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","    Prediction\n","0    26.075930\n","1    36.349323\n","2    21.326498\n","3    -0.259422\n","4    24.826340\n","..         ...\n","64    9.225935\n","65   28.532057\n","66   37.293377\n","67    0.601948\n","68    3.907005\n","\n","[69 rows x 1 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n","<ipython-input-8-f62325c7b1f3>:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  predictions_df = predictions_df.append({'Prediction': current_prediction}, ignore_index=True)\n"]}]},{"cell_type":"code","source":["predictions_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"dIAKOH2IVHB5","executionInfo":{"status":"ok","timestamp":1708110679070,"user_tz":-360,"elapsed":9,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"94b9a0ed-5a37-499a-8650-18aadc201889"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Prediction\n","0    26.075930\n","1    36.349323\n","2    21.326498\n","3    -0.259422\n","4    24.826340\n","..         ...\n","64    9.225935\n","65   28.532057\n","66   37.293377\n","67    0.601948\n","68    3.907005\n","\n","[69 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-ef2d87e9-ea66-4cb2-9fe9-a61e63ed2da5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Prediction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>26.075930</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>36.349323</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>21.326498</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.259422</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>24.826340</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>9.225935</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>28.532057</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>37.293377</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>0.601948</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>3.907005</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>69 rows Ã— 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef2d87e9-ea66-4cb2-9fe9-a61e63ed2da5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ef2d87e9-ea66-4cb2-9fe9-a61e63ed2da5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ef2d87e9-ea66-4cb2-9fe9-a61e63ed2da5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8bc86d14-6efc-46ed-ab99-a6a18c43a9eb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8bc86d14-6efc-46ed-ab99-a6a18c43a9eb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8bc86d14-6efc-46ed-ab99-a6a18c43a9eb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2f4b8a04-8900-4215-9391-186460669092\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('predictions_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2f4b8a04-8900-4215-9391-186460669092 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('predictions_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"predictions_df","summary":"{\n  \"name\": \"predictions_df\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"Prediction\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"samples\": [\n          4.223206520080566,\n          26.075929641723633,\n          -0.3506343364715576\n        ],\n        \"num_unique_values\": 69,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","# Load the actual results CSV file\n","actual_results_file_path = '/content/drive/MyDrive/Maliha Prediction/Actual GVI Difference 2020-2015 (test data).csv'  # Replace with the actual file path\n","actual_results_df = pd.read_csv(actual_results_file_path)\n","\n","pred = pd.read_csv('/content/drive/MyDrive/Maliha Prediction/predicted_values.csv')\n","\n","# Assuming predictions_df contains your predicted results DataFrame\n","\n","# Merge the actual and predicted results DataFrames based on the index or a common column\n","merged_df = pd.merge(actual_results_df, pred, left_index=True, right_index=True)\n","\n","# Extract actual and predicted values\n","actual_values = actual_results_df['GVI_diff']  # Replace 'Actual' with the actual column name in your file\n","predicted_values = pred['Predicted_GVI']  # Replace 'Prediction' with the column name in your predictions_df\n","\n","# Calculate metrics\n","mae = mean_absolute_error(actual_values, predicted_values)\n","mse = mean_squared_error(actual_values, predicted_values)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"MAE:\", mae)\n","print(\"MSE:\", mse)\n","print(\"RMSE:\", rmse)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UoPrcg0u7HzH","executionInfo":{"status":"ok","timestamp":1708121321095,"user_tz":-360,"elapsed":29,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"204c2db9-3991-4982-964c-7b94bb22e3a0"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["MAE: 0.2707052739523477\n","MSE: 0.14920291469918878\n","RMSE: 0.3862679312332164\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"gCEqQT7p93rA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"bZ-4BIMP9356"}},{"cell_type":"code","source":["merged_df\n","merged_df.rename(columns = {'GVI_diff':'Actual_GVI_diff'}, inplace = True)\n","merged_df.rename(columns = {'Predicted_GVI':'Predicted_GVI_diff'}, inplace = True)"],"metadata":{"id":"8_CjnuQD9A3e","executionInfo":{"status":"ok","timestamp":1708121335161,"user_tz":-360,"elapsed":458,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["merged_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"ey1cLqKL9pja","executionInfo":{"status":"ok","timestamp":1708121337099,"user_tz":-360,"elapsed":24,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"d2dbd1fd-1c44-401a-9f1d-ba719c31dc6e"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                Path1  \\\n","0   /content/drive/MyDrive/custommasks/pp_escola_2...   \n","1   /content/drive/MyDrive/custommasks/pp_augmente...   \n","2   /content/drive/MyDrive/custommasks/pp_augmente...   \n","3   /content/drive/MyDrive/custommasks/pp_Jeelong ...   \n","4   /content/drive/MyDrive/custommasks/pp_augmente...   \n","..                                                ...   \n","64  /content/drive/MyDrive/custommasks/pp_augmente...   \n","65  /content/drive/MyDrive/custommasks/pp_Rancho P...   \n","66  /content/drive/MyDrive/custommasks/pp_Royal Bo...   \n","67  /content/drive/MyDrive/custommasks/pp_Calgary ...   \n","68  /content/drive/MyDrive/custommasks/pp_Ospery p...   \n","\n","                                                Path2  Actual_GVI_diff  \\\n","0   /content/drive/MyDrive/custommasks/pp_escola_2...         0.107117   \n","1   /content/drive/MyDrive/custommasks/pp_augmente...        -0.080302   \n","2   /content/drive/MyDrive/custommasks/pp_augmente...         0.265150   \n","3   /content/drive/MyDrive/custommasks/pp_Jeelong ...        -0.005889   \n","4   /content/drive/MyDrive/custommasks/pp_augmente...         0.321412   \n","..                                                ...              ...   \n","64  /content/drive/MyDrive/custommasks/pp_augmente...         0.137635   \n","65  /content/drive/MyDrive/custommasks/pp_Rancho P...         0.237676   \n","66  /content/drive/MyDrive/custommasks/pp_Royal Bo...         0.021441   \n","67  /content/drive/MyDrive/custommasks/pp_Calgary ...         0.289675   \n","68  /content/drive/MyDrive/custommasks/pp_Ospery p...         0.045781   \n","\n","    Predicted_GVI_diff  \n","0             0.051967  \n","1            -0.056496  \n","2             0.226293  \n","3             0.305632  \n","4             0.115409  \n","..                 ...  \n","64           -0.084396  \n","65            0.918427  \n","66           -0.121343  \n","67            0.026936  \n","68           -0.017650  \n","\n","[69 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-139d84a7-3003-45c6-8117-79dbf04ce423\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Path1</th>\n","      <th>Path2</th>\n","      <th>Actual_GVI_diff</th>\n","      <th>Predicted_GVI_diff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_escola_2...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_escola_2...</td>\n","      <td>0.107117</td>\n","      <td>0.051967</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>-0.080302</td>\n","      <td>-0.056496</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>0.265150</td>\n","      <td>0.226293</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Jeelong ...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Jeelong ...</td>\n","      <td>-0.005889</td>\n","      <td>0.305632</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>0.321412</td>\n","      <td>0.115409</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_augmente...</td>\n","      <td>0.137635</td>\n","      <td>-0.084396</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Rancho P...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Rancho P...</td>\n","      <td>0.237676</td>\n","      <td>0.918427</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Royal Bo...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Royal Bo...</td>\n","      <td>0.021441</td>\n","      <td>-0.121343</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Calgary ...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Calgary ...</td>\n","      <td>0.289675</td>\n","      <td>0.026936</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>/content/drive/MyDrive/custommasks/pp_Ospery p...</td>\n","      <td>/content/drive/MyDrive/custommasks/pp_Ospery p...</td>\n","      <td>0.045781</td>\n","      <td>-0.017650</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>69 rows Ã— 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-139d84a7-3003-45c6-8117-79dbf04ce423')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-139d84a7-3003-45c6-8117-79dbf04ce423 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-139d84a7-3003-45c6-8117-79dbf04ce423');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-18d78d1a-fe2e-4058-bbac-aeee1948b845\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18d78d1a-fe2e-4058-bbac-aeee1948b845')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-18d78d1a-fe2e-4058-bbac-aeee1948b845 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_c0e71516-5059-483b-8261-883796a108bf\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('merged_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c0e71516-5059-483b-8261-883796a108bf button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('merged_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merged_df","summary":"{\n  \"name\": \"merged_df\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"Path1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_augmented_vertical_water_2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_escola_2015_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_rotate_yakutf_2015_mask.jpg\"\n        ],\n        \"num_unique_values\": 69,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Path2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"samples\": [\n          \"/content/drive/MyDrive/custommasks/pp_augmented_vertical_water_2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_escola_2020_mask.jpg\",\n          \"/content/drive/MyDrive/custommasks/pp_augmented_rotate_yakutf_2020_mask.jpg\"\n        ],\n        \"num_unique_values\": 69,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Actual_GVI_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18624695876060993,\n        \"min\": -0.3428940228959565,\n        \"max\": 0.6940728094352958,\n        \"samples\": [\n          0.5933740383774365,\n          -0.1062027714104343,\n          0.3214122274615444\n        ],\n        \"num_unique_values\": 68,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted_GVI_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33304178078683333,\n        \"min\": -0.40305236,\n        \"max\": 1.8052669,\n        \"samples\": [\n          0.21866012,\n          0.05196727,\n          0.12811735\n        ],\n        \"num_unique_values\": 69,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["merged_df.to_csv('/content/drive/MyDrive/Maliha Prediction/Actual GVI vs Predicted LSTM.csv',index=False)"],"metadata":{"id":"ZYsUzUvnWk1V","executionInfo":{"status":"ok","timestamp":1708121348840,"user_tz":-360,"elapsed":536,"user":{"displayName":"thesis research","userId":"06634674941398765871"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["#LSTM (GVI diff predictions of siamese model used as input)\n","#MAE: 0.2707052739523477\n","#MSE: 0.14920291469918878\n","#RMSE: 0.3862679312332164"],"metadata":{"id":"j2S6PuGk7eeK"}}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1c_wRZdyKvFTVysbgnSrVVsFoo03mVIjD","timestamp":1708091685830},{"file_id":"19w77rVDsVkiZKhlwrS51VY1GLQmdnSvJ","timestamp":1707823506115},{"file_id":"1qNvF1WoQncQWxixuZw8dY3zA1spiAfJV","timestamp":1707754950811},{"file_id":"1Z-W1r0XQ8L7_zD8P0H_D4QrQFLsJH83E","timestamp":1706953985924}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}