{"cells":[{"cell_type":"markdown","source":["| Model        | Configuration                  | Split Type | Test MAE  | Test MSE  | Test RMSE |\n","|--------------|--------------------------------|------------|-----------|-----------|-----------|\n","| GRU          | Epoch 100, Batch Size 16        | 80-20      | 0.7741    | 0.9600    | 0.9798    |\n","| LSTM         | Epoch 100, Batch Size 16        | 80-20      | 0.5764    | 0.6216    | 0.7884    |\n","| ATT-LSTM     | Epoch 100, Batch Size 4         | 80-20      | 1.6003    | 5.0211    | 2.2408    |\n","| ATT-GRU      | Epoch 100, Batch Size 16        | 80-20      | 1.8881    | 5.5861    | 2.3635    |\n","| GRU          | Epoch 60, Batch Size 16        | 80-20      | 1.2621    | 2.709  | 1.646    |\n","|ATT-GRU          | Epoch 60, Batch Size 16        | 80-20      | 3.1019    | 15.2593  | 3.90631   |\n","|LSTM        | Epoch 60, Batch Size 16        | 80-20      | 7.12393| 85.07465  | 9.22359 |\n","|ATT-LSTM        | Epoch 60, Batch Size 16        | 80-20      | 3.25989| 17.0760  | 4.1323 |\n"],"metadata":{"id":"L1-Yckbb7EJw"}},{"cell_type":"markdown","source":["| Model        | Configuration                  | Split Type | Test MAE  | Test MSE  | Test RMSE |\n","|--------------|--------------------------------|------------|-----------|-----------|-----------|\n","| GRU          | Epoch 100, Batch Size 16        | 80-20      | 0.7741    | 0.9600    | 0.9798    |\n","| LSTM         | Epoch 100, Batch Size 16        | 80-20      | 0.5764    | 0.6216    | 0.7884    |\n","| ATT-LSTM     | Epoch 100, Batch Size 16         | 80-20      | 1.6003    | 5.0211    | 2.2408    |\n","| ATT-GRU      | Epoch 100, Batch Size 16        | 80-20      | 1.8881    | 5.5861    | 2.3635    |\n","| GRU          | Epoch 60, Batch Size 16        | 80-20      | 1.2621    | 2.709  | 1.646    |\n","|ATT-GRU          | Epoch 60, Batch Size 16        | 80-20      | 3.1019    | 15.2593  | 3.90631   |\n","|LSTM        | Epoch 60, Batch Size 16        | 80-20      | 7.12393| 85.07465  | 9.22359 |\n","|ATT-LSTM        | Epoch 60, Batch Size 16        | 80-20      | 3.25989| 17.0760  | 4.1323 |"],"metadata":{"id":"_FONzs5LTR5Q"}},{"cell_type":"markdown","metadata":{"id":"wofTkJrheFpN"},"source":["\n","#GRU  for predicting GVI difference of 2015-2020\n","#epoch 60, batch 16\n","#Test MAE: 1.2621843141193192\n","#Test MSE: 2.7092884882661976\n","#Test RMSE: 1.6459916428299985"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"BwqEWq905A2r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714226067410,"user_tz":-360,"elapsed":3530,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}},"outputId":"2de60636-6417-42da-bc42-ec29d0e19128"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"KkujxKjv4y2G","executionInfo":{"status":"ok","timestamp":1714226071589,"user_tz":-360,"elapsed":509,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}}},"outputs":[],"source":["import numpy as np\n","import os\n","import pandas as pd\n","from keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.utils import to_categorical\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"NKazJ63BI0CS"},"source":["diff_2000_2005 --> gci diff 2005-2000\n","\n","---\n","\n","\n","diff_2005_2010 --> gci diff 2010-2005\n","\n","---\n","\n","\n","diff_2015_2010 --> gci diff 2015-2010\n","\n","---\n","\n","\n","y=gvi difference 2020-2015"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ONx4Copt6yfH","colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"status":"ok","timestamp":1714224105226,"user_tz":-360,"elapsed":2050,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}},"outputId":"df2298d1-c81b-4dd3-d69f-aef9eadc275f"},"outputs":[{"output_type":"stream","name":"stdout","text":["290 290 290 290\n"]},{"output_type":"execute_result","data":{"text/plain":["     2005-2000  2005-2010  2015-2010  2020-2015\n","0     0.360107   4.418945  45.901489 -50.424194\n","1    30.021667 -39.262390   7.197571  -8.728027\n","2   -20.672607  -2.809143   0.004578  10.063171\n","3    -4.643250 -17.291260  -0.875854   0.521851\n","4     3.604126  -8.889771   5.931091   9.449768\n","..         ...        ...        ...        ...\n","285   0.129700   6.892395   3.913879  -9.063721\n","286  -9.970093   2.558899   1.208496   0.395203\n","287 -29.627991   7.322693   1.606750  -6.152344\n","288   1.248169  -2.212524   5.435181  -3.779602\n","289  14.981079 -13.560486  21.760559 -24.960327\n","\n","[290 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-2321202c-bc35-4f4f-9686-bf8932d4ee5c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>2005-2000</th>\n","      <th>2005-2010</th>\n","      <th>2015-2010</th>\n","      <th>2020-2015</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.360107</td>\n","      <td>4.418945</td>\n","      <td>45.901489</td>\n","      <td>-50.424194</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>30.021667</td>\n","      <td>-39.262390</td>\n","      <td>7.197571</td>\n","      <td>-8.728027</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-20.672607</td>\n","      <td>-2.809143</td>\n","      <td>0.004578</td>\n","      <td>10.063171</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-4.643250</td>\n","      <td>-17.291260</td>\n","      <td>-0.875854</td>\n","      <td>0.521851</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.604126</td>\n","      <td>-8.889771</td>\n","      <td>5.931091</td>\n","      <td>9.449768</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>285</th>\n","      <td>0.129700</td>\n","      <td>6.892395</td>\n","      <td>3.913879</td>\n","      <td>-9.063721</td>\n","    </tr>\n","    <tr>\n","      <th>286</th>\n","      <td>-9.970093</td>\n","      <td>2.558899</td>\n","      <td>1.208496</td>\n","      <td>0.395203</td>\n","    </tr>\n","    <tr>\n","      <th>287</th>\n","      <td>-29.627991</td>\n","      <td>7.322693</td>\n","      <td>1.606750</td>\n","      <td>-6.152344</td>\n","    </tr>\n","    <tr>\n","      <th>288</th>\n","      <td>1.248169</td>\n","      <td>-2.212524</td>\n","      <td>5.435181</td>\n","      <td>-3.779602</td>\n","    </tr>\n","    <tr>\n","      <th>289</th>\n","      <td>14.981079</td>\n","      <td>-13.560486</td>\n","      <td>21.760559</td>\n","      <td>-24.960327</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>290 rows Ã— 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2321202c-bc35-4f4f-9686-bf8932d4ee5c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2321202c-bc35-4f4f-9686-bf8932d4ee5c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2321202c-bc35-4f4f-9686-bf8932d4ee5c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-df84a8b6-1871-4f4f-9548-bde46b6db699\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df84a8b6-1871-4f4f-9548-bde46b6db699')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-df84a8b6-1871-4f4f-9548-bde46b6db699 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f9eb55fc-1c22-4a27-83b2-59ab327de23c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f9eb55fc-1c22-4a27-83b2-59ab327de23c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 290,\n  \"fields\": [\n    {\n      \"column\": \"2005-2000\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.839232718590484,\n        \"min\": -59.295654296875,\n        \"max\": 30.44281005859375,\n        \"num_unique_values\": 250,\n        \"samples\": [\n          -6.65283203125,\n          -17.5323486328125,\n          -29.86602783203125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2005-2010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.405240722835437,\n        \"min\": -60.0830078125,\n        \"max\": 56.6314697265625,\n        \"num_unique_values\": 254,\n        \"samples\": [\n          0.12054443359375,\n          7.177734375,\n          35.5987548828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2015-2010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.40839784239571,\n        \"min\": -51.4404296875,\n        \"max\": 45.9014892578125,\n        \"num_unique_values\": 250,\n        \"samples\": [\n          5.21240234375,\n          23.48480224609375,\n          -9.478759765625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2020-2015\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.168096894314813,\n        \"min\": -50.4241943359375,\n        \"max\": 40.1947021484375,\n        \"num_unique_values\": 250,\n        \"samples\": [\n          9.3902587890625,\n          -19.95391845703125,\n          4.16412353515625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["import pandas as pd\n","import numpy as np\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","\n","# Load the CSV file\n","csv_path = '/content/drive/MyDrive/CSV Files/DATASET SUPREMACY.csv'\n","df = pd.read_csv(csv_path)\n","\n","# Create empty lists to store data\n","diff_2000_2005 = []  # List to store images from Path1\n","diff_2005_2010 = []  # List to store images from Path2\n","diff_2015_2010 = []  # List to store images from Path3\n","diff_2020_2015 = []  # List to store images from Path4\n","\n","# Iterate through rows and load images\n","for index, row in df.iterrows():\n","    # Organize data based on iteration\n","    if index % 4 == 0:\n","        diff_2000_2005.append(row['GVI_diff'])\n","    elif index % 4 == 1:\n","        diff_2005_2010.append(row['GVI_diff'])\n","    elif index % 4 == 2:\n","        diff_2015_2010.append(row['GVI_diff'])\n","    elif index % 4 == 3:\n","        diff_2020_2015.append(row['GVI_diff'])\n","\n","# Convert lists to NumPy arrays\n","diff_2000_2005 = np.array(diff_2000_2005)\n","diff_2005_2010 = np.array(diff_2005_2010)\n","diff_2015_2010 = np.array(diff_2015_2010)\n","diff_2020_2015 = np.array(diff_2020_2015)\n","\n","# Display lengths of arrays\n","print(len(diff_2000_2005), len(diff_2005_2010), len(diff_2015_2010), len(diff_2020_2015))\n","\n","# Create a DataFrame\n","data = pd.DataFrame({'2005-2000': diff_2000_2005, '2005-2010': diff_2005_2010, '2015-2010': diff_2015_2010, '2020-2015': diff_2020_2015})\n","\n","# Display the DataFrame\n","data\n"]},{"cell_type":"markdown","source":["Alisha Edit"],"metadata":{"id":"cMhh00mCFxE2"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from keras.models import Sequential\n","from keras.layers import GRU, Dense\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","# Load your data (replace this with your data loading step)\n","# data = pd.read_csv(\"/path/to/your/data.csv\")\n","\n","# Assuming data preprocessing steps here\n","# Split data into training and testing sets\n","train_size = int(len(data) * 0.8)\n","train_data = data.iloc[:train_size]\n","test_data = data.iloc[train_size:]\n","\n","# Function to prepare sequences for GRU\n","def prepare_sequences(data, sequence_length):\n","    X, y = [], []\n","    for i in range(len(data) - sequence_length):\n","        X.append(data.iloc[i:i+sequence_length, :-1].values)\n","        y.append(data.iloc[i+sequence_length, -1])\n","    return np.array(X), np.array(y)\n","\n","# Define sequence length and number of features\n","sequence_length = 10\n","n_features = len(data.columns) - 1  # Number of features excluding the target column\n","\n","# Prepare training and testing sequences\n","X_train, y_train = prepare_sequences(train_data, sequence_length)\n","X_test, y_test = prepare_sequences(test_data, sequence_length)\n","\n","# Build and train the GRU model\n","def train_gru_model(X_train, y_train, X_test, y_test, epochs):\n","    model = Sequential()\n","    model.add(GRU(units=50, return_sequences=True, input_shape=(sequence_length, n_features)))\n","    model.add(GRU(units=50))\n","    model.add(Dense(1))\n","\n","    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","    history = model.fit(X_train, y_train, epochs=epochs, batch_size=16, validation_data=(X_test, y_test), verbose=0)\n","\n","    return model, history\n","\n"],"metadata":{"id":"r5cGm7ZyFwSj","executionInfo":{"status":"ok","timestamp":1714228500421,"user_tz":-360,"elapsed":741,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","# Initialize lists to store MSE and MAE for each epoch\n","mse_values = []\n","mae_values = []\n","\n","for epochs in epochs_list:\n","    # Train model for the current number of epochs\n","    model, history = train_gru_model(X_train, y_train, X_test, y_test, epochs)\n","\n","    # Predict using the trained model\n","    y_pred = model.predict(X_test)\n","\n","    # Calculate MSE and MAE\n","    mse = mean_squared_error(y_test, y_pred)\n","    mae = mean_absolute_error(y_test, y_pred)\n","\n","    # Append MSE and MAE to lists\n","    mse_values.append(mse)\n","    mae_values.append(mae)\n","\n","# Create a DataFrame to store results\n","results_df = pd.DataFrame({\n","    'Epochs': epochs_list,\n","    'MSE': mse_values,\n","    'MAE': mae_values\n","})\n","\n","# Print the DataFrame containing MSE and MAE values\n","print(\"DataFrame with MSE and MAE for Different Numbers of Epochs:\")\n","print(results_df)\n","\n","# Plot the mean losses\n","plt.figure(figsize=(10, 6))\n","plt.plot(mean_train_loss, label='Mean Train Loss', linestyle='--')\n","plt.plot(mean_test_loss, label='Mean Test Loss', linestyle='-')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Mean Train Loss vs. Mean Test Loss for Different Epochs (GRU)')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":810},"id":"e07fMUrpHM7g","executionInfo":{"status":"ok","timestamp":1714227963880,"user_tz":-360,"elapsed":78301,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}},"outputId":"b9510c24-9354-4254-cf03-e877369f2bab"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 1s 7ms/step\n","2/2 [==============================] - 1s 7ms/step\n","2/2 [==============================] - 1s 6ms/step\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 17 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7d94b7af5f30> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 1s 9ms/step\n","2/2 [==============================] - 1s 7ms/step\n","DataFrame with MSE and MAE for Different Numbers of Epochs:\n","   Epochs        MSE       MAE\n","0      20  20.620896  3.596878\n","1      40  10.965138  2.731260\n","2      60   1.906512  1.087680\n","3      80   1.085066  0.853151\n","4     100   0.846006  0.703331\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import GRU, Dense\n","from tensorflow.keras.optimizers import Adam\n","\n","# Function to define and train GRU model\n","def train_gru_model(X_train, y_train, X_test, y_test, epochs):\n","    model = Sequential([\n","        GRU(64, input_shape=(X_train.shape[1], X_train.shape[2])),\n","        Dense(1)\n","    ])\n","\n","    model.compile(optimizer=Adam(), loss='mse')  # Compile the model\n","\n","    # Train the model\n","    history = model.fit(X_train, y_train, epochs=epochs, validation_data=(X_test, y_test))\n","\n","    return model, history\n","\n","# Initialize data and epochs list\n","epochs_list = [20, 40, 60, 80, 100]\n","train_losses, test_losses = [], []\n","mae_values, mse_values = [], []\n","max_epochs = max(epochs_list)\n","\n","# Iterate over each number of epochs and train the model\n","for epochs in epochs_list:\n","    #model, history = train_gru_model(X_train, y_train, X_test, y_test, epochs)\n","    history = model.fit(X_train, y_train, epochs=epochs, batch_size=16, validation_data=(X_test, y_test))\n","\n","    # Extract loss histories\n","    train_loss_history = np.array(history.history['loss'])\n","    test_loss_history = np.array(history.history['val_loss'])\n","\n","    # Pad loss histories to max_epochs length\n","    train_loss_history = np.pad(train_loss_history, (0, max_epochs - len(train_loss_history)), mode='constant', constant_values=np.nan)\n","    test_loss_history = np.pad(test_loss_history, (0, max_epochs - len(test_loss_history)), mode='constant', constant_values=np.nan)\n","\n","    # Append to train and test losses\n","    train_losses.append(train_loss_history)\n","    test_losses.append(test_loss_history)\n","\n","    # Calculate MAE and MSE\n","    y_pred = model.predict(X_test)\n","    mae = np.mean(np.abs(y_pred - y_test))\n","    mse = np.mean((y_pred - y_test)**2)\n","    mae_values.append(mae)\n","    mse_values.append(mse)\n","\n","# Calculate mean losses across different epochs\n","mean_train_loss = np.nanmean(train_losses, axis=0)\n","mean_test_loss = np.nanmean(test_losses, axis=0)\n","\n","# Create a DataFrame to store MAE and MSE values for each epoch\n","results_df = pd.DataFrame({\n","    'Epochs': epochs_list,\n","    'MAE': mae_values,\n","    'MSE': mse_values\n","})\n","\n","# Print the DataFrame\n","print(\"MAE and MSE for Different Numbers of Epochs:\")\n","print(results_df)\n","\n","# Plot the mean losses\n","plt.figure(figsize=(10, 6))\n","plt.plot(mean_train_loss, label='Mean Train Loss', linestyle='--')\n","plt.plot(mean_test_loss, label='Mean Test Loss', linestyle='-')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Mean Train Loss vs. Mean Test Loss for Different Epochs (GRU)')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"zH_KtUw9ONQ6","executionInfo":{"status":"ok","timestamp":1714224929548,"user_tz":-360,"elapsed":46171,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}},"outputId":"e77c2e89-3eb9-415d-be3c-aa2886291eda"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","14/14 [==============================] - 0s 17ms/step - loss: 13.4174 - val_loss: 2.3428\n","Epoch 2/20\n","14/14 [==============================] - 0s 10ms/step - loss: 13.3684 - val_loss: 2.0555\n","Epoch 3/20\n","14/14 [==============================] - 0s 10ms/step - loss: 12.9990 - val_loss: 2.4914\n","Epoch 4/20\n","14/14 [==============================] - 0s 14ms/step - loss: 12.5737 - val_loss: 2.1163\n","Epoch 5/20\n","14/14 [==============================] - 0s 13ms/step - loss: 12.2371 - val_loss: 2.0919\n","Epoch 6/20\n","14/14 [==============================] - 0s 12ms/step - loss: 12.0947 - val_loss: 1.9475\n","Epoch 7/20\n","14/14 [==============================] - 0s 11ms/step - loss: 11.9870 - val_loss: 2.7568\n","Epoch 8/20\n","14/14 [==============================] - 0s 14ms/step - loss: 11.9472 - val_loss: 3.6504\n","Epoch 9/20\n","14/14 [==============================] - 0s 12ms/step - loss: 11.4938 - val_loss: 3.2886\n","Epoch 10/20\n","14/14 [==============================] - 0s 10ms/step - loss: 10.9283 - val_loss: 2.1831\n","Epoch 11/20\n","14/14 [==============================] - 0s 10ms/step - loss: 11.0480 - val_loss: 2.0373\n","Epoch 12/20\n","14/14 [==============================] - 0s 10ms/step - loss: 10.6372 - val_loss: 1.9166\n","Epoch 13/20\n","14/14 [==============================] - 0s 19ms/step - loss: 10.2623 - val_loss: 0.8767\n","Epoch 14/20\n","14/14 [==============================] - 0s 10ms/step - loss: 9.7642 - val_loss: 1.1305\n","Epoch 15/20\n","14/14 [==============================] - 0s 8ms/step - loss: 9.8486 - val_loss: 1.1530\n","Epoch 16/20\n","14/14 [==============================] - 0s 10ms/step - loss: 9.7173 - val_loss: 1.0588\n","Epoch 17/20\n","14/14 [==============================] - 0s 10ms/step - loss: 9.2212 - val_loss: 0.8702\n","Epoch 18/20\n","14/14 [==============================] - 0s 14ms/step - loss: 9.1392 - val_loss: 0.6470\n","Epoch 19/20\n","14/14 [==============================] - 0s 10ms/step - loss: 8.8961 - val_loss: 0.4650\n","Epoch 20/20\n","14/14 [==============================] - 0s 9ms/step - loss: 8.6305 - val_loss: 0.4678\n","2/2 [==============================] - 0s 7ms/step\n","Epoch 1/40\n","14/14 [==============================] - 0s 13ms/step - loss: 8.4433 - val_loss: 0.4265\n","Epoch 2/40\n","14/14 [==============================] - 0s 8ms/step - loss: 8.2157 - val_loss: 0.6017\n","Epoch 3/40\n","14/14 [==============================] - 0s 8ms/step - loss: 8.3409 - val_loss: 0.6305\n","Epoch 4/40\n","14/14 [==============================] - 0s 10ms/step - loss: 8.2366 - val_loss: 0.6236\n","Epoch 5/40\n","14/14 [==============================] - 0s 14ms/step - loss: 8.1347 - val_loss: 0.5395\n","Epoch 6/40\n","14/14 [==============================] - 0s 13ms/step - loss: 8.0037 - val_loss: 0.3009\n","Epoch 7/40\n","14/14 [==============================] - 0s 18ms/step - loss: 7.6582 - val_loss: 0.5984\n","Epoch 8/40\n","14/14 [==============================] - 0s 15ms/step - loss: 7.7953 - val_loss: 0.6049\n","Epoch 9/40\n","14/14 [==============================] - 0s 14ms/step - loss: 7.7330 - val_loss: 0.6040\n","Epoch 10/40\n","14/14 [==============================] - 0s 18ms/step - loss: 7.6122 - val_loss: 0.5793\n","Epoch 11/40\n","14/14 [==============================] - 0s 19ms/step - loss: 7.2979 - val_loss: 0.2918\n","Epoch 12/40\n","14/14 [==============================] - 0s 13ms/step - loss: 7.4051 - val_loss: 0.5169\n","Epoch 13/40\n","14/14 [==============================] - 0s 15ms/step - loss: 7.7152 - val_loss: 0.2633\n","Epoch 14/40\n","14/14 [==============================] - 0s 20ms/step - loss: 7.3261 - val_loss: 0.3071\n","Epoch 15/40\n","14/14 [==============================] - 0s 18ms/step - loss: 7.3743 - val_loss: 0.3905\n","Epoch 16/40\n","14/14 [==============================] - 0s 13ms/step - loss: 7.1559 - val_loss: 0.5254\n","Epoch 17/40\n","14/14 [==============================] - 0s 19ms/step - loss: 7.3201 - val_loss: 0.5438\n","Epoch 18/40\n","14/14 [==============================] - 0s 18ms/step - loss: 7.1969 - val_loss: 0.5966\n","Epoch 19/40\n","14/14 [==============================] - 0s 14ms/step - loss: 7.2066 - val_loss: 0.7494\n","Epoch 20/40\n","14/14 [==============================] - 0s 17ms/step - loss: 7.0459 - val_loss: 0.5299\n","Epoch 21/40\n","14/14 [==============================] - 0s 11ms/step - loss: 7.1075 - val_loss: 0.6068\n","Epoch 22/40\n","14/14 [==============================] - 0s 17ms/step - loss: 6.9958 - val_loss: 0.3996\n","Epoch 23/40\n","14/14 [==============================] - 0s 21ms/step - loss: 6.8556 - val_loss: 0.3661\n","Epoch 24/40\n","14/14 [==============================] - 0s 28ms/step - loss: 7.0366 - val_loss: 0.3414\n","Epoch 25/40\n","14/14 [==============================] - 0s 25ms/step - loss: 6.8449 - val_loss: 0.3789\n","Epoch 26/40\n","14/14 [==============================] - 0s 21ms/step - loss: 6.9695 - val_loss: 0.3378\n","Epoch 27/40\n","14/14 [==============================] - 0s 20ms/step - loss: 7.0722 - val_loss: 0.1903\n","Epoch 28/40\n","14/14 [==============================] - 0s 18ms/step - loss: 6.6731 - val_loss: 0.3678\n","Epoch 29/40\n","14/14 [==============================] - 0s 26ms/step - loss: 6.6483 - val_loss: 0.2370\n","Epoch 30/40\n","14/14 [==============================] - 0s 17ms/step - loss: 6.5947 - val_loss: 0.5677\n","Epoch 31/40\n","14/14 [==============================] - 0s 14ms/step - loss: 6.6854 - val_loss: 0.2756\n","Epoch 32/40\n","14/14 [==============================] - 0s 13ms/step - loss: 6.5652 - val_loss: 0.3374\n","Epoch 33/40\n","14/14 [==============================] - 0s 11ms/step - loss: 6.6049 - val_loss: 0.3273\n","Epoch 34/40\n","14/14 [==============================] - 0s 11ms/step - loss: 6.4666 - val_loss: 0.2105\n","Epoch 35/40\n","14/14 [==============================] - 0s 15ms/step - loss: 6.5260 - val_loss: 0.2532\n","Epoch 36/40\n","14/14 [==============================] - 0s 15ms/step - loss: 6.5121 - val_loss: 0.1603\n","Epoch 37/40\n","14/14 [==============================] - 0s 12ms/step - loss: 6.5058 - val_loss: 1.1292\n","Epoch 38/40\n","14/14 [==============================] - 0s 19ms/step - loss: 6.6964 - val_loss: 0.3463\n","Epoch 39/40\n","14/14 [==============================] - 0s 14ms/step - loss: 6.7105 - val_loss: 1.0111\n","Epoch 40/40\n","14/14 [==============================] - 0s 10ms/step - loss: 6.8767 - val_loss: 1.4370\n","2/2 [==============================] - 0s 4ms/step\n","Epoch 1/60\n","14/14 [==============================] - 0s 9ms/step - loss: 6.7501 - val_loss: 1.9020\n","Epoch 2/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.6563 - val_loss: 0.6782\n","Epoch 3/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.7063 - val_loss: 0.5731\n","Epoch 4/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.5126 - val_loss: 0.4181\n","Epoch 5/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.4192 - val_loss: 0.2563\n","Epoch 6/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.4818 - val_loss: 0.2794\n","Epoch 7/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.6637 - val_loss: 0.6659\n","Epoch 8/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.4898 - val_loss: 0.3675\n","Epoch 9/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.3657 - val_loss: 0.4408\n","Epoch 10/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.3638 - val_loss: 0.9740\n","Epoch 11/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.4779 - val_loss: 0.9182\n","Epoch 12/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.5350 - val_loss: 0.3449\n","Epoch 13/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.3524 - val_loss: 0.2214\n","Epoch 14/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.3640 - val_loss: 0.2278\n","Epoch 15/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.2853 - val_loss: 0.2219\n","Epoch 16/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.2726 - val_loss: 0.2668\n","Epoch 17/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.4289 - val_loss: 0.3252\n","Epoch 18/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1724 - val_loss: 0.2287\n","Epoch 19/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.3604 - val_loss: 0.2872\n","Epoch 20/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.3135 - val_loss: 0.2968\n","Epoch 21/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.2443 - val_loss: 0.2306\n","Epoch 22/60\n","14/14 [==============================] - 0s 8ms/step - loss: 6.2211 - val_loss: 0.2626\n","Epoch 23/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1728 - val_loss: 0.1860\n","Epoch 24/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1893 - val_loss: 0.3373\n","Epoch 25/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1609 - val_loss: 0.1475\n","Epoch 26/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1501 - val_loss: 0.2868\n","Epoch 27/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1971 - val_loss: 0.2813\n","Epoch 28/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1344 - val_loss: 0.2307\n","Epoch 29/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1620 - val_loss: 0.2270\n","Epoch 30/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1291 - val_loss: 0.1663\n","Epoch 31/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.1388 - val_loss: 0.4883\n","Epoch 32/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.0690 - val_loss: 0.3059\n","Epoch 33/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.1893 - val_loss: 0.2475\n","Epoch 34/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1391 - val_loss: 0.3865\n","Epoch 35/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.1429 - val_loss: 0.2818\n","Epoch 36/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1939 - val_loss: 0.2305\n","Epoch 37/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1346 - val_loss: 0.3258\n","Epoch 38/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1307 - val_loss: 0.2563\n","Epoch 39/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0956 - val_loss: 1.0077\n","Epoch 40/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.3714 - val_loss: 0.7832\n","Epoch 41/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.4554 - val_loss: 0.4053\n","Epoch 42/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.2328 - val_loss: 0.3868\n","Epoch 43/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.3255 - val_loss: 0.6775\n","Epoch 44/60\n","14/14 [==============================] - 0s 8ms/step - loss: 6.2116 - val_loss: 0.3666\n","Epoch 45/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1654 - val_loss: 0.3276\n","Epoch 46/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.2658 - val_loss: 0.1400\n","Epoch 47/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.1205 - val_loss: 0.2687\n","Epoch 48/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.1895 - val_loss: 0.2958\n","Epoch 49/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.1480 - val_loss: 0.3584\n","Epoch 50/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1031 - val_loss: 0.1635\n","Epoch 51/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1481 - val_loss: 0.4365\n","Epoch 52/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.2554 - val_loss: 0.2604\n","Epoch 53/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.2354 - val_loss: 0.6349\n","Epoch 54/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.2055 - val_loss: 0.7410\n","Epoch 55/60\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1770 - val_loss: 0.2723\n","Epoch 56/60\n","14/14 [==============================] - 0s 6ms/step - loss: 6.1087 - val_loss: 0.2037\n","Epoch 57/60\n","14/14 [==============================] - 0s 9ms/step - loss: 6.0406 - val_loss: 0.1892\n","Epoch 58/60\n","14/14 [==============================] - 0s 7ms/step - loss: 6.0014 - val_loss: 0.1917\n","Epoch 59/60\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9905 - val_loss: 0.1863\n","Epoch 60/60\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9573 - val_loss: 0.1321\n","2/2 [==============================] - 0s 5ms/step\n","Epoch 1/80\n","14/14 [==============================] - 0s 11ms/step - loss: 6.0312 - val_loss: 0.2326\n","Epoch 2/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0853 - val_loss: 0.1973\n","Epoch 3/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9538 - val_loss: 0.1608\n","Epoch 4/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9998 - val_loss: 0.2731\n","Epoch 5/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9262 - val_loss: 0.1828\n","Epoch 6/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.9680 - val_loss: 0.1547\n","Epoch 7/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9212 - val_loss: 0.2361\n","Epoch 8/80\n","14/14 [==============================] - 0s 5ms/step - loss: 6.0271 - val_loss: 0.3722\n","Epoch 9/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9030 - val_loss: 0.2341\n","Epoch 10/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0589 - val_loss: 0.1580\n","Epoch 11/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9480 - val_loss: 0.1955\n","Epoch 12/80\n","14/14 [==============================] - 0s 5ms/step - loss: 6.1193 - val_loss: 0.3212\n","Epoch 13/80\n","14/14 [==============================] - 0s 7ms/step - loss: 6.0794 - val_loss: 0.6305\n","Epoch 14/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9851 - val_loss: 0.3316\n","Epoch 15/80\n","14/14 [==============================] - 0s 7ms/step - loss: 6.0701 - val_loss: 0.4721\n","Epoch 16/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0749 - val_loss: 0.4943\n","Epoch 17/80\n","14/14 [==============================] - 0s 7ms/step - loss: 6.2108 - val_loss: 0.2981\n","Epoch 18/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0802 - val_loss: 0.3475\n","Epoch 19/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.9578 - val_loss: 0.2988\n","Epoch 20/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0088 - val_loss: 0.3772\n","Epoch 21/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0892 - val_loss: 0.2489\n","Epoch 22/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0432 - val_loss: 0.4375\n","Epoch 23/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.9213 - val_loss: 0.1551\n","Epoch 24/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9881 - val_loss: 0.2886\n","Epoch 25/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9598 - val_loss: 0.2118\n","Epoch 26/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9289 - val_loss: 0.3855\n","Epoch 27/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0671 - val_loss: 0.3176\n","Epoch 28/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9392 - val_loss: 0.2227\n","Epoch 29/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0436 - val_loss: 0.3370\n","Epoch 30/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9804 - val_loss: 0.1739\n","Epoch 31/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9409 - val_loss: 0.2004\n","Epoch 32/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9413 - val_loss: 0.1540\n","Epoch 33/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8662 - val_loss: 0.2426\n","Epoch 34/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9425 - val_loss: 0.1443\n","Epoch 35/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9070 - val_loss: 0.2643\n","Epoch 36/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8596 - val_loss: 0.1217\n","Epoch 37/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8810 - val_loss: 0.1487\n","Epoch 38/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9047 - val_loss: 0.3849\n","Epoch 39/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9532 - val_loss: 0.2117\n","Epoch 40/80\n","14/14 [==============================] - 0s 5ms/step - loss: 6.0226 - val_loss: 0.3485\n","Epoch 41/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9234 - val_loss: 0.1530\n","Epoch 42/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9216 - val_loss: 0.1975\n","Epoch 43/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9749 - val_loss: 0.4282\n","Epoch 44/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8731 - val_loss: 0.2120\n","Epoch 45/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.8728 - val_loss: 0.1220\n","Epoch 46/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9500 - val_loss: 0.1821\n","Epoch 47/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9019 - val_loss: 0.1831\n","Epoch 48/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8499 - val_loss: 0.3036\n","Epoch 49/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8407 - val_loss: 0.1825\n","Epoch 50/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9365 - val_loss: 0.3530\n","Epoch 51/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8531 - val_loss: 0.1879\n","Epoch 52/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9211 - val_loss: 0.1969\n","Epoch 53/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.8986 - val_loss: 0.4171\n","Epoch 54/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9625 - val_loss: 0.3196\n","Epoch 55/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8754 - val_loss: 0.2446\n","Epoch 56/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9514 - val_loss: 0.5228\n","Epoch 57/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.9128 - val_loss: 0.5389\n","Epoch 58/80\n","14/14 [==============================] - 0s 6ms/step - loss: 6.0579 - val_loss: 0.6070\n","Epoch 59/80\n","14/14 [==============================] - 0s 8ms/step - loss: 5.9057 - val_loss: 0.2603\n","Epoch 60/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.8178 - val_loss: 0.2809\n","Epoch 61/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8595 - val_loss: 0.1618\n","Epoch 62/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8991 - val_loss: 0.3791\n","Epoch 63/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9020 - val_loss: 0.2297\n","Epoch 64/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8661 - val_loss: 0.2158\n","Epoch 65/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.8487 - val_loss: 0.2658\n","Epoch 66/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8465 - val_loss: 0.3436\n","Epoch 67/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8794 - val_loss: 0.3264\n","Epoch 68/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8566 - val_loss: 0.3544\n","Epoch 69/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8444 - val_loss: 0.3431\n","Epoch 70/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.8042 - val_loss: 0.2915\n","Epoch 71/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8486 - val_loss: 0.2420\n","Epoch 72/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9612 - val_loss: 0.2273\n","Epoch 73/80\n","14/14 [==============================] - 0s 5ms/step - loss: 5.9011 - val_loss: 0.5435\n","Epoch 74/80\n","14/14 [==============================] - 0s 5ms/step - loss: 6.0532 - val_loss: 0.8229\n","Epoch 75/80\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9774 - val_loss: 0.5199\n","Epoch 76/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8900 - val_loss: 0.3178\n","Epoch 77/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9974 - val_loss: 0.6762\n","Epoch 78/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8787 - val_loss: 0.1784\n","Epoch 79/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8919 - val_loss: 0.3506\n","Epoch 80/80\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9781 - val_loss: 0.4909\n","2/2 [==============================] - 0s 7ms/step\n","Epoch 1/100\n","14/14 [==============================] - 0s 13ms/step - loss: 5.8422 - val_loss: 0.1892\n","Epoch 2/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.8145 - val_loss: 0.3598\n","Epoch 3/100\n","14/14 [==============================] - 0s 8ms/step - loss: 5.8257 - val_loss: 0.2197\n","Epoch 4/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.7662 - val_loss: 0.2837\n","Epoch 5/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.8075 - val_loss: 0.1937\n","Epoch 6/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.8823 - val_loss: 0.1720\n","Epoch 7/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.8291 - val_loss: 0.1390\n","Epoch 8/100\n","14/14 [==============================] - 0s 10ms/step - loss: 5.7883 - val_loss: 0.2972\n","Epoch 9/100\n","14/14 [==============================] - 0s 8ms/step - loss: 5.8574 - val_loss: 0.1867\n","Epoch 10/100\n","14/14 [==============================] - 0s 8ms/step - loss: 6.0465 - val_loss: 0.5921\n","Epoch 11/100\n","14/14 [==============================] - 0s 9ms/step - loss: 6.0643 - val_loss: 0.2437\n","Epoch 12/100\n","14/14 [==============================] - 0s 11ms/step - loss: 5.8411 - val_loss: 0.4615\n","Epoch 13/100\n","14/14 [==============================] - 0s 8ms/step - loss: 5.8650 - val_loss: 0.2332\n","Epoch 14/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.8634 - val_loss: 0.3495\n","Epoch 15/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.9530 - val_loss: 0.2808\n","Epoch 16/100\n","14/14 [==============================] - 0s 8ms/step - loss: 5.9221 - val_loss: 0.4500\n","Epoch 17/100\n","14/14 [==============================] - 0s 10ms/step - loss: 5.9843 - val_loss: 0.3677\n","Epoch 18/100\n","14/14 [==============================] - 0s 9ms/step - loss: 6.1069 - val_loss: 0.6580\n","Epoch 19/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.9824 - val_loss: 0.8491\n","Epoch 20/100\n","14/14 [==============================] - 0s 10ms/step - loss: 5.8691 - val_loss: 0.3821\n","Epoch 21/100\n","14/14 [==============================] - 0s 9ms/step - loss: 5.9677 - val_loss: 0.1440\n","Epoch 22/100\n","14/14 [==============================] - 0s 10ms/step - loss: 5.8153 - val_loss: 0.2388\n","Epoch 23/100\n","14/14 [==============================] - 0s 10ms/step - loss: 5.8432 - val_loss: 0.5335\n","Epoch 24/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7797 - val_loss: 0.1610\n","Epoch 25/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7804 - val_loss: 0.2368\n","Epoch 26/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8720 - val_loss: 0.1731\n","Epoch 27/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7280 - val_loss: 0.1887\n","Epoch 28/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7291 - val_loss: 0.1605\n","Epoch 29/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7464 - val_loss: 0.3705\n","Epoch 30/100\n","14/14 [==============================] - 0s 8ms/step - loss: 5.8887 - val_loss: 0.2720\n","Epoch 31/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8255 - val_loss: 0.1356\n","Epoch 32/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8338 - val_loss: 0.1766\n","Epoch 33/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8765 - val_loss: 0.7078\n","Epoch 34/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.9714 - val_loss: 0.3129\n","Epoch 35/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.9610 - val_loss: 0.5383\n","Epoch 36/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9245 - val_loss: 0.2230\n","Epoch 37/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.9747 - val_loss: 0.3023\n","Epoch 38/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.9924 - val_loss: 0.5384\n","Epoch 39/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8576 - val_loss: 0.3231\n","Epoch 40/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8051 - val_loss: 0.1843\n","Epoch 41/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7781 - val_loss: 0.1308\n","Epoch 42/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7928 - val_loss: 0.1321\n","Epoch 43/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8074 - val_loss: 0.3600\n","Epoch 44/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8323 - val_loss: 0.1181\n","Epoch 45/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8366 - val_loss: 0.2499\n","Epoch 46/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8108 - val_loss: 0.1166\n","Epoch 47/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7830 - val_loss: 0.1089\n","Epoch 48/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8611 - val_loss: 0.1437\n","Epoch 49/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8675 - val_loss: 0.1745\n","Epoch 50/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8223 - val_loss: 0.2937\n","Epoch 51/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8544 - val_loss: 0.1371\n","Epoch 52/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7724 - val_loss: 0.1389\n","Epoch 53/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7905 - val_loss: 0.1541\n","Epoch 54/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7181 - val_loss: 0.1739\n","Epoch 55/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7356 - val_loss: 0.1325\n","Epoch 56/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7101 - val_loss: 0.1303\n","Epoch 57/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7178 - val_loss: 0.1079\n","Epoch 58/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7435 - val_loss: 0.1791\n","Epoch 59/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7405 - val_loss: 0.2439\n","Epoch 60/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7769 - val_loss: 0.1169\n","Epoch 61/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.6620 - val_loss: 0.1508\n","Epoch 62/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7397 - val_loss: 0.1099\n","Epoch 63/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7137 - val_loss: 0.1504\n","Epoch 64/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.6834 - val_loss: 0.1527\n","Epoch 65/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7628 - val_loss: 0.1592\n","Epoch 66/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7264 - val_loss: 0.1659\n","Epoch 67/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7749 - val_loss: 0.1303\n","Epoch 68/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7129 - val_loss: 0.2205\n","Epoch 69/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.8142 - val_loss: 0.2271\n","Epoch 70/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7782 - val_loss: 0.2593\n","Epoch 71/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7706 - val_loss: 0.2386\n","Epoch 72/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7253 - val_loss: 0.1837\n","Epoch 73/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7517 - val_loss: 0.1048\n","Epoch 74/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7529 - val_loss: 0.1444\n","Epoch 75/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7352 - val_loss: 0.1356\n","Epoch 76/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7277 - val_loss: 0.1357\n","Epoch 77/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7810 - val_loss: 0.1259\n","Epoch 78/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8471 - val_loss: 0.2944\n","Epoch 79/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7769 - val_loss: 0.3480\n","Epoch 80/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8564 - val_loss: 0.2805\n","Epoch 81/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7671 - val_loss: 0.2351\n","Epoch 82/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8152 - val_loss: 0.1007\n","Epoch 83/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7464 - val_loss: 0.2142\n","Epoch 84/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.6935 - val_loss: 0.1694\n","Epoch 85/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7363 - val_loss: 0.1775\n","Epoch 86/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8277 - val_loss: 0.1651\n","Epoch 87/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7110 - val_loss: 0.1257\n","Epoch 88/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.6648 - val_loss: 0.1252\n","Epoch 89/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.6658 - val_loss: 0.1249\n","Epoch 90/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7151 - val_loss: 0.2545\n","Epoch 91/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7924 - val_loss: 0.1256\n","Epoch 92/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.6625 - val_loss: 0.1367\n","Epoch 93/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.7836 - val_loss: 0.1109\n","Epoch 94/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7700 - val_loss: 0.1341\n","Epoch 95/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8996 - val_loss: 0.3421\n","Epoch 96/100\n","14/14 [==============================] - 0s 6ms/step - loss: 5.8297 - val_loss: 0.3117\n","Epoch 97/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.7898 - val_loss: 0.2007\n","Epoch 98/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.7577 - val_loss: 0.1659\n","Epoch 99/100\n","14/14 [==============================] - 0s 7ms/step - loss: 5.8131 - val_loss: 0.1349\n","Epoch 100/100\n","14/14 [==============================] - 0s 5ms/step - loss: 5.8366 - val_loss: 0.2278\n","2/2 [==============================] - 0s 4ms/step\n","MAE and MSE for Different Numbers of Epochs:\n","   Epochs       MAE         MSE\n","0      20  9.318407  138.270193\n","1      40  9.456518  141.311967\n","2      60  9.361295  139.352781\n","3      80  9.282468  136.825311\n","4     100  9.392609  140.065654\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"qttbHQIHFRVm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"feFzKLnRI_LF"},"source":["#GRU\n","#epoch 60"]},{"cell_type":"code","source":["from keras.layers import Input, concatenate, Flatten, Dense, Dropout, GRU\n","from keras.models import Model\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","import numpy as np\n","import pandas as pd\n","from keras.models import Sequential\n","from keras.layers import GRU, Dense\n","\n","# Load and prepare data (replace with your file path)\n","#data = pd.read_csv(\"/content/drive/MyDrive/Prediction_Alisha/CSV Files/FinalGVI_YearWise.csv\")\n","\n","# Split data into training and testing sets\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Assuming input sequence length and features\n","sequence_length = 10  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Create input and output sequences for GRU\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","print(\"X_test shape before reshaping:\", X_test.shape)\n","\n","# Define the GRU model\n","model = Sequential()\n","model.add(GRU(units=50, return_sequences=True, input_shape=(sequence_length, features)))\n","model.add(GRU(units=50))\n","model.add(Dense(1))  # Single output neuron for GVI prediction\n","\n","# Compile the model with a mean squared error loss function\n","model.compile(loss='mean_squared_error', optimizer='adam')\n","\n","# Train the model\n","history = model.fit(X_train, y_train, epochs=60, batch_size=16, validation_data=(X_test, y_test))\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UhvJB96oqeoi","executionInfo":{"status":"ok","timestamp":1707931803925,"user_tz":-360,"elapsed":27477,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"7cecf25c-efb8-4b74-fb67-0d6499787a79"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (222, 10, 3)\n","X_test shape before reshaping: (48, 10, 3)\n","Epoch 1/60\n","14/14 [==============================] - 5s 66ms/step - loss: 169.3160 - val_loss: 69.6697\n","Epoch 2/60\n","14/14 [==============================] - 0s 13ms/step - loss: 155.8283 - val_loss: 71.5723\n","Epoch 3/60\n","14/14 [==============================] - 0s 13ms/step - loss: 150.2840 - val_loss: 72.7630\n","Epoch 4/60\n","14/14 [==============================] - 0s 14ms/step - loss: 144.4705 - val_loss: 69.5127\n","Epoch 5/60\n","14/14 [==============================] - 0s 12ms/step - loss: 138.3742 - val_loss: 68.4657\n","Epoch 6/60\n","14/14 [==============================] - 0s 13ms/step - loss: 132.6785 - val_loss: 67.3151\n","Epoch 7/60\n","14/14 [==============================] - 0s 12ms/step - loss: 127.7456 - val_loss: 66.3227\n","Epoch 8/60\n","14/14 [==============================] - 0s 13ms/step - loss: 123.3114 - val_loss: 63.1931\n","Epoch 9/60\n","14/14 [==============================] - 0s 12ms/step - loss: 117.3622 - val_loss: 61.3091\n","Epoch 10/60\n","14/14 [==============================] - 0s 13ms/step - loss: 112.7723 - val_loss: 56.8394\n","Epoch 11/60\n","14/14 [==============================] - 0s 14ms/step - loss: 106.5201 - val_loss: 52.4467\n","Epoch 12/60\n","14/14 [==============================] - 0s 13ms/step - loss: 100.5081 - val_loss: 47.0681\n","Epoch 13/60\n","14/14 [==============================] - 0s 14ms/step - loss: 96.1052 - val_loss: 42.7968\n","Epoch 14/60\n","14/14 [==============================] - 0s 13ms/step - loss: 91.2342 - val_loss: 37.8248\n","Epoch 15/60\n","14/14 [==============================] - 0s 13ms/step - loss: 84.9986 - val_loss: 34.4168\n","Epoch 16/60\n","14/14 [==============================] - 0s 13ms/step - loss: 81.4307 - val_loss: 30.6531\n","Epoch 17/60\n","14/14 [==============================] - 0s 14ms/step - loss: 78.0505 - val_loss: 31.2693\n","Epoch 18/60\n","14/14 [==============================] - 0s 13ms/step - loss: 74.8366 - val_loss: 29.3795\n","Epoch 19/60\n","14/14 [==============================] - 0s 12ms/step - loss: 70.5665 - val_loss: 25.3818\n","Epoch 20/60\n","14/14 [==============================] - 0s 12ms/step - loss: 67.2031 - val_loss: 23.5090\n","Epoch 21/60\n","14/14 [==============================] - 0s 13ms/step - loss: 64.4354 - val_loss: 20.5062\n","Epoch 22/60\n","14/14 [==============================] - 0s 12ms/step - loss: 61.7006 - val_loss: 18.7569\n","Epoch 23/60\n","14/14 [==============================] - 0s 13ms/step - loss: 59.0127 - val_loss: 18.8391\n","Epoch 24/60\n","14/14 [==============================] - 0s 13ms/step - loss: 55.7662 - val_loss: 20.3520\n","Epoch 25/60\n","14/14 [==============================] - 0s 13ms/step - loss: 53.5579 - val_loss: 15.6650\n","Epoch 26/60\n","14/14 [==============================] - 0s 13ms/step - loss: 51.1841 - val_loss: 14.6539\n","Epoch 27/60\n","14/14 [==============================] - 0s 13ms/step - loss: 49.6901 - val_loss: 16.6123\n","Epoch 28/60\n","14/14 [==============================] - 0s 14ms/step - loss: 46.2205 - val_loss: 12.9130\n","Epoch 29/60\n","14/14 [==============================] - 0s 13ms/step - loss: 43.6610 - val_loss: 11.4620\n","Epoch 30/60\n","14/14 [==============================] - 0s 13ms/step - loss: 41.5796 - val_loss: 11.6141\n","Epoch 31/60\n","14/14 [==============================] - 0s 13ms/step - loss: 40.4016 - val_loss: 10.3761\n","Epoch 32/60\n","14/14 [==============================] - 0s 13ms/step - loss: 39.2834 - val_loss: 9.8918\n","Epoch 33/60\n","14/14 [==============================] - 0s 12ms/step - loss: 36.6965 - val_loss: 9.0614\n","Epoch 34/60\n","14/14 [==============================] - 0s 14ms/step - loss: 34.7194 - val_loss: 8.0530\n","Epoch 35/60\n","14/14 [==============================] - 0s 13ms/step - loss: 32.5327 - val_loss: 7.0865\n","Epoch 36/60\n","14/14 [==============================] - 0s 19ms/step - loss: 31.8884 - val_loss: 6.1474\n","Epoch 37/60\n","14/14 [==============================] - 0s 19ms/step - loss: 30.0717 - val_loss: 5.7293\n","Epoch 38/60\n","14/14 [==============================] - 0s 20ms/step - loss: 29.1191 - val_loss: 5.4580\n","Epoch 39/60\n","14/14 [==============================] - 0s 19ms/step - loss: 27.6560 - val_loss: 6.1478\n","Epoch 40/60\n","14/14 [==============================] - 0s 19ms/step - loss: 27.3569 - val_loss: 6.2015\n","Epoch 41/60\n","14/14 [==============================] - 0s 20ms/step - loss: 26.2912 - val_loss: 6.3810\n","Epoch 42/60\n","14/14 [==============================] - 0s 19ms/step - loss: 25.5155 - val_loss: 4.0649\n","Epoch 43/60\n","14/14 [==============================] - 0s 19ms/step - loss: 24.2046 - val_loss: 3.6963\n","Epoch 44/60\n","14/14 [==============================] - 0s 19ms/step - loss: 23.3426 - val_loss: 4.3118\n","Epoch 45/60\n","14/14 [==============================] - 0s 19ms/step - loss: 22.6158 - val_loss: 4.8594\n","Epoch 46/60\n","14/14 [==============================] - 0s 20ms/step - loss: 21.3553 - val_loss: 2.9526\n","Epoch 47/60\n","14/14 [==============================] - 0s 19ms/step - loss: 20.5205 - val_loss: 2.9117\n","Epoch 48/60\n","14/14 [==============================] - 0s 20ms/step - loss: 20.2659 - val_loss: 2.7879\n","Epoch 49/60\n","14/14 [==============================] - 0s 17ms/step - loss: 19.4432 - val_loss: 2.3158\n","Epoch 50/60\n","14/14 [==============================] - 0s 13ms/step - loss: 18.5390 - val_loss: 2.0696\n","Epoch 51/60\n","14/14 [==============================] - 0s 13ms/step - loss: 18.3767 - val_loss: 2.1079\n","Epoch 52/60\n","14/14 [==============================] - 0s 14ms/step - loss: 18.7942 - val_loss: 4.2976\n","Epoch 53/60\n","14/14 [==============================] - 0s 12ms/step - loss: 17.9961 - val_loss: 3.8252\n","Epoch 54/60\n","14/14 [==============================] - 0s 13ms/step - loss: 17.7408 - val_loss: 4.6102\n","Epoch 55/60\n","14/14 [==============================] - 0s 14ms/step - loss: 16.7167 - val_loss: 3.4264\n","Epoch 56/60\n","14/14 [==============================] - 0s 14ms/step - loss: 16.1293 - val_loss: 1.6448\n","Epoch 57/60\n","14/14 [==============================] - 0s 13ms/step - loss: 15.5960 - val_loss: 1.8038\n","Epoch 58/60\n","14/14 [==============================] - 0s 13ms/step - loss: 14.8530 - val_loss: 1.0526\n","Epoch 59/60\n","14/14 [==============================] - 0s 12ms/step - loss: 14.5437 - val_loss: 2.3039\n","Epoch 60/60\n","14/14 [==============================] - 0s 13ms/step - loss: 14.3281 - val_loss: 2.7093\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:6 out of the last 11 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7c2636bc8790> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 1s 8ms/step\n","Test MAE: 1.2621843141193192\n","Test MSE: 2.7092884882661976\n","Test RMSE: 1.6459916428299985\n"]}]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/GRU_GVI_diff.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nij8UCq9pZKM","executionInfo":{"status":"ok","timestamp":1707931882341,"user_tz":-360,"elapsed":587,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"8c6bcee2-d436-4fc4-d408-7921e1594c68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["#GRU\n","#epoch 100, batch size 16\n","#80-20 split\n","#Test MAE: 0.7741214007449647\n","#Test MSE: 0.9600302363935391\n","#Test RMSE: 0.979811326936742"],"metadata":{"id":"tv4eWFqmjvQa"}},{"cell_type":"code","source":["from keras.layers import Input, concatenate, Flatten, Dense, Dropout, GRU\n","from keras.models import Model\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","import numpy as np\n","import pandas as pd\n","from keras.models import Sequential\n","from keras.layers import GRU, Dense\n","\n","# Load and prepare data (replace with your file path)\n","#data = pd.read_csv(\"/content/drive/MyDrive/Prediction_Alisha/CSV Files/FinalGVI_YearWise.csv\")\n","\n","# Split data into training and testing sets\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Assuming input sequence length and features\n","sequence_length = 10  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Create input and output sequences for GRU\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","print(\"X_test shape before reshaping:\", X_test.shape)\n","\n","# Define the GRU model\n","model = Sequential()\n","model.add(GRU(units=50, return_sequences=True, input_shape=(sequence_length, features)))\n","model.add(GRU(units=50))\n","model.add(Dense(1))  # Single output neuron for GVI prediction\n","\n","# Compile the model with a mean squared error loss function\n","model.compile(loss='mean_squared_error', optimizer='adam')\n","\n","# Train the model\n","history = model.fit(X_train, y_train, epochs=100, batch_size=16, validation_data=(X_test, y_test))\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D4G64ciDi8ej","executionInfo":{"status":"ok","timestamp":1708030520490,"user_tz":-360,"elapsed":16169,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"683b7725-e271-4612-eb6d-b543afe56b27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (222, 10, 3)\n","X_test shape before reshaping: (48, 10, 3)\n","Epoch 1/100\n","14/14 [==============================] - 4s 52ms/step - loss: 175.7115 - val_loss: 68.8572\n","Epoch 2/100\n","14/14 [==============================] - 0s 8ms/step - loss: 159.2909 - val_loss: 69.4303\n","Epoch 3/100\n","14/14 [==============================] - 0s 7ms/step - loss: 151.4383 - val_loss: 73.2675\n","Epoch 4/100\n","14/14 [==============================] - 0s 7ms/step - loss: 146.1482 - val_loss: 70.6357\n","Epoch 5/100\n","14/14 [==============================] - 0s 9ms/step - loss: 141.4203 - val_loss: 68.0203\n","Epoch 6/100\n","14/14 [==============================] - 0s 9ms/step - loss: 136.4074 - val_loss: 66.3584\n","Epoch 7/100\n","14/14 [==============================] - 0s 9ms/step - loss: 131.2162 - val_loss: 66.0424\n","Epoch 8/100\n","14/14 [==============================] - 0s 8ms/step - loss: 125.8328 - val_loss: 62.1541\n","Epoch 9/100\n","14/14 [==============================] - 0s 8ms/step - loss: 120.3175 - val_loss: 60.2842\n","Epoch 10/100\n","14/14 [==============================] - 0s 8ms/step - loss: 114.2838 - val_loss: 54.8591\n","Epoch 11/100\n","14/14 [==============================] - 0s 8ms/step - loss: 108.7695 - val_loss: 51.6564\n","Epoch 12/100\n","14/14 [==============================] - 0s 8ms/step - loss: 103.4539 - val_loss: 46.1543\n","Epoch 13/100\n","14/14 [==============================] - 0s 8ms/step - loss: 97.8813 - val_loss: 43.3114\n","Epoch 14/100\n","14/14 [==============================] - 0s 8ms/step - loss: 94.1078 - val_loss: 40.3179\n","Epoch 15/100\n","14/14 [==============================] - 0s 7ms/step - loss: 89.5015 - val_loss: 36.9217\n","Epoch 16/100\n","14/14 [==============================] - 0s 8ms/step - loss: 85.3770 - val_loss: 33.1800\n","Epoch 17/100\n","14/14 [==============================] - 0s 8ms/step - loss: 83.0656 - val_loss: 30.1381\n","Epoch 18/100\n","14/14 [==============================] - 0s 8ms/step - loss: 78.8037 - val_loss: 28.4228\n","Epoch 19/100\n","14/14 [==============================] - 0s 7ms/step - loss: 75.3654 - val_loss: 25.5908\n","Epoch 20/100\n","14/14 [==============================] - 0s 8ms/step - loss: 74.3158 - val_loss: 26.2565\n","Epoch 21/100\n","14/14 [==============================] - 0s 8ms/step - loss: 70.3983 - val_loss: 23.7821\n","Epoch 22/100\n","14/14 [==============================] - 0s 7ms/step - loss: 66.7479 - val_loss: 21.9464\n","Epoch 23/100\n","14/14 [==============================] - 0s 7ms/step - loss: 62.9926 - val_loss: 20.6049\n","Epoch 24/100\n","14/14 [==============================] - 0s 7ms/step - loss: 60.7485 - val_loss: 18.6466\n","Epoch 25/100\n","14/14 [==============================] - 0s 7ms/step - loss: 57.9760 - val_loss: 17.3192\n","Epoch 26/100\n","14/14 [==============================] - 0s 8ms/step - loss: 56.4200 - val_loss: 16.4985\n","Epoch 27/100\n","14/14 [==============================] - 0s 7ms/step - loss: 52.7047 - val_loss: 15.7520\n","Epoch 28/100\n","14/14 [==============================] - 0s 7ms/step - loss: 50.0083 - val_loss: 13.8160\n","Epoch 29/100\n","14/14 [==============================] - 0s 7ms/step - loss: 47.3342 - val_loss: 13.1985\n","Epoch 30/100\n","14/14 [==============================] - 0s 8ms/step - loss: 45.0143 - val_loss: 12.2370\n","Epoch 31/100\n","14/14 [==============================] - 0s 7ms/step - loss: 44.7914 - val_loss: 12.9580\n","Epoch 32/100\n","14/14 [==============================] - 0s 7ms/step - loss: 41.3937 - val_loss: 10.6732\n","Epoch 33/100\n","14/14 [==============================] - 0s 8ms/step - loss: 41.0766 - val_loss: 10.9284\n","Epoch 34/100\n","14/14 [==============================] - 0s 7ms/step - loss: 38.7182 - val_loss: 9.3874\n","Epoch 35/100\n","14/14 [==============================] - 0s 7ms/step - loss: 37.3757 - val_loss: 8.7023\n","Epoch 36/100\n","14/14 [==============================] - 0s 9ms/step - loss: 35.6475 - val_loss: 8.1952\n","Epoch 37/100\n","14/14 [==============================] - 0s 7ms/step - loss: 33.5413 - val_loss: 6.8513\n","Epoch 38/100\n","14/14 [==============================] - 0s 8ms/step - loss: 31.9249 - val_loss: 6.4439\n","Epoch 39/100\n","14/14 [==============================] - 0s 8ms/step - loss: 30.2755 - val_loss: 5.7195\n","Epoch 40/100\n","14/14 [==============================] - 0s 9ms/step - loss: 28.8684 - val_loss: 5.2119\n","Epoch 41/100\n","14/14 [==============================] - 0s 8ms/step - loss: 27.7308 - val_loss: 4.7310\n","Epoch 42/100\n","14/14 [==============================] - 0s 7ms/step - loss: 26.6364 - val_loss: 4.7635\n","Epoch 43/100\n","14/14 [==============================] - 0s 7ms/step - loss: 25.6021 - val_loss: 4.9805\n","Epoch 44/100\n","14/14 [==============================] - 0s 7ms/step - loss: 25.0941 - val_loss: 5.5691\n","Epoch 45/100\n","14/14 [==============================] - 0s 9ms/step - loss: 24.8544 - val_loss: 6.8117\n","Epoch 46/100\n","14/14 [==============================] - 0s 9ms/step - loss: 23.6001 - val_loss: 3.5452\n","Epoch 47/100\n","14/14 [==============================] - 0s 11ms/step - loss: 22.4255 - val_loss: 3.5639\n","Epoch 48/100\n","14/14 [==============================] - 0s 11ms/step - loss: 21.4074 - val_loss: 3.0366\n","Epoch 49/100\n","14/14 [==============================] - 0s 10ms/step - loss: 20.7420 - val_loss: 3.0135\n","Epoch 50/100\n","14/14 [==============================] - 0s 10ms/step - loss: 20.6291 - val_loss: 3.6449\n","Epoch 51/100\n","14/14 [==============================] - 0s 10ms/step - loss: 19.5306 - val_loss: 2.5351\n","Epoch 52/100\n","14/14 [==============================] - 0s 12ms/step - loss: 18.5339 - val_loss: 2.2750\n","Epoch 53/100\n","14/14 [==============================] - 0s 10ms/step - loss: 18.4246 - val_loss: 3.2448\n","Epoch 54/100\n","14/14 [==============================] - 0s 10ms/step - loss: 17.8176 - val_loss: 2.0760\n","Epoch 55/100\n","14/14 [==============================] - 0s 11ms/step - loss: 17.5283 - val_loss: 2.0971\n","Epoch 56/100\n","14/14 [==============================] - 0s 10ms/step - loss: 17.0774 - val_loss: 3.4410\n","Epoch 57/100\n","14/14 [==============================] - 0s 10ms/step - loss: 16.7883 - val_loss: 2.9764\n","Epoch 58/100\n","14/14 [==============================] - 0s 9ms/step - loss: 16.2010 - val_loss: 1.8827\n","Epoch 59/100\n","14/14 [==============================] - 0s 10ms/step - loss: 15.7010 - val_loss: 2.0890\n","Epoch 60/100\n","14/14 [==============================] - 0s 11ms/step - loss: 15.3217 - val_loss: 1.8868\n","Epoch 61/100\n","14/14 [==============================] - 0s 10ms/step - loss: 14.9014 - val_loss: 1.0180\n","Epoch 62/100\n","14/14 [==============================] - 0s 11ms/step - loss: 14.1140 - val_loss: 0.8546\n","Epoch 63/100\n","14/14 [==============================] - 0s 11ms/step - loss: 13.9035 - val_loss: 1.0681\n","Epoch 64/100\n","14/14 [==============================] - 0s 10ms/step - loss: 13.6664 - val_loss: 1.0142\n","Epoch 65/100\n","14/14 [==============================] - 0s 7ms/step - loss: 13.6651 - val_loss: 0.8565\n","Epoch 66/100\n","14/14 [==============================] - 0s 8ms/step - loss: 13.2629 - val_loss: 0.6504\n","Epoch 67/100\n","14/14 [==============================] - 0s 8ms/step - loss: 12.7615 - val_loss: 0.6978\n","Epoch 68/100\n","14/14 [==============================] - 0s 7ms/step - loss: 12.7449 - val_loss: 0.5996\n","Epoch 69/100\n","14/14 [==============================] - 0s 7ms/step - loss: 12.0014 - val_loss: 1.3560\n","Epoch 70/100\n","14/14 [==============================] - 0s 8ms/step - loss: 12.0877 - val_loss: 0.7123\n","Epoch 71/100\n","14/14 [==============================] - 0s 8ms/step - loss: 12.0078 - val_loss: 0.4720\n","Epoch 72/100\n","14/14 [==============================] - 0s 8ms/step - loss: 11.4488 - val_loss: 0.4991\n","Epoch 73/100\n","14/14 [==============================] - 0s 7ms/step - loss: 11.4100 - val_loss: 0.6361\n","Epoch 74/100\n","14/14 [==============================] - 0s 8ms/step - loss: 11.0805 - val_loss: 0.8298\n","Epoch 75/100\n","14/14 [==============================] - 0s 7ms/step - loss: 11.1599 - val_loss: 0.8409\n","Epoch 76/100\n","14/14 [==============================] - 0s 9ms/step - loss: 11.1475 - val_loss: 0.6665\n","Epoch 77/100\n","14/14 [==============================] - 0s 7ms/step - loss: 11.0325 - val_loss: 0.7634\n","Epoch 78/100\n","14/14 [==============================] - 0s 7ms/step - loss: 11.0452 - val_loss: 0.5104\n","Epoch 79/100\n","14/14 [==============================] - 0s 8ms/step - loss: 11.0870 - val_loss: 1.1712\n","Epoch 80/100\n","14/14 [==============================] - 0s 9ms/step - loss: 10.5591 - val_loss: 1.1533\n","Epoch 81/100\n","14/14 [==============================] - 0s 8ms/step - loss: 10.4615 - val_loss: 2.0645\n","Epoch 82/100\n","14/14 [==============================] - 0s 7ms/step - loss: 10.3237 - val_loss: 1.5507\n","Epoch 83/100\n","14/14 [==============================] - 0s 8ms/step - loss: 10.2635 - val_loss: 0.4634\n","Epoch 84/100\n","14/14 [==============================] - 0s 7ms/step - loss: 9.9551 - val_loss: 0.3438\n","Epoch 85/100\n","14/14 [==============================] - 0s 8ms/step - loss: 9.3789 - val_loss: 0.2789\n","Epoch 86/100\n","14/14 [==============================] - 0s 7ms/step - loss: 9.7374 - val_loss: 0.4195\n","Epoch 87/100\n","14/14 [==============================] - 0s 8ms/step - loss: 9.6275 - val_loss: 0.6693\n","Epoch 88/100\n","14/14 [==============================] - 0s 7ms/step - loss: 9.3177 - val_loss: 0.7445\n","Epoch 89/100\n","14/14 [==============================] - 0s 8ms/step - loss: 9.3552 - val_loss: 1.2002\n","Epoch 90/100\n","14/14 [==============================] - 0s 7ms/step - loss: 9.0866 - val_loss: 0.8156\n","Epoch 91/100\n","14/14 [==============================] - 0s 7ms/step - loss: 9.1969 - val_loss: 0.5426\n","Epoch 92/100\n","14/14 [==============================] - 0s 6ms/step - loss: 8.8771 - val_loss: 0.5699\n","Epoch 93/100\n","14/14 [==============================] - 0s 8ms/step - loss: 8.9896 - val_loss: 0.4375\n","Epoch 94/100\n","14/14 [==============================] - 0s 9ms/step - loss: 8.6980 - val_loss: 0.3317\n","Epoch 95/100\n","14/14 [==============================] - 0s 8ms/step - loss: 8.5411 - val_loss: 0.5021\n","Epoch 96/100\n","14/14 [==============================] - 0s 7ms/step - loss: 8.6221 - val_loss: 0.7575\n","Epoch 97/100\n","14/14 [==============================] - 0s 7ms/step - loss: 8.3912 - val_loss: 1.4207\n","Epoch 98/100\n","14/14 [==============================] - 0s 8ms/step - loss: 8.4471 - val_loss: 2.2960\n","Epoch 99/100\n","14/14 [==============================] - 0s 8ms/step - loss: 8.6927 - val_loss: 1.3925\n","Epoch 100/100\n","14/14 [==============================] - 0s 8ms/step - loss: 8.6696 - val_loss: 0.9600\n","2/2 [==============================] - 1s 5ms/step\n","Test MAE: 0.7741214007449647\n","Test MSE: 0.9600302363935391\n","Test RMSE: 0.979811326936742\n"]}]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/GRU_GVI_diff.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HmbQ7j9bjgDf","executionInfo":{"status":"ok","timestamp":1708030574766,"user_tz":-360,"elapsed":573,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"2774549c-a56a-4f4e-dc17-840c7e51be47"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["LSTM EPOCH 20,40,60,80,100"],"metadata":{"id":"TlJN0DWEymuQ"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from keras.models import Sequential\n","from keras.layers import LSTM, Dense\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","# Load your data (replace this with your data loading step)\n","# data = pd.read_csv(\"/path/to/your/data.csv\")\n","\n","# Assuming data preprocessing steps here\n","# Split data into training and testing sets\n","train_size = int(len(data) * 0.8)\n","train_data = data.iloc[:train_size]\n","test_data = data.iloc[train_size:]\n","\n","# Function to prepare sequences for GRU\n","def prepare_sequences(data, sequence_length):\n","    X, y = [], []\n","    for i in range(len(data) - sequence_length):\n","        X.append(data.iloc[i:i+sequence_length, :-1].values)\n","        y.append(data.iloc[i+sequence_length, -1])\n","    return np.array(X), np.array(y)\n","\n","# Define sequence length and number of features\n","sequence_length = 10\n","n_features = len(data.columns) - 1  # Number of features excluding the target column\n","\n","# Prepare training and testing sequences\n","X_train, y_train = prepare_sequences(train_data, sequence_length)\n","X_test, y_test = prepare_sequences(test_data, sequence_length)\n","\n","# Build and train the GRU model\n","def train_lstm_model(X_train, y_train, X_test, y_test, epochs):\n","\n","    model = Sequential()\n","    model.add(LSTM(units=50, return_sequences=True, input_shape=(sequence_length, n_features)))  # Adjust units as needed\n","    model.add(LSTM(units=50))\n","    model.add(Dense(1))  # Single output neuron for GVI prediction\n","    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","    history = model.fit(X_train, y_train, epochs=epochs, batch_size=16, validation_data=(X_test, y_test), verbose=0)\n","\n","    return model, history\n"],"metadata":{"id":"nnRDFwn8yqvo","executionInfo":{"status":"ok","timestamp":1714227294997,"user_tz":-360,"elapsed":1787,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","# Initialize lists to store MSE and MAE for each epoch\n","mse_values = []\n","mae_values = []\n","\n","for epochs in epochs_list:\n","    # Train model for the current number of epochs\n","    model, history = train_lstm_model(X_train, y_train, X_test, y_test, epochs)\n","\n","    # Predict using the trained model\n","    y_pred = model.predict(X_test)\n","\n","    # Calculate MSE and MAE\n","    mse = mean_squared_error(y_test, y_pred)\n","    mae = mean_absolute_error(y_test, y_pred)\n","\n","    # Append MSE and MAE to lists\n","    mse_values.append(mse)\n","    mae_values.append(mae)\n","\n","# Create a DataFrame to store results\n","results_df = pd.DataFrame({\n","    'Epochs': epochs_list,\n","    'MSE': mse_values,\n","    'MAE': mae_values\n","})\n","\n","# Print the DataFrame containing MSE and MAE values\n","print(\"DataFrame with MSE and MAE for Different Numbers of Epochs (LSTM):\")\n","print(results_df)\n","\n","# Plot the mean losses\n","plt.figure(figsize=(10, 6))\n","plt.plot(mean_train_loss, label='Mean Train Loss', linestyle='--')\n","plt.plot(mean_test_loss, label='Mean Test Loss', linestyle='-')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Mean Train Loss vs. Mean Test Loss for Different Epochs (LSTM)')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":772},"id":"S_AbDO16y-CA","executionInfo":{"status":"ok","timestamp":1714228192718,"user_tz":-360,"elapsed":84249,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}},"outputId":"5231975f-9192-4f92-d9b3-7e8d4d1dd374"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 1s 6ms/step\n","2/2 [==============================] - 1s 7ms/step\n","2/2 [==============================] - 1s 12ms/step\n","2/2 [==============================] - 1s 7ms/step\n","2/2 [==============================] - 1s 12ms/step\n","DataFrame with MSE and MAE for Different Numbers of Epochs (LSTM):\n","   Epochs        MSE       MAE\n","0      20  43.952361  5.312340\n","1      40  10.602046  2.560519\n","2      60  10.739676  2.452619\n","3      80   1.209357  0.874088\n","4     100   0.514297  0.466435\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#LSTM GVI DIFFERENCE\n","#epoch 100 batch size 16\n","# 80-20 split\n","#Test MAE: 0.5764419666181008\n","#Test MSE: 0.6216286204286822\n","#Test RMSE: 0.7884342841535255"],"metadata":{"id":"k2G5UdGPjyyK"}},{"cell_type":"code","source":["import pandas as pd\n","from keras.models import Sequential\n","from keras.layers import LSTM, Dense\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","\n","\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Assuming input sequence length and features\n","sequence_length = 1  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Create input and output sequences for GRU\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","\n","\n","\n","# Define the LSTM model\n","model = Sequential()\n","model.add(LSTM(units=50, return_sequences=True, input_shape=(sequence_length, features)))  # Adjust units as needed\n","model.add(LSTM(units=50))\n","model.add(Dense(1))  # Single output neuron for GVI prediction\n","\n","# Compile the model\n","#model.compile(loss='mean_squared_error', optimizer='adam')\n","model.compile(loss=['mean_squared_error', 'mean_absolute_error'], optimizer='adam')\n","\n","\n","# Train the model\n","model.fit(X_train, y_train, epochs=100, batch_size=4, validation_data=(X_test, y_test))  # Adjust epochs and batch size\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ppvFg6QVj19I","executionInfo":{"status":"ok","timestamp":1708110316072,"user_tz":-360,"elapsed":51829,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"136415c8-b99c-4364-e293-dcda92f799f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (231, 1, 3)\n","Epoch 1/100\n","58/58 [==============================] - 9s 21ms/step - loss: 178.7095 - val_loss: 74.0465\n","Epoch 2/100\n","58/58 [==============================] - 0s 5ms/step - loss: 172.6311 - val_loss: 70.7921\n","Epoch 3/100\n","58/58 [==============================] - 0s 6ms/step - loss: 161.8719 - val_loss: 68.6438\n","Epoch 4/100\n","58/58 [==============================] - 0s 6ms/step - loss: 152.0446 - val_loss: 69.8576\n","Epoch 5/100\n","58/58 [==============================] - 0s 6ms/step - loss: 145.4426 - val_loss: 70.8543\n","Epoch 6/100\n","58/58 [==============================] - 0s 6ms/step - loss: 141.0957 - val_loss: 72.6536\n","Epoch 7/100\n","58/58 [==============================] - 0s 5ms/step - loss: 137.8263 - val_loss: 72.7680\n","Epoch 8/100\n","58/58 [==============================] - 0s 5ms/step - loss: 134.8963 - val_loss: 74.9946\n","Epoch 9/100\n","58/58 [==============================] - 0s 5ms/step - loss: 131.7292 - val_loss: 76.0994\n","Epoch 10/100\n","58/58 [==============================] - 0s 6ms/step - loss: 129.1139 - val_loss: 77.6951\n","Epoch 11/100\n","58/58 [==============================] - 0s 6ms/step - loss: 126.8175 - val_loss: 77.5445\n","Epoch 12/100\n","58/58 [==============================] - 0s 6ms/step - loss: 125.0799 - val_loss: 80.2784\n","Epoch 13/100\n","58/58 [==============================] - 0s 6ms/step - loss: 122.4824 - val_loss: 81.9312\n","Epoch 14/100\n","58/58 [==============================] - 0s 8ms/step - loss: 120.5176 - val_loss: 83.7596\n","Epoch 15/100\n","58/58 [==============================] - 0s 8ms/step - loss: 118.6848 - val_loss: 84.6960\n","Epoch 16/100\n","58/58 [==============================] - 0s 8ms/step - loss: 116.7348 - val_loss: 86.1046\n","Epoch 17/100\n","58/58 [==============================] - 0s 7ms/step - loss: 114.8735 - val_loss: 87.7954\n","Epoch 18/100\n","58/58 [==============================] - 0s 8ms/step - loss: 113.6313 - val_loss: 89.0216\n","Epoch 19/100\n","58/58 [==============================] - 0s 8ms/step - loss: 111.6368 - val_loss: 92.2542\n","Epoch 20/100\n","58/58 [==============================] - 0s 8ms/step - loss: 110.9442 - val_loss: 89.0908\n","Epoch 21/100\n","58/58 [==============================] - 0s 7ms/step - loss: 108.6778 - val_loss: 93.1264\n","Epoch 22/100\n","58/58 [==============================] - 0s 5ms/step - loss: 108.6861 - val_loss: 92.8945\n","Epoch 23/100\n","58/58 [==============================] - 0s 5ms/step - loss: 106.8135 - val_loss: 89.9379\n","Epoch 24/100\n","58/58 [==============================] - 0s 6ms/step - loss: 104.4641 - val_loss: 91.4298\n","Epoch 25/100\n","58/58 [==============================] - 0s 6ms/step - loss: 102.9558 - val_loss: 94.2105\n","Epoch 26/100\n","58/58 [==============================] - 0s 6ms/step - loss: 100.9241 - val_loss: 92.3325\n","Epoch 27/100\n","58/58 [==============================] - 0s 6ms/step - loss: 99.4117 - val_loss: 92.3566\n","Epoch 28/100\n","58/58 [==============================] - 0s 6ms/step - loss: 98.1634 - val_loss: 91.2855\n","Epoch 29/100\n","58/58 [==============================] - 0s 5ms/step - loss: 97.4872 - val_loss: 94.4653\n","Epoch 30/100\n","58/58 [==============================] - 0s 6ms/step - loss: 95.6835 - val_loss: 93.8084\n","Epoch 31/100\n","58/58 [==============================] - 0s 6ms/step - loss: 93.9656 - val_loss: 95.1087\n","Epoch 32/100\n","58/58 [==============================] - 0s 5ms/step - loss: 91.7381 - val_loss: 96.7113\n","Epoch 33/100\n","58/58 [==============================] - 0s 6ms/step - loss: 90.0655 - val_loss: 94.4013\n","Epoch 34/100\n","58/58 [==============================] - 0s 6ms/step - loss: 88.6641 - val_loss: 96.8489\n","Epoch 35/100\n","58/58 [==============================] - 0s 5ms/step - loss: 87.6578 - val_loss: 96.9442\n","Epoch 36/100\n","58/58 [==============================] - 0s 5ms/step - loss: 86.3515 - val_loss: 96.2103\n","Epoch 37/100\n","58/58 [==============================] - 0s 6ms/step - loss: 84.5135 - val_loss: 93.9359\n","Epoch 38/100\n","58/58 [==============================] - 0s 5ms/step - loss: 83.2548 - val_loss: 91.3002\n","Epoch 39/100\n","58/58 [==============================] - 0s 6ms/step - loss: 80.0832 - val_loss: 94.5578\n","Epoch 40/100\n","58/58 [==============================] - 0s 5ms/step - loss: 80.2992 - val_loss: 96.9666\n","Epoch 41/100\n","58/58 [==============================] - 0s 5ms/step - loss: 79.0204 - val_loss: 92.0481\n","Epoch 42/100\n","58/58 [==============================] - 0s 6ms/step - loss: 77.6948 - val_loss: 91.0992\n","Epoch 43/100\n","58/58 [==============================] - 0s 6ms/step - loss: 75.1376 - val_loss: 92.3846\n","Epoch 44/100\n","58/58 [==============================] - 0s 5ms/step - loss: 73.6698 - val_loss: 92.2577\n","Epoch 45/100\n","58/58 [==============================] - 0s 6ms/step - loss: 71.5495 - val_loss: 93.3045\n","Epoch 46/100\n","58/58 [==============================] - 0s 6ms/step - loss: 71.0561 - val_loss: 91.6595\n","Epoch 47/100\n","58/58 [==============================] - 0s 6ms/step - loss: 70.9004 - val_loss: 89.9598\n","Epoch 48/100\n","58/58 [==============================] - 0s 5ms/step - loss: 68.1983 - val_loss: 87.6269\n","Epoch 49/100\n","58/58 [==============================] - 0s 5ms/step - loss: 66.6643 - val_loss: 87.4505\n","Epoch 50/100\n","58/58 [==============================] - 0s 5ms/step - loss: 65.4014 - val_loss: 89.0406\n","Epoch 51/100\n","58/58 [==============================] - 0s 6ms/step - loss: 63.8976 - val_loss: 85.7506\n","Epoch 52/100\n","58/58 [==============================] - 0s 8ms/step - loss: 62.8782 - val_loss: 87.2051\n","Epoch 53/100\n","58/58 [==============================] - 0s 8ms/step - loss: 62.7369 - val_loss: 83.2936\n","Epoch 54/100\n","58/58 [==============================] - 0s 8ms/step - loss: 60.0640 - val_loss: 83.6583\n","Epoch 55/100\n","58/58 [==============================] - 0s 8ms/step - loss: 60.9910 - val_loss: 80.4477\n","Epoch 56/100\n","58/58 [==============================] - 0s 8ms/step - loss: 57.9208 - val_loss: 78.7190\n","Epoch 57/100\n","58/58 [==============================] - 1s 9ms/step - loss: 56.2413 - val_loss: 77.5550\n","Epoch 58/100\n","58/58 [==============================] - 0s 8ms/step - loss: 54.6779 - val_loss: 78.8348\n","Epoch 59/100\n","58/58 [==============================] - 1s 9ms/step - loss: 54.1984 - val_loss: 76.5013\n","Epoch 60/100\n","58/58 [==============================] - 0s 5ms/step - loss: 52.5939 - val_loss: 76.5636\n","Epoch 61/100\n","58/58 [==============================] - 0s 6ms/step - loss: 51.8460 - val_loss: 73.8710\n","Epoch 62/100\n","58/58 [==============================] - 0s 6ms/step - loss: 51.5039 - val_loss: 71.9256\n","Epoch 63/100\n","58/58 [==============================] - 0s 5ms/step - loss: 51.4806 - val_loss: 73.6060\n","Epoch 64/100\n","58/58 [==============================] - 0s 6ms/step - loss: 49.2744 - val_loss: 68.9258\n","Epoch 65/100\n","58/58 [==============================] - 0s 6ms/step - loss: 47.7613 - val_loss: 70.1536\n","Epoch 66/100\n","58/58 [==============================] - 0s 6ms/step - loss: 48.3997 - val_loss: 72.5675\n","Epoch 67/100\n","58/58 [==============================] - 0s 6ms/step - loss: 46.0862 - val_loss: 64.2547\n","Epoch 68/100\n","58/58 [==============================] - 0s 6ms/step - loss: 44.9576 - val_loss: 68.0236\n","Epoch 69/100\n","58/58 [==============================] - 0s 5ms/step - loss: 44.6760 - val_loss: 67.2062\n","Epoch 70/100\n","58/58 [==============================] - 0s 6ms/step - loss: 44.5370 - val_loss: 64.1812\n","Epoch 71/100\n","58/58 [==============================] - 0s 6ms/step - loss: 43.6861 - val_loss: 65.3388\n","Epoch 72/100\n","58/58 [==============================] - 0s 6ms/step - loss: 41.6837 - val_loss: 63.8482\n","Epoch 73/100\n","58/58 [==============================] - 0s 6ms/step - loss: 41.6408 - val_loss: 62.7761\n","Epoch 74/100\n","58/58 [==============================] - 0s 6ms/step - loss: 39.1949 - val_loss: 62.4513\n","Epoch 75/100\n","58/58 [==============================] - 0s 6ms/step - loss: 39.2887 - val_loss: 60.9328\n","Epoch 76/100\n","58/58 [==============================] - 0s 6ms/step - loss: 37.6258 - val_loss: 55.5935\n","Epoch 77/100\n","58/58 [==============================] - 0s 6ms/step - loss: 38.2480 - val_loss: 59.7876\n","Epoch 78/100\n","58/58 [==============================] - 0s 7ms/step - loss: 36.7356 - val_loss: 55.1414\n","Epoch 79/100\n","58/58 [==============================] - 0s 6ms/step - loss: 35.8882 - val_loss: 54.9919\n","Epoch 80/100\n","58/58 [==============================] - 0s 5ms/step - loss: 37.1255 - val_loss: 57.4229\n","Epoch 81/100\n","58/58 [==============================] - 0s 5ms/step - loss: 36.4946 - val_loss: 50.8669\n","Epoch 82/100\n","58/58 [==============================] - 0s 6ms/step - loss: 35.5859 - val_loss: 53.1895\n","Epoch 83/100\n","58/58 [==============================] - 0s 6ms/step - loss: 34.0667 - val_loss: 51.8447\n","Epoch 84/100\n","58/58 [==============================] - 0s 5ms/step - loss: 34.9358 - val_loss: 51.7754\n","Epoch 85/100\n","58/58 [==============================] - 0s 5ms/step - loss: 33.4420 - val_loss: 49.9929\n","Epoch 86/100\n","58/58 [==============================] - 0s 5ms/step - loss: 33.8153 - val_loss: 53.5037\n","Epoch 87/100\n","58/58 [==============================] - 0s 6ms/step - loss: 34.6016 - val_loss: 50.8266\n","Epoch 88/100\n","58/58 [==============================] - 0s 6ms/step - loss: 34.4227 - val_loss: 50.6845\n","Epoch 89/100\n","58/58 [==============================] - 0s 8ms/step - loss: 32.8247 - val_loss: 51.0061\n","Epoch 90/100\n","58/58 [==============================] - 0s 8ms/step - loss: 30.9193 - val_loss: 45.9233\n","Epoch 91/100\n","58/58 [==============================] - 0s 8ms/step - loss: 30.4293 - val_loss: 47.4197\n","Epoch 92/100\n","58/58 [==============================] - 0s 8ms/step - loss: 30.5981 - val_loss: 44.3161\n","Epoch 93/100\n","58/58 [==============================] - 0s 8ms/step - loss: 30.5223 - val_loss: 40.3944\n","Epoch 94/100\n","58/58 [==============================] - 1s 10ms/step - loss: 29.9988 - val_loss: 43.0193\n","Epoch 95/100\n","58/58 [==============================] - 1s 9ms/step - loss: 29.2593 - val_loss: 39.3631\n","Epoch 96/100\n","58/58 [==============================] - 0s 8ms/step - loss: 27.7847 - val_loss: 44.2801\n","Epoch 97/100\n","58/58 [==============================] - 0s 6ms/step - loss: 30.1675 - val_loss: 42.6170\n","Epoch 98/100\n","58/58 [==============================] - 0s 5ms/step - loss: 29.2151 - val_loss: 42.8152\n","Epoch 99/100\n","58/58 [==============================] - 0s 5ms/step - loss: 27.7554 - val_loss: 38.3131\n","Epoch 100/100\n","58/58 [==============================] - 0s 6ms/step - loss: 27.8511 - val_loss: 41.4867\n","2/2 [==============================] - 1s 7ms/step\n","Test MAE: 4.115482212942943\n","Test MSE: 41.48665201423066\n","Test RMSE: 6.441013275427295\n"]}]},{"cell_type":"markdown","source":["# LSTM EPOCH 60 BATCH SIZE 16\n","# Test MAE: 7.123933911846395\n","# Test MSE: 85.07465822002096\n","# Test RMSE: 9.223592479073485"],"metadata":{"id":"XlKeWfHNNh48"}},{"cell_type":"code","source":["import pandas as pd\n","from keras.models import Sequential\n","from keras.layers import LSTM, Dense\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","\n","\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Assuming input sequence length and features\n","sequence_length = 1  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Create input and output sequences for GRU\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","\n","\n","\n","# Define the LSTM model\n","model = Sequential()\n","model.add(LSTM(units=50, return_sequences=True, input_shape=(sequence_length, features)))  # Adjust units as needed\n","model.add(LSTM(units=50))\n","model.add(Dense(1))  # Single output neuron for GVI prediction\n","\n","# Compile the model\n","#model.compile(loss='mean_squared_error', optimizer='adam')\n","model.compile(loss=['mean_squared_error', 'mean_absolute_error'], optimizer='adam')\n","\n","\n","# Train the model\n","model.fit(X_train, y_train, epochs=60, batch_size=4, validation_data=(X_test, y_test))  # Adjust epochs and batch size\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d8T_zGGLNVlT","executionInfo":{"status":"ok","timestamp":1713612244403,"user_tz":-360,"elapsed":30093,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"f1dacc50-9116-4d89-f602-ec6c3f96c433"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (231, 1, 3)\n","Epoch 1/60\n","58/58 [==============================] - 9s 18ms/step - loss: 178.8689 - val_loss: 74.3466\n","Epoch 2/60\n","58/58 [==============================] - 0s 4ms/step - loss: 172.8017 - val_loss: 70.5838\n","Epoch 3/60\n","58/58 [==============================] - 0s 5ms/step - loss: 162.3485 - val_loss: 67.7587\n","Epoch 4/60\n","58/58 [==============================] - 0s 5ms/step - loss: 153.0183 - val_loss: 68.7527\n","Epoch 5/60\n","58/58 [==============================] - 0s 5ms/step - loss: 146.9235 - val_loss: 71.5528\n","Epoch 6/60\n","58/58 [==============================] - 0s 5ms/step - loss: 143.8794 - val_loss: 72.6860\n","Epoch 7/60\n","58/58 [==============================] - 0s 5ms/step - loss: 139.9850 - val_loss: 75.5550\n","Epoch 8/60\n","58/58 [==============================] - 0s 5ms/step - loss: 137.3843 - val_loss: 77.4515\n","Epoch 9/60\n","58/58 [==============================] - 0s 5ms/step - loss: 134.5007 - val_loss: 79.5994\n","Epoch 10/60\n","58/58 [==============================] - 0s 5ms/step - loss: 132.4384 - val_loss: 81.5575\n","Epoch 11/60\n","58/58 [==============================] - 0s 4ms/step - loss: 129.7789 - val_loss: 81.8378\n","Epoch 12/60\n","58/58 [==============================] - 0s 5ms/step - loss: 127.4272 - val_loss: 85.5542\n","Epoch 13/60\n","58/58 [==============================] - 0s 5ms/step - loss: 125.4282 - val_loss: 86.7305\n","Epoch 14/60\n","58/58 [==============================] - 0s 5ms/step - loss: 124.4889 - val_loss: 88.8317\n","Epoch 15/60\n","58/58 [==============================] - 0s 5ms/step - loss: 121.7904 - val_loss: 89.7885\n","Epoch 16/60\n","58/58 [==============================] - 0s 4ms/step - loss: 120.5701 - val_loss: 92.0414\n","Epoch 17/60\n","58/58 [==============================] - 0s 5ms/step - loss: 119.0126 - val_loss: 92.0211\n","Epoch 18/60\n","58/58 [==============================] - 0s 5ms/step - loss: 117.4100 - val_loss: 91.3894\n","Epoch 19/60\n","58/58 [==============================] - 0s 5ms/step - loss: 114.9341 - val_loss: 91.7699\n","Epoch 20/60\n","58/58 [==============================] - 0s 5ms/step - loss: 112.6277 - val_loss: 90.0882\n","Epoch 21/60\n","58/58 [==============================] - 0s 5ms/step - loss: 111.8944 - val_loss: 92.4089\n","Epoch 22/60\n","58/58 [==============================] - 0s 5ms/step - loss: 109.1920 - val_loss: 92.3055\n","Epoch 23/60\n","58/58 [==============================] - 0s 5ms/step - loss: 108.2205 - val_loss: 92.9368\n","Epoch 24/60\n","58/58 [==============================] - 0s 5ms/step - loss: 105.2046 - val_loss: 93.1832\n","Epoch 25/60\n","58/58 [==============================] - 0s 5ms/step - loss: 104.3264 - val_loss: 92.2797\n","Epoch 26/60\n","58/58 [==============================] - 0s 5ms/step - loss: 102.7431 - val_loss: 92.1370\n","Epoch 27/60\n","58/58 [==============================] - 0s 5ms/step - loss: 101.5354 - val_loss: 91.3740\n","Epoch 28/60\n","58/58 [==============================] - 0s 5ms/step - loss: 99.7142 - val_loss: 90.7366\n","Epoch 29/60\n","58/58 [==============================] - 0s 5ms/step - loss: 97.3936 - val_loss: 94.0649\n","Epoch 30/60\n","58/58 [==============================] - 0s 5ms/step - loss: 96.8633 - val_loss: 89.8240\n","Epoch 31/60\n","58/58 [==============================] - 0s 6ms/step - loss: 95.2152 - val_loss: 90.1845\n","Epoch 32/60\n","58/58 [==============================] - 0s 7ms/step - loss: 93.4715 - val_loss: 88.9939\n","Epoch 33/60\n","58/58 [==============================] - 0s 7ms/step - loss: 92.9213 - val_loss: 89.0104\n","Epoch 34/60\n","58/58 [==============================] - 0s 8ms/step - loss: 90.9949 - val_loss: 87.8527\n","Epoch 35/60\n","58/58 [==============================] - 0s 7ms/step - loss: 90.0429 - val_loss: 90.7201\n","Epoch 36/60\n","58/58 [==============================] - 0s 8ms/step - loss: 89.0360 - val_loss: 88.2785\n","Epoch 37/60\n","58/58 [==============================] - 0s 6ms/step - loss: 87.3569 - val_loss: 87.7944\n","Epoch 38/60\n","58/58 [==============================] - 0s 7ms/step - loss: 85.0054 - val_loss: 87.4420\n","Epoch 39/60\n","58/58 [==============================] - 0s 8ms/step - loss: 84.0875 - val_loss: 88.5445\n","Epoch 40/60\n","58/58 [==============================] - 0s 7ms/step - loss: 85.0403 - val_loss: 87.8324\n","Epoch 41/60\n","58/58 [==============================] - 0s 5ms/step - loss: 80.8621 - val_loss: 85.8724\n","Epoch 42/60\n","58/58 [==============================] - 0s 5ms/step - loss: 79.6963 - val_loss: 88.5007\n","Epoch 43/60\n","58/58 [==============================] - 0s 5ms/step - loss: 78.1387 - val_loss: 84.6964\n","Epoch 44/60\n","58/58 [==============================] - 0s 5ms/step - loss: 76.7056 - val_loss: 86.1721\n","Epoch 45/60\n","58/58 [==============================] - 0s 5ms/step - loss: 74.5939 - val_loss: 85.8019\n","Epoch 46/60\n","58/58 [==============================] - 0s 5ms/step - loss: 73.8390 - val_loss: 86.3497\n","Epoch 47/60\n","58/58 [==============================] - 0s 4ms/step - loss: 71.6070 - val_loss: 84.1964\n","Epoch 48/60\n","58/58 [==============================] - 0s 5ms/step - loss: 70.7183 - val_loss: 84.1221\n","Epoch 49/60\n","58/58 [==============================] - 0s 5ms/step - loss: 68.6712 - val_loss: 82.9445\n","Epoch 50/60\n","58/58 [==============================] - 0s 6ms/step - loss: 67.6965 - val_loss: 81.8788\n","Epoch 51/60\n","58/58 [==============================] - 0s 5ms/step - loss: 66.1328 - val_loss: 80.4305\n","Epoch 52/60\n","58/58 [==============================] - 0s 5ms/step - loss: 65.3705 - val_loss: 80.3543\n","Epoch 53/60\n","58/58 [==============================] - 0s 5ms/step - loss: 65.1612 - val_loss: 76.9713\n","Epoch 54/60\n","58/58 [==============================] - 0s 5ms/step - loss: 63.6548 - val_loss: 75.7024\n","Epoch 55/60\n","58/58 [==============================] - 0s 4ms/step - loss: 62.2668 - val_loss: 77.7708\n","Epoch 56/60\n","58/58 [==============================] - 0s 5ms/step - loss: 61.8923 - val_loss: 72.5371\n","Epoch 57/60\n","58/58 [==============================] - 0s 5ms/step - loss: 60.0941 - val_loss: 76.1863\n","Epoch 58/60\n","58/58 [==============================] - 0s 5ms/step - loss: 58.3496 - val_loss: 74.4838\n","Epoch 59/60\n","58/58 [==============================] - 0s 5ms/step - loss: 58.1332 - val_loss: 74.9318\n","Epoch 60/60\n","58/58 [==============================] - 0s 5ms/step - loss: 55.1198 - val_loss: 71.1591\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 9 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7b0561d81ea0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 1s 7ms/step\n","Test MAE: 6.288572267743579\n","Test MSE: 71.15914532006357\n","Test RMSE: 8.435588024557836\n"]}]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/Maliha Prediction/LSTM_GVI_diff.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_66iJW_illS0","executionInfo":{"status":"ok","timestamp":1708110319657,"user_tz":-360,"elapsed":524,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"e6ba950c-10d7-4a10-f97e-b8e1547a6064"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["ATT-GRU EPOCH 20,40,80,100"],"metadata":{"id":"cqiayHIL-cBw"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from keras.models import Sequential, Model\n","from keras.layers import GRU, Dense, Attention, Input\n","from keras.layers import LSTM,GRU, Dense, Attention, Input\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","from keras import layers\n","\n","# Load your data (replace this with your data loading step)\n","# data = pd.read_csv(\"/path/to/your/data.csv\")\n","\n","# Assuming data preprocessing steps here\n","# Split data into training and testing sets\n","train_size = int(len(data) * 0.8)\n","train_data = data.iloc[:train_size]\n","test_data = data.iloc[train_size:]\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Function to prepare sequences for GRU\n","def prepare_sequences(data, sequence_length):\n","    X, y = [], []\n","    for i in range(len(data) - sequence_length):\n","        X.append(data.iloc[i:i+sequence_length, :-1].values)\n","        y.append(data.iloc[i+sequence_length, -1])\n","    return np.array(X), np.array(y)\n","\n","# Define sequence length and number of features\n","sequence_length = 10\n","n_features = len(data.columns) - 1  # Number of features excluding the target column\n","\n","# Prepare training and testing sequences\n","X_train, y_train = prepare_sequences(train_data, sequence_length)\n","X_test, y_test = prepare_sequences(test_data, sequence_length)\n","\n","# Build and train the GRU model\n","def train_att_gru_model(X_train, y_train, X_test, y_test, epochs):\n","    inputs = Input(shape=(sequence_length, n_features))\n","    gru_out = GRU(units=50, return_sequences=True)(inputs)\n","    att_out = AttentionLayer()(gru_out)\n","    outputs = Dense(1)(att_out)\n","    model = Model(inputs=inputs, outputs=outputs)\n","    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","    history = model.fit(X_train, y_train, epochs=epochs, batch_size=16, validation_data=(X_test, y_test), verbose=0)\n","\n","    return model, history\n"],"metadata":{"id":"QcmqIUzc-7Nf","executionInfo":{"status":"ok","timestamp":1714228860807,"user_tz":-360,"elapsed":704,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from keras.models import Sequential, Model\n","from keras.layers import GRU, Dense, Attention, Input\n","from keras import layers\n","import tensorflow as tf\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Initialize lists to store MSE and MAE for each epoch\n","mse_values = []\n","mae_values = []\n","\n","for epochs in epochs_list:\n","    # Train model for the current number of epochs\n","    model, history = train_att_gru_model(X_train, y_train, X_test, y_test, epochs)\n","\n","    # Predict using the trained model\n","    y_pred = model.predict(X_test)\n","\n","    # Calculate MSE and MAE\n","    mse = mean_squared_error(y_test, y_pred)\n","    mae = mean_absolute_error(y_test, y_pred)\n","\n","    # Append MSE and MAE to lists\n","    mse_values.append(mse)\n","    mae_values.append(mae)\n","\n","# Create a DataFrame to store results\n","results_df = pd.DataFrame({\n","    'Epochs': epochs_list,\n","    'MSE': mse_values,\n","    'MAE': mae_values\n","})\n","\n","# Print the DataFrame containing MSE and MAE values\n","print(\"DataFrame with MSE and MAE for Different Numbers of Epochs(ATT-GRU):\")\n","print(results_df)\n","\n","# Plot the mean losses\n","plt.figure(figsize=(10, 6))\n","plt.plot(mean_train_loss, label='Mean Train Loss', linestyle='--')\n","plt.plot(mean_test_loss, label='Mean Test Loss', linestyle='-')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Mean Train Loss vs. Mean Test Loss for Different Epochs (ATT-GRU)')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"OJQkNlAu_JOb","executionInfo":{"status":"error","timestamp":1714229145786,"user_tz":-360,"elapsed":2716,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}},"outputId":"46966413-d9c2-437b-f13a-0de92d3c4c16"},"execution_count":51,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-51-e8f0a9fca5e1>\u001b[0m in \u001b[0;36m<cell line: 31>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mepochs_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m     \u001b[0;31m# Train model for the current number of epochs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_att_gru_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0;31m# Predict using the trained model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-47-075d95c407d7>\u001b[0m in \u001b[0;36mtrain_att_gru_model\u001b[0;34m(X_train, y_train, X_test, y_test, epochs)\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'adam'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mean_squared_error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m     \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhistory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1805\u001b[0m                         ):\n\u001b[1;32m   1806\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1807\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1808\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    886\u001b[0m       \u001b[0;31m# This is the first call of __call__, so we have to initialize.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    887\u001b[0m       \u001b[0minitializers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 888\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_initialize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madd_initializers_to\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitializers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    889\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m       \u001b[0;31m# At this point we know that the initialization is complete (or less\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_initialize\u001b[0;34m(self, args, kwds, add_initializers_to)\u001b[0m\n\u001b[1;32m    693\u001b[0m     )\n\u001b[1;32m    694\u001b[0m     \u001b[0;31m# Force the definition of the function for these arguments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 695\u001b[0;31m     self._concrete_variable_creation_fn = tracing_compilation.trace_function(\n\u001b[0m\u001b[1;32m    696\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    697\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mtrace_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    176\u001b[0m       \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 178\u001b[0;31m     concrete_function = _maybe_define_function(\n\u001b[0m\u001b[1;32m    179\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracing_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36m_maybe_define_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    281\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m           \u001b[0mtarget_func_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlookup_func_type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 283\u001b[0;31m         concrete_function = _create_concrete_function(\n\u001b[0m\u001b[1;32m    284\u001b[0m             \u001b[0mtarget_func_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlookup_func_context\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracing_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36m_create_concrete_function\u001b[0;34m(function_type, type_context, func_graph, tracing_options)\u001b[0m\n\u001b[1;32m    308\u001b[0m       \u001b[0mattributes_lib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDISABLE_ACD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    309\u001b[0m   )\n\u001b[0;32m--> 310\u001b[0;31m   traced_func_graph = func_graph_module.func_graph_from_py_func(\n\u001b[0m\u001b[1;32m    311\u001b[0m       \u001b[0mtracing_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m       \u001b[0mtracing_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython_function\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mfunc_graph_from_py_func\u001b[0;34m(name, python_func, args, kwargs, signature, func_graph, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, create_placeholders)\u001b[0m\n\u001b[1;32m   1057\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m     \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moriginal_func\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_decorator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munwrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpython_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1059\u001b[0;31m     \u001b[0mfunc_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpython_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfunc_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfunc_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1060\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1061\u001b[0m     \u001b[0;31m# invariant: `func_outputs` contains only Tensors, CompositeTensors,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36mwrapped_fn\u001b[0;34m(*args, **kwds)\u001b[0m\n\u001b[1;32m    596\u001b[0m         \u001b[0;31m# the function a weak reference to itself to avoid a reference cycle.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcompile_with_xla\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 598\u001b[0;31m           \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mweak_wrapped_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__wrapped__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    599\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/autograph_util.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;34m\"\"\"Calls a converted version of original_func.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m       return api.converted_call(\n\u001b[0m\u001b[1;32m     42\u001b[0m           \u001b[0moriginal_func\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    437\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    438\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 439\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconverted_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0meffective_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    440\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconverted_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0meffective_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtf__train_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    376\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_requested\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_allowlisted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 377\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_call_unconverted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    379\u001b[0m   \u001b[0;31m# internal_convert_user_code is for example turned off when issuing a dynamic\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36m_call_unconverted\u001b[0;34m(f, args, kwargs, options, update_cache)\u001b[0m\n\u001b[1;32m    458\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 460\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    462\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mstep_function\u001b[0;34m(model, iterator)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 )\n\u001b[1;32m   1383\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistribute_strategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m             outputs = reduce_per_replica(\n\u001b[1;32m   1386\u001b[0m                 \u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m   1679\u001b[0m       fn = autograph.tf_convert(\n\u001b[1;32m   1680\u001b[0m           fn, autograph_ctx.control_status_ctx(), convert_by_default=False)\n\u001b[0;32m-> 1681\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extended\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1682\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1683\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mcall_for_each_replica\u001b[0;34m(self, fn, args, kwargs)\u001b[0m\n\u001b[1;32m   3269\u001b[0m       \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3270\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_container_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3271\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3272\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3273\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36m_call_for_each_replica\u001b[0;34m(self, fn, args, kwargs)\u001b[0m\n\u001b[1;32m   4067\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4068\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mReplicaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_container_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplica_id_in_sync_group\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4069\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4070\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4071\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_reduce_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdestinations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    688\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    689\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconversion_ctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 690\u001b[0;31m           \u001b[0;32mreturn\u001b[0m \u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    691\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    692\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ag_error_metadata'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    376\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_requested\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_allowlisted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 377\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_call_unconverted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    379\u001b[0m   \u001b[0;31m# internal_convert_user_code is for example turned off when issuing a dynamic\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36m_call_unconverted\u001b[0;34m(f, args, kwargs, options, update_cache)\u001b[0m\n\u001b[1;32m    457\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 459\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    460\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mrun_step\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   1371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mdef\u001b[0m \u001b[0mrun_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m                 \u001b[0;31m# Ensure counter is updated only if `train_step` succeeds.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1375\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_dependencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_minimum_control_deps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtrain_step\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m   1152\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_target_and_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m         \u001b[0;31m# Run backwards pass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1154\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mminimize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainable_variables\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1155\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36mminimize\u001b[0;34m(self, loss, var_list, tape)\u001b[0m\n\u001b[1;32m    542\u001b[0m         \"\"\"\n\u001b[1;32m    543\u001b[0m         \u001b[0mgrads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 544\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    545\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    546\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_compute_current_learning_rate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36mapply_gradients\u001b[0;34m(self, grads_and_vars, name, skip_gradients_aggregation, **kwargs)\u001b[0m\n\u001b[1;32m   1221\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mskip_gradients_aggregation\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mexperimental_aggregate_gradients\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1222\u001b[0m             \u001b[0mgrads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maggregate_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1223\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1225\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_apply_weight_decay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36mapply_gradients\u001b[0;34m(self, grads_and_vars, name)\u001b[0m\n\u001b[1;32m    650\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_apply_weight_decay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrainable_variables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    651\u001b[0m             \u001b[0mgrads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrainable_variables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 652\u001b[0;31m             \u001b[0miteration\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_apply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    653\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    654\u001b[0m             \u001b[0;31m# Apply variable constraints after applying gradients.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36m_internal_apply_gradients\u001b[0;34m(self, grads_and_vars)\u001b[0m\n\u001b[1;32m   1251\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_apply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1252\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1253\u001b[0;31m         return tf.__internal__.distribute.interim.maybe_merge_call(\n\u001b[0m\u001b[1;32m   1254\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_distributed_apply_gradients_fn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1255\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_distribution_strategy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/merge_call_interim.py\u001b[0m in \u001b[0;36mmaybe_merge_call\u001b[0;34m(fn, strategy, *args, **kwargs)\u001b[0m\n\u001b[1;32m     49\u001b[0m   \"\"\"\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mstrategy_supports_no_merge_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstrategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     return distribute_lib.get_replica_context().merge_call(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36m_distributed_apply_gradients_fn\u001b[0;34m(self, distribution, grads_and_vars, **kwargs)\u001b[0m\n\u001b[1;32m   1343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1344\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1345\u001b[0;31m             distribution.extended.update(\n\u001b[0m\u001b[1;32m   1346\u001b[0m                 \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mapply_grad_to_update_var\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1347\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, var, fn, args, kwargs, group)\u001b[0m\n\u001b[1;32m   3013\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3014\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3015\u001b[0;31m       return self._replica_ctx_update(\n\u001b[0m\u001b[1;32m   3016\u001b[0m           var, fn, args=args, kwargs=kwargs, group=group)\n\u001b[1;32m   3017\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36m_replica_ctx_update\u001b[0;34m(self, var, fn, args, kwargs, group)\u001b[0m\n\u001b[1;32m   2892\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerged_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerged_kwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2893\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2894\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mreplica_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerge_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2895\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2896\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_gather_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdestinations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mmerge_call\u001b[0;34m(self, merge_fn, args, kwargs)\u001b[0m\n\u001b[1;32m   3484\u001b[0m     merge_fn = autograph.tf_convert(\n\u001b[1;32m   3485\u001b[0m         merge_fn, autograph_ctx.control_status_ctx(), convert_by_default=False)\n\u001b[0;32m-> 3486\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_merge_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerge_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3487\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3488\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_merge_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerge_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36m_merge_call\u001b[0;34m(self, merge_fn, args, kwargs)\u001b[0m\n\u001b[1;32m   3491\u001b[0m         _CrossReplicaThreadMode(self._strategy))  # pylint: disable=protected-access\n\u001b[1;32m   3492\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3493\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mmerge_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_strategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3494\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3495\u001b[0m       \u001b[0m_pop_per_thread_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    688\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    689\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconversion_ctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 690\u001b[0;31m           \u001b[0;32mreturn\u001b[0m \u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    691\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    692\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ag_error_metadata'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    376\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_requested\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_allowlisted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 377\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_call_unconverted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    379\u001b[0m   \u001b[0;31m# internal_convert_user_code is for example turned off when issuing a dynamic\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36m_call_unconverted\u001b[0;34m(f, args, kwargs, options, update_cache)\u001b[0m\n\u001b[1;32m    457\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 459\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    460\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mmerge_fn\u001b[0;34m(_, *merged_args, **merged_kwargs)\u001b[0m\n\u001b[1;32m   2890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2891\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmerge_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmerged_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mmerged_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2892\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerged_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerged_kwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2893\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2894\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mreplica_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerge_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, var, fn, args, kwargs, group)\u001b[0m\n\u001b[1;32m   3011\u001b[0m           fn, autograph_ctx.control_status_ctx(), convert_by_default=False)\n\u001b[1;32m   3012\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_container_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3013\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3014\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3015\u001b[0m       return self._replica_ctx_update(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36m_update\u001b[0;34m(self, var, fn, args, kwargs, group)\u001b[0m\n\u001b[1;32m   4081\u001b[0m     \u001b[0;31m# The implementations of _update() and _update_non_slot() are identical\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4082\u001b[0m     \u001b[0;31m# except _update() passes `var` as the first argument to `fn()`.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4083\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_non_slot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4084\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4085\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_update_non_slot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolocate_with\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshould_group\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36m_update_non_slot\u001b[0;34m(self, colocate_with, fn, args, kwargs, should_group)\u001b[0m\n\u001b[1;32m   4087\u001b[0m     \u001b[0;31m# once that value is used for something.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4088\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mUpdateContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolocate_with\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4089\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4090\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mshould_group\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4091\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    688\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    689\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconversion_ctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 690\u001b[0;31m           \u001b[0;32mreturn\u001b[0m \u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    691\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    692\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ag_error_metadata'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    329\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_in_allowlist_cache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m     \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Allowlisted %s: from cache'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 331\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_call_unconverted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_status_ctx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mStatus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDISABLED\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36m_call_unconverted\u001b[0;34m(f, args, kwargs, options, update_cache)\u001b[0m\n\u001b[1;32m    457\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 459\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    460\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36mapply_grad_to_update_var\u001b[0;34m(var, grad)\u001b[0m\n\u001b[1;32m   1338\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mapply_grad_to_update_var\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1339\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjit_compile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1340\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_step_xla\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_var_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1341\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1342\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    875\u001b[0m       \u001b[0;31m# In this case we have not created variables on the first call. So we can\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m       \u001b[0;31m# run the first trace but we should fail if variables are created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 877\u001b[0;31m       results = tracing_compilation.call_function(\n\u001b[0m\u001b[1;32m    878\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    879\u001b[0m       )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    130\u001b[0m   \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0margs\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m   \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m   function = trace_function(\n\u001b[0m\u001b[1;32m    133\u001b[0m       \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracing_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtracing_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m   )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mtrace_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    176\u001b[0m       \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 178\u001b[0;31m     concrete_function = _maybe_define_function(\n\u001b[0m\u001b[1;32m    179\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracing_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36m_maybe_define_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    281\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m           \u001b[0mtarget_func_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlookup_func_type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 283\u001b[0;31m         concrete_function = _create_concrete_function(\n\u001b[0m\u001b[1;32m    284\u001b[0m             \u001b[0mtarget_func_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlookup_func_context\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracing_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36m_create_concrete_function\u001b[0;34m(function_type, type_context, func_graph, tracing_options)\u001b[0m\n\u001b[1;32m    308\u001b[0m       \u001b[0mattributes_lib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDISABLE_ACD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    309\u001b[0m   )\n\u001b[0;32m--> 310\u001b[0;31m   traced_func_graph = func_graph_module.func_graph_from_py_func(\n\u001b[0m\u001b[1;32m    311\u001b[0m       \u001b[0mtracing_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m       \u001b[0mtracing_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython_function\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mfunc_graph_from_py_func\u001b[0;34m(name, python_func, args, kwargs, signature, func_graph, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, create_placeholders)\u001b[0m\n\u001b[1;32m   1057\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m     \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moriginal_func\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_decorator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munwrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpython_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1059\u001b[0;31m     \u001b[0mfunc_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpython_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfunc_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfunc_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1060\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1061\u001b[0m     \u001b[0;31m# invariant: `func_outputs` contains only Tensors, CompositeTensors,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36mwrapped_fn\u001b[0;34m(*args, **kwds)\u001b[0m\n\u001b[1;32m    596\u001b[0m         \u001b[0;31m# the function a weak reference to itself to avoid a reference cycle.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcompile_with_xla\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 598\u001b[0;31m           \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mweak_wrapped_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__wrapped__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    599\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36mbound_method_wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1693\u001b[0m     \u001b[0;31m# However, the replacer is still responsible for attaching self properly.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1694\u001b[0m     \u001b[0;31m# TODO(mdan): Is it possible to do it here instead?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1695\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1696\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1697\u001b[0m   \u001b[0mweak_bound_method_wrapper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mweakref\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mref\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbound_method_wrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/autograph_util.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;34m\"\"\"Calls a converted version of original_func.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m       return api.converted_call(\n\u001b[0m\u001b[1;32m     42\u001b[0m           \u001b[0moriginal_func\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    437\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    438\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 439\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconverted_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0meffective_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    440\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconverted_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0meffective_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36mtf___update_step_xla\u001b[0;34m(self, gradient, variable, key)\u001b[0m\n\u001b[1;32m     26\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvariable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mconverted_call\u001b[0;34m(f, args, kwargs, caller_fn_scope, options)\u001b[0m\n\u001b[1;32m    329\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_in_allowlist_cache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m     \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Allowlisted %s: from cache'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 331\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_call_unconverted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_status_ctx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mStatus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDISABLED\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36m_call_unconverted\u001b[0;34m(f, args, kwargs, options, update_cache)\u001b[0m\n\u001b[1;32m    458\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 460\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    462\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36m_update_step\u001b[0;34m(self, gradient, variable)\u001b[0m\n\u001b[1;32m    239\u001b[0m                 \u001b[0;34mf\"`tf.keras.optimizers.legacy.{self.__class__.__name__}.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m             )\n\u001b[0;32m--> 241\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    242\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcompute_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/adam.py\u001b[0m in \u001b[0;36mupdate_step\u001b[0;34m(self, gradient, variable)\u001b[0m\n\u001b[1;32m    172\u001b[0m         \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_velocities\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_index_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvar_key\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 174\u001b[0;31m         \u001b[0malpha\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlr\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbeta_2_power\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbeta_1_power\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    176\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIndexedSlices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/variables.py\u001b[0m in \u001b[0;36m_run_op\u001b[0;34m(a, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1012\u001b[0m       \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1013\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mtensor_oper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1014\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1015\u001b[0m     \u001b[0mfunctools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_run_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensor_oper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/math_ops.py\u001b[0m in \u001b[0;36mbinary_op_wrapper\u001b[0;34m(x, y)\u001b[0m\n\u001b[1;32m   1476\u001b[0m         \u001b[0;31m#   r_binary_op_wrapper use different force_same_dtype values.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1477\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_promote_tensors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1478\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1479\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1480\u001b[0m         \u001b[0;31m# Even if dispatching the op failed, the RHS may be a tensor aware\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/math_ops.py\u001b[0m in \u001b[0;36m_mul_dispatch\u001b[0;34m(x, y, name)\u001b[0m\n\u001b[1;32m   1879\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0msparse_tensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSparseTensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_vals\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdense_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1880\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1881\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmultiply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1882\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1883\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/weak_tensor_ops.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    140\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_auto_dtype_conversion_enabled\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m     \u001b[0mbound_arguments\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0mbound_arguments\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_defaults\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/dispatch.py\u001b[0m in \u001b[0;36mop_dispatch_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1258\u001b[0m       \u001b[0;31m# Fallback dispatch system (dispatch v1):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1260\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mdispatch_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1261\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1262\u001b[0m         \u001b[0;31m# Note: convert_to_eager_tensor currently raises a ValueError, not a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/math_ops.py\u001b[0m in \u001b[0;36mmultiply\u001b[0;34m(x, y, name)\u001b[0m\n\u001b[1;32m    528\u001b[0m   \"\"\"\n\u001b[1;32m    529\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 530\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mgen_math_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmul\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    531\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    532\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/gen_math_ops.py\u001b[0m in \u001b[0;36mmul\u001b[0;34m(x, y, name)\u001b[0m\n\u001b[1;32m   6762\u001b[0m       \u001b[0;32mpass\u001b[0m  \u001b[0;31m# Add nodes to the TensorFlow graph.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6763\u001b[0m   \u001b[0;31m# Add nodes to the TensorFlow graph.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6764\u001b[0;31m   _, _, _op, _outputs = _op_def_library._apply_op_helper(\n\u001b[0m\u001b[1;32m   6765\u001b[0m         \"Mul\", x=x, y=y, name=name)\n\u001b[1;32m   6766\u001b[0m   \u001b[0m_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_outputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/op_def_library.py\u001b[0m in \u001b[0;36m_apply_op_helper\u001b[0;34m(op_type_name, name, **keywords)\u001b[0m\n\u001b[1;32m    794\u001b[0m       \u001b[0;31m# Add Op to graph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    795\u001b[0m       \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 796\u001b[0;31m       op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n\u001b[0m\u001b[1;32m    797\u001b[0m                                  \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    798\u001b[0m                                  attrs=attr_protos, op_def=op_def)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36m_create_op_internal\u001b[0;34m(self, op_type, inputs, dtypes, input_types, name, attrs, op_def, compute_device)\u001b[0m\n\u001b[1;32m    668\u001b[0m       \u001b[0minp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcapture\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    669\u001b[0m       \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 670\u001b[0;31m     return super()._create_op_internal(  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m    671\u001b[0m         \u001b[0mop_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtypes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_types\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_def\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    672\u001b[0m         compute_device)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m_create_op_internal\u001b[0;34m(self, op_type, inputs, dtypes, input_types, name, attrs, op_def, compute_device)\u001b[0m\n\u001b[1;32m   2649\u001b[0m     \u001b[0;31m# _create_op_helper mutates the new Operation. `_mutation_lock` ensures a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m     \u001b[0;31m# Session.run call cannot occur between creating and mutating the op.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2651\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mutation_lock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2652\u001b[0m       ret = Operation.from_node_def(\n\u001b[1;32m   2653\u001b[0m           \u001b[0mnode_def\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/lock_util.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m    128\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__exit__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype_arg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue_arg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraceback_arg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mtype_arg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue_arg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraceback_arg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 130\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_group_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/lock_util.py\u001b[0m in \u001b[0;36mrelease\u001b[0;34m(self, group_id)\u001b[0m\n\u001b[1;32m    100\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_group_member_counts\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mgroup_id\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_group_member_counts\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mgroup_id\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ready\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnotify_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ready\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/threading.py\u001b[0m in \u001b[0;36mnotify_all\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    387\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m     \u001b[0;32mdef\u001b[0m \u001b[0mnotify_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    390\u001b[0m         \"\"\"Wake up all threads waiting on this condition.\n\u001b[1;32m    391\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["##ATT-LSTM\n","#EPOCH 100, BATCH SIZE 4\n","#Test MAE: 1.6003146177778642\n","#Test MSE: 5.021067596689325\n","#Test RMSE: 2.2407738834361055"],"metadata":{"id":"RbPzCnqQyDV2"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from keras.models import Sequential, Model\n","from keras.layers import LSTM, Dense, Attention, Input\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from sklearn.model_selection import train_test_split\n","from keras import layers\n","import tensorflow as tf\n","\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Assuming input sequence length and features\n","sequence_length = 10  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Split data into training and testing sets\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Create input and output sequences for LSTM\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","\n","# Define the model with Attention before the last LSTM layer\n","inputs = Input(shape=(sequence_length, features))\n","lstm_out = LSTM(units=50, return_sequences=True)(inputs)\n","att_out = AttentionLayer()(lstm_out)\n","outputs = Dense(1)(att_out)\n","model = Model(inputs=inputs, outputs=outputs)\n","\n","# Compile the model\n","model.compile(loss='mean_squared_error', optimizer='adam')\n","\n","# Train the model\n","model.fit(X_train, y_train, epochs=100, batch_size=4, validation_data=(X_test, y_test))\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DEC-1l7xo2b8","executionInfo":{"status":"ok","timestamp":1708036396601,"user_tz":-360,"elapsed":86897,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"32730658-1c95-4c78-ada8-9ba11a2e3dc8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (222, 10, 3)\n","Epoch 1/100\n","56/56 [==============================] - 6s 22ms/step - loss: 176.3263 - val_loss: 71.4822\n","Epoch 2/100\n","56/56 [==============================] - 0s 7ms/step - loss: 164.7106 - val_loss: 69.8289\n","Epoch 3/100\n","56/56 [==============================] - 0s 8ms/step - loss: 155.7998 - val_loss: 69.9868\n","Epoch 4/100\n","56/56 [==============================] - 0s 7ms/step - loss: 149.0329 - val_loss: 69.6719\n","Epoch 5/100\n","56/56 [==============================] - 0s 8ms/step - loss: 144.1616 - val_loss: 67.5820\n","Epoch 6/100\n","56/56 [==============================] - 0s 8ms/step - loss: 141.2439 - val_loss: 67.6489\n","Epoch 7/100\n","56/56 [==============================] - 0s 7ms/step - loss: 138.1985 - val_loss: 65.2222\n","Epoch 8/100\n","56/56 [==============================] - 0s 8ms/step - loss: 136.5641 - val_loss: 64.4859\n","Epoch 9/100\n","56/56 [==============================] - 0s 8ms/step - loss: 132.7496 - val_loss: 62.9172\n","Epoch 10/100\n","56/56 [==============================] - 0s 8ms/step - loss: 129.7131 - val_loss: 63.6473\n","Epoch 11/100\n","56/56 [==============================] - 0s 8ms/step - loss: 127.7921 - val_loss: 61.2403\n","Epoch 12/100\n","56/56 [==============================] - 0s 9ms/step - loss: 123.9724 - val_loss: 58.4054\n","Epoch 13/100\n","56/56 [==============================] - 0s 8ms/step - loss: 121.0965 - val_loss: 60.4465\n","Epoch 14/100\n","56/56 [==============================] - 0s 7ms/step - loss: 119.0463 - val_loss: 56.7970\n","Epoch 15/100\n","56/56 [==============================] - 0s 7ms/step - loss: 116.0775 - val_loss: 54.9031\n","Epoch 16/100\n","56/56 [==============================] - 0s 7ms/step - loss: 113.2223 - val_loss: 50.9369\n","Epoch 17/100\n","56/56 [==============================] - 0s 7ms/step - loss: 112.2750 - val_loss: 52.8148\n","Epoch 18/100\n","56/56 [==============================] - 0s 8ms/step - loss: 111.1985 - val_loss: 51.2509\n","Epoch 19/100\n","56/56 [==============================] - 0s 8ms/step - loss: 107.4992 - val_loss: 46.0482\n","Epoch 20/100\n","56/56 [==============================] - 1s 12ms/step - loss: 105.1782 - val_loss: 43.7615\n","Epoch 21/100\n","56/56 [==============================] - 1s 12ms/step - loss: 101.4271 - val_loss: 41.9454\n","Epoch 22/100\n","56/56 [==============================] - 1s 11ms/step - loss: 98.9459 - val_loss: 41.1890\n","Epoch 23/100\n","56/56 [==============================] - 1s 12ms/step - loss: 97.5473 - val_loss: 40.1621\n","Epoch 24/100\n","56/56 [==============================] - 1s 12ms/step - loss: 95.6348 - val_loss: 36.7614\n","Epoch 25/100\n","56/56 [==============================] - 1s 11ms/step - loss: 92.2873 - val_loss: 51.1651\n","Epoch 26/100\n","56/56 [==============================] - 0s 8ms/step - loss: 92.1599 - val_loss: 35.8347\n","Epoch 27/100\n","56/56 [==============================] - 0s 8ms/step - loss: 89.3382 - val_loss: 35.6736\n","Epoch 28/100\n","56/56 [==============================] - 0s 8ms/step - loss: 85.7725 - val_loss: 30.8216\n","Epoch 29/100\n","56/56 [==============================] - 0s 8ms/step - loss: 83.7716 - val_loss: 27.9000\n","Epoch 30/100\n","56/56 [==============================] - 0s 7ms/step - loss: 96.1425 - val_loss: 33.9387\n","Epoch 31/100\n","56/56 [==============================] - 0s 7ms/step - loss: 83.3001 - val_loss: 32.9175\n","Epoch 32/100\n","56/56 [==============================] - 0s 7ms/step - loss: 79.0426 - val_loss: 26.4568\n","Epoch 33/100\n","56/56 [==============================] - 0s 8ms/step - loss: 76.6540 - val_loss: 24.2438\n","Epoch 34/100\n","56/56 [==============================] - 0s 8ms/step - loss: 74.5158 - val_loss: 24.0538\n","Epoch 35/100\n","56/56 [==============================] - 0s 8ms/step - loss: 73.0733 - val_loss: 22.9413\n","Epoch 36/100\n","56/56 [==============================] - 0s 8ms/step - loss: 71.9416 - val_loss: 23.5848\n","Epoch 37/100\n","56/56 [==============================] - 0s 8ms/step - loss: 71.3613 - val_loss: 20.3883\n","Epoch 38/100\n","56/56 [==============================] - 0s 8ms/step - loss: 68.2466 - val_loss: 18.2662\n","Epoch 39/100\n","56/56 [==============================] - 0s 7ms/step - loss: 67.3700 - val_loss: 18.4929\n","Epoch 40/100\n","56/56 [==============================] - 0s 8ms/step - loss: 65.0909 - val_loss: 16.2158\n","Epoch 41/100\n","56/56 [==============================] - 0s 8ms/step - loss: 64.1598 - val_loss: 16.6477\n","Epoch 42/100\n","56/56 [==============================] - 0s 8ms/step - loss: 61.8653 - val_loss: 15.6669\n","Epoch 43/100\n","56/56 [==============================] - 0s 8ms/step - loss: 60.1000 - val_loss: 15.3057\n","Epoch 44/100\n","56/56 [==============================] - 0s 7ms/step - loss: 57.6381 - val_loss: 14.3940\n","Epoch 45/100\n","56/56 [==============================] - 0s 8ms/step - loss: 56.7423 - val_loss: 22.3415\n","Epoch 46/100\n","56/56 [==============================] - 0s 8ms/step - loss: 57.9114 - val_loss: 14.1817\n","Epoch 47/100\n","56/56 [==============================] - 0s 9ms/step - loss: 56.0006 - val_loss: 14.2691\n","Epoch 48/100\n","56/56 [==============================] - 1s 13ms/step - loss: 52.5852 - val_loss: 13.3048\n","Epoch 49/100\n","56/56 [==============================] - 1s 12ms/step - loss: 52.5393 - val_loss: 10.9818\n","Epoch 50/100\n","56/56 [==============================] - 1s 11ms/step - loss: 50.5998 - val_loss: 10.9463\n","Epoch 51/100\n","56/56 [==============================] - 1s 11ms/step - loss: 50.7559 - val_loss: 9.0177\n","Epoch 52/100\n","56/56 [==============================] - 1s 13ms/step - loss: 48.3076 - val_loss: 8.7794\n","Epoch 53/100\n","56/56 [==============================] - 1s 11ms/step - loss: 47.1201 - val_loss: 10.7509\n","Epoch 54/100\n","56/56 [==============================] - 0s 8ms/step - loss: 48.8233 - val_loss: 8.6634\n","Epoch 55/100\n","56/56 [==============================] - 0s 7ms/step - loss: 46.5863 - val_loss: 14.3182\n","Epoch 56/100\n","56/56 [==============================] - 0s 7ms/step - loss: 45.0455 - val_loss: 10.2878\n","Epoch 57/100\n","56/56 [==============================] - 0s 7ms/step - loss: 45.0020 - val_loss: 11.8080\n","Epoch 58/100\n","56/56 [==============================] - 0s 8ms/step - loss: 45.2714 - val_loss: 10.6606\n","Epoch 59/100\n","56/56 [==============================] - 0s 8ms/step - loss: 46.4054 - val_loss: 11.5535\n","Epoch 60/100\n","56/56 [==============================] - 0s 9ms/step - loss: 44.5054 - val_loss: 8.0834\n","Epoch 61/100\n","56/56 [==============================] - 0s 9ms/step - loss: 42.0449 - val_loss: 10.1523\n","Epoch 62/100\n","56/56 [==============================] - 0s 8ms/step - loss: 40.5618 - val_loss: 15.7167\n","Epoch 63/100\n","56/56 [==============================] - 0s 7ms/step - loss: 39.9745 - val_loss: 6.4045\n","Epoch 64/100\n","56/56 [==============================] - 0s 8ms/step - loss: 38.0524 - val_loss: 5.8793\n","Epoch 65/100\n","56/56 [==============================] - 0s 8ms/step - loss: 37.2441 - val_loss: 14.4929\n","Epoch 66/100\n","56/56 [==============================] - 0s 8ms/step - loss: 39.3284 - val_loss: 6.2212\n","Epoch 67/100\n","56/56 [==============================] - 0s 8ms/step - loss: 37.4569 - val_loss: 10.0615\n","Epoch 68/100\n","56/56 [==============================] - 0s 9ms/step - loss: 38.2183 - val_loss: 12.1264\n","Epoch 69/100\n","56/56 [==============================] - 0s 9ms/step - loss: 36.3873 - val_loss: 10.2062\n","Epoch 70/100\n","56/56 [==============================] - 0s 8ms/step - loss: 34.2523 - val_loss: 5.9273\n","Epoch 71/100\n","56/56 [==============================] - 0s 7ms/step - loss: 33.1514 - val_loss: 5.9578\n","Epoch 72/100\n","56/56 [==============================] - 0s 8ms/step - loss: 33.0704 - val_loss: 6.0436\n","Epoch 73/100\n","56/56 [==============================] - 0s 8ms/step - loss: 32.3618 - val_loss: 5.2900\n","Epoch 74/100\n","56/56 [==============================] - 1s 9ms/step - loss: 33.4522 - val_loss: 6.1275\n","Epoch 75/100\n","56/56 [==============================] - 1s 11ms/step - loss: 31.1389 - val_loss: 6.4937\n","Epoch 76/100\n","56/56 [==============================] - 1s 11ms/step - loss: 29.7871 - val_loss: 4.8019\n","Epoch 77/100\n","56/56 [==============================] - 1s 11ms/step - loss: 31.9735 - val_loss: 7.3643\n","Epoch 78/100\n","56/56 [==============================] - 1s 11ms/step - loss: 33.9560 - val_loss: 5.8456\n","Epoch 79/100\n","56/56 [==============================] - 1s 13ms/step - loss: 29.2493 - val_loss: 4.5685\n","Epoch 80/100\n","56/56 [==============================] - 1s 11ms/step - loss: 28.0229 - val_loss: 4.4366\n","Epoch 81/100\n","56/56 [==============================] - 0s 8ms/step - loss: 28.3580 - val_loss: 7.6019\n","Epoch 82/100\n","56/56 [==============================] - 1s 9ms/step - loss: 29.8928 - val_loss: 5.0898\n","Epoch 83/100\n","56/56 [==============================] - 0s 8ms/step - loss: 26.2951 - val_loss: 4.4537\n","Epoch 84/100\n","56/56 [==============================] - 0s 7ms/step - loss: 25.9822 - val_loss: 4.0069\n","Epoch 85/100\n","56/56 [==============================] - 0s 8ms/step - loss: 26.5674 - val_loss: 4.6699\n","Epoch 86/100\n","56/56 [==============================] - 0s 7ms/step - loss: 25.4012 - val_loss: 9.5811\n","Epoch 87/100\n","56/56 [==============================] - 0s 7ms/step - loss: 25.8883 - val_loss: 5.1486\n","Epoch 88/100\n","56/56 [==============================] - 0s 8ms/step - loss: 24.2415 - val_loss: 3.4533\n","Epoch 89/100\n","56/56 [==============================] - 0s 8ms/step - loss: 27.2087 - val_loss: 4.7169\n","Epoch 90/100\n","56/56 [==============================] - 0s 8ms/step - loss: 23.5954 - val_loss: 5.6376\n","Epoch 91/100\n","56/56 [==============================] - 0s 7ms/step - loss: 21.8481 - val_loss: 3.5269\n","Epoch 92/100\n","56/56 [==============================] - 0s 8ms/step - loss: 22.6642 - val_loss: 3.4886\n","Epoch 93/100\n","56/56 [==============================] - 0s 7ms/step - loss: 22.0449 - val_loss: 3.7242\n","Epoch 94/100\n","56/56 [==============================] - 0s 7ms/step - loss: 22.0650 - val_loss: 2.9437\n","Epoch 95/100\n","56/56 [==============================] - 0s 7ms/step - loss: 21.0802 - val_loss: 4.5874\n","Epoch 96/100\n","56/56 [==============================] - 0s 9ms/step - loss: 21.6008 - val_loss: 5.9190\n","Epoch 97/100\n","56/56 [==============================] - 0s 9ms/step - loss: 20.2142 - val_loss: 5.2646\n","Epoch 98/100\n","56/56 [==============================] - 0s 7ms/step - loss: 19.6754 - val_loss: 3.5398\n","Epoch 99/100\n","56/56 [==============================] - 0s 8ms/step - loss: 18.8593 - val_loss: 2.8422\n","Epoch 100/100\n","56/56 [==============================] - 0s 7ms/step - loss: 22.5811 - val_loss: 7.2897\n","2/2 [==============================] - 0s 8ms/step\n","Test MAE: 2.0283006709069014\n","Test MSE: 7.2897046049490415\n","Test RMSE: 2.699945296658627\n"]}]},{"cell_type":"markdown","source":["ATT-LSTM EPOCH 20,40,60,80,100"],"metadata":{"id":"edfgKx6QBCbR"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from keras.models import Sequential, Model\n","from keras.layers import GRU, Dense, Attention, Input\n","from keras.layers import LSTM,GRU, Dense, Attention, Input\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","from keras import layers\n","\n","# Load your data (replace this with your data loading step)\n","# data = pd.read_csv(\"/path/to/your/data.csv\")\n","\n","# Assuming data preprocessing steps here\n","# Split data into training and testing sets\n","train_size = int(len(data) * 0.8)\n","train_data = data.iloc[:train_size]\n","test_data = data.iloc[train_size:]\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Function to prepare sequences for GRU\n","def prepare_sequences(data, sequence_length):\n","    X, y = [], []\n","    for i in range(len(data) - sequence_length):\n","        X.append(data.iloc[i:i+sequence_length, :-1].values)\n","        y.append(data.iloc[i+sequence_length, -1])\n","    return np.array(X), np.array(y)\n","\n","# Define sequence length and number of features\n","sequence_length = 10\n","n_features = len(data.columns) - 1  # Number of features excluding the target column\n","\n","# Prepare training and testing sequences\n","X_train, y_train = prepare_sequences(train_data, sequence_length)\n","X_test, y_test = prepare_sequences(test_data, sequence_length)\n","\n","# Build and train the GRU model\n","def train_att_lstm_model(X_train, y_train, X_test, y_test, epochs):\n","    inputs = Input(shape=(sequence_length, n_features))\n","    gru_out = GRU(units=50, return_sequences=True)(inputs)\n","    att_out = AttentionLayer()(gru_out)\n","    outputs = Dense(1)(att_out)\n","    model = Model(inputs=inputs, outputs=outputs)\n","    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","    history = model.fit(X_train, y_train, epochs=epochs, batch_size=16, validation_data=(X_test, y_test), verbose=0)\n","\n","    return model, history\n"],"metadata":{"id":"NXQ5QgnkBGN2","executionInfo":{"status":"ok","timestamp":1714229170960,"user_tz":-360,"elapsed":737,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from keras.models import Sequential, Model\n","from keras.layers import GRU, Dense, Attention, Input\n","from keras import layers\n","import tensorflow as tf\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Initialize lists to store MSE and MAE for each epoch\n","mse_values = []\n","mae_values = []\n","\n","for epochs in epochs_list:\n","    # Train model for the current number of epochs\n","    model, history = train_att_lstm_model(X_train, y_train, X_test, y_test, epochs)\n","\n","    # Predict using the trained model\n","    y_pred = model.predict(X_test)\n","\n","    # Calculate MSE and MAE\n","    mse = mean_squared_error(y_test, y_pred)\n","    mae = mean_absolute_error(y_test, y_pred)\n","\n","    # Append MSE and MAE to lists\n","    mse_values.append(mse)\n","    mae_values.append(mae)\n","\n","# Create a DataFrame to store results\n","results_df = pd.DataFrame({\n","    'Epochs': epochs_list,\n","    'MSE': mse_values,\n","    'MAE': mae_values\n","})\n","\n","# Print the DataFrame containing MSE and MAE values\n","print(\"DataFrame with MSE and MAE for Different Numbers of Epochs(ATT-LSTM):\")\n","print(results_df)\n","\n","# Plot the mean losses\n","plt.figure(figsize=(10, 6))\n","plt.plot(mean_train_loss, label='Mean Train Loss', linestyle='--')\n","plt.plot(mean_test_loss, label='Mean Test Loss', linestyle='-')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Mean Train Loss vs. Mean Test Loss for Different Epochs (ATT-LSTM)')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":772},"id":"ktqLfYayBP55","executionInfo":{"status":"ok","timestamp":1714229226030,"user_tz":-360,"elapsed":50824,"user":{"displayName":"Maliha Zerin","userId":"09428742832350796406"}},"outputId":"c2754996-d289-4566-db34-0cc2ee950d3d"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 5ms/step\n","2/2 [==============================] - 0s 8ms/step\n","2/2 [==============================] - 0s 6ms/step\n","2/2 [==============================] - 0s 5ms/step\n","2/2 [==============================] - 0s 6ms/step\n","DataFrame with MSE and MAE for Different Numbers of Epochs(ATT-LSTM):\n","   Epochs        MSE       MAE\n","0      20  66.112297  6.519454\n","1      40  29.051599  4.153239\n","2      60  17.783735  3.390296\n","3      80   7.831853  2.106850\n","4     100   5.392235  1.681218\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1IAAAIjCAYAAAAJLyrXAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACf+0lEQVR4nOzdd3gUVd/G8e+m94SEhCQQQui9SxGkSAdBmjR9pEhRwI76oo+KomIXFUWxgIWiIIKigqB0kN6kB0LvhCQkIXXn/WMfVtYECCFkUu7Pdc1FdmZ29t6SIb89Z86xGIZhICIiIiIiIjnmZHYAERERERGRwkaFlIiIiIiIyA1SISUiIiIiInKDVEiJiIiIiIjcIBVSIiIiIiIiN0iFlIiIiIiIyA1SISUiIiIiInKDVEiJiIiIiIjcIBVSIiIiIiIiN0iFlEgRd+jQISwWC9OmTTM7ikixsn//ftq3b4+/vz8Wi4V58+aZHcnBsmXLsFgsLFu2zGH9N998Q9WqVXF1dSUgIMC+/q233qJ8+fI4OztTt27dfM1anA0aNAgfH59b/jhHjx7Fw8OD1atX3/LHKg7+7//+j8aNG5sdQ24xFVJSKE2bNg2LxYLFYmHVqlVZthuGQUREBBaLhbvuusuEhNc3btw4+3O41tKqVSuzo2bRqlUratasaXaMAqlVq1ZYLBYqVaqU7fbFixfb39s5c+bkc7qcKVeuXI4+m3lVnL/22ms5LjIufzHw9ttv58lj30oDBw5kx44dvPrqq3zzzTc0bNjwlj3W5dfl8uLq6krJkiW5/fbbefbZZzly5EiOjrNnzx4GDRpEhQoV+Oyzz5gyZQoAv//+O08//TTNmjVj6tSpvPbaa7fsudysNWvWMG7cOOLi4nK0/6BBg676Gffw8Li1YQuQl19+mcaNG9OsWbNst/fp0weLxcIzzzxjX/fvz11eLIcOHcr28cuVK5ej/89//vlnWrZsSUhICF5eXpQvX54+ffqwcOFC4J9z9PWWcePG2R/XYrHQtm3bbB/vs88+s99n48aN9vWPPfYY27Zt46effrpuZim8XMwOIHIzPDw8mDFjBs2bN3dYv3z5co4dO4a7u7tJya6vZ8+eVKxY0X47MTGRhx56iB49etCzZ0/7+lKlSt3U40RGRnLp0iVcXV1v6jiScx4eHkRHR7N+/XoaNWrksG369Ol4eHiQkpJiUrrrmzhxIomJifbbv/76KzNnzuS9996jZMmS9vW33357njzea6+9Ru/evenevXueHK8guHTpEmvXruW5555j9OjR+fa4/fv3p3PnzlitVi5cuMCGDRuYOHEi77//Pl988QX9+vWz79uiRQsuXbqEm5ubfd2yZcuwWq28//77DuenP//8EycnJ7744guH/QuiNWvW8NJLLzFo0CCHFrVrcXd35/PPP8+y3tnZOY/TFUxnz57lq6++4quvvsp2e0JCAj///DPlypVj5syZvP7661gsFoKDg/nmm28c9n3nnXc4duwY7733nn1dZmYm4Ph6ZrcfQHBwcK6fx9tvv81TTz1Fy5YtGTt2LF5eXkRHR7NkyRJmzZpFx44dee655xg6dKj9Phs2bOCDDz7g2WefpVq1avb1tWvXtv/s4eHB0qVLOXXqFKGhoQ6PebVzemhoKHfffTdvv/023bp1y/VzkoJNhZQUap07d2b27Nl88MEHuLj883GeMWMGDRo04Ny5cyamu7batWs7nKjPnTvHQw89RO3atbnvvvuuer+UlBTc3NxwcspZg3Jx+1a1IKhQoQIZGRnMnDnToZBKSUnhxx9/pEuXLvzwww8mJry2fxc0p06dYubMmXTv3p1y5cqZkqmwOXv2LECO/5DPiaSkJLy9va+5T/369bOcPw4fPkz79u0ZOHAg1apVo06dOgA4OTllOTecOXMm29xnzpzB09MzT4uo5ORkvLy88ux4N8PFxeWa592i7ttvv8XFxYWuXbtmu/2HH34gMzOTL7/8kjvvvJMVK1bQsmVLvL29s7xus2bN4sKFC9d9PXO6X05lZGQwfvx42rVrx++//55l++XPdrt27RzWe3h48MEHH9CuXbur9gBp1qwZGzZs4LvvvuPRRx+1rz927BgrV66kR48e2Z7T+/Tpwz333MPBgwcpX778TTw7KajUtU8Ktf79+3P+/HkWL15sX5eWlsacOXMYMGBAtvexWq1MnDiRGjVq4OHhQalSpRgxYgQXLlxw2G/+/Pl06dKF8PBw3N3dqVChAuPHj7d/s3bZ5W5uu3btonXr1nh5eVG6dGnefPPNm35+l69hmDVrFv/9738pXbo0Xl5eJCQkEBsby5gxY6hVqxY+Pj74+fnRqVMntm3b5nCM7K6Rutzn/vjx43Tv3h0fHx+Cg4MZM2ZMlud3Mz7++GNq1KiBu7s74eHhjBo1Kkt3m/3799OrVy9CQ0Px8PCgTJky9OvXj/j4ePs+ixcvpnnz5gQEBODj40OVKlV49tlnr/nYNWvWpHXr1lnWW61WSpcuTe/eve3rZs2aRYMGDfD19cXPz49atWrx/vvv39Rz79+/P9999x1Wq9W+7ueffyY5OZk+ffpke5/jx48zZMgQSpUqhbu7OzVq1ODLL7902CctLY0XXniBBg0a4O/vj7e3N3fccQdLly512O/KLnBTpkyhQoUKuLu7c9ttt7Fhw4abem6XffvttzRo0ABPT08CAwPp168fR48eddjneu+vxWIhKSmJr776yt49ZtCgQTed7cyZMzzwwAOUKlUKDw8P6tSpk+237dd779PT03nppZeoVKkSHh4eBAUF0bx5c4dzzr+NGzeOyMhIAJ566iksFotDAbplyxY6deqEn58fPj4+tGnThr/++svhGJe7Ly9fvpyRI0cSEhJCmTJlcvVaREZGMm3aNNLS0hzOS/++RqpcuXK8+OKLgK1V4HL3JovFwtSpU0lKSsq2W2dOPgeXz5ObNm2iRYsWeHl52X+HU1NTefHFF6lYsSLu7u5ERETw9NNPk5qa6nAMi8XC6NGjmTdvHjVr1rT/jlzusnX5tX/qqacAiIqKum53sRtx+T1ZsWIFI0aMICgoCD8/P+6///4s/39Azs5/AOvWraNz586UKFECb29vateune35Jyfn69yey+bNm0fjxo2vei3W9OnTadeuHa1bt6ZatWpMnz79usfMb+fOnSMhIeGqXRNDQkJyfWwPDw969uzJjBkzHNbPnDmTEiVK0KFDh2zvd7k74Pz583P92FKwqUVKCrVy5crRtGlTZs6cSadOnQD47bffiI+Pp1+/fnzwwQdZ7jNixAimTZvG4MGDeeSRR4iJiWHSpEls2bKF1atX27vATZs2DR8fH5544gl8fHz4888/eeGFF0hISOCtt95yOOaFCxfo2LEjPXv2pE+fPsyZM4dnnnmGWrVq2XPdjPHjx+Pm5saYMWNITU3Fzc2NXbt2MW/ePO655x6ioqI4ffo0n376KS1btmTXrl2Eh4df85iZmZl06NCBxo0b8/bbb7NkyRLeeecdKlSowEMPPXTTmceNG8dLL71E27Zteeihh9i7dy+TJ09mw4YN9tc5LS2NDh06kJqaysMPP0xo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v8OIoImJiZw8edL++53T89/lLop///33dX/vcyo357KyZcvi6emZ5f83wzCYMWMGrVu3ZuTIkVnuN378eKZPn56nhdTTTz/t8Bm9WnfDG9WwYUO++uorTp48edPH6t+/P6+88grVqlXLtsXy32JiYuxTDkjRo659UiT4+PgwefJkxo0bd9V5MMB2PVVmZibjx4/Psi0jI8M+NO3lb/+u/JYzLS2Njz/+OG+D3wRnZ+cs38LOnj3b3o3NTG3btsXNzY0PPvjAIeMXX3xBfHw8Xbp0AWwj0GVkZDjct1atWjg5OdmHPs6ua8fl/7z+PTxydvr27ctff/3Fl19+yblz5xy69cE/1wdc5uTkZG/9uXz89PR09uzZk6v/hHv37s2LL77Ixx9/fNURrpydnenVqxc//PADf//9d5btl+ckurwvOH42161bx9q1a284W2717NkTZ2dnXnrppSyfQcMw7K9pTt5fAG9v72yHhc6tzp07c+rUKYcvVTIyMvjwww/x8fGxfyOdk/f+3/v4+PhQsWLFHH32/s3Z2Zn27dszf/58h+G4T58+bZ9YPK9ai650+PBhBg0ahJubm31o8LyQ08/BtfTp04fjx4/z2WefZdl26dKlXI1UeHmurbz8TF1pypQppKen229PnjyZjIwM+witOT3/1a9fn6ioKCZOnJgla25a2HLyec6Oq6srDRs2ZOPGjQ7rV69ezaFDhxg8eDC9e/fOsvTt25elS5dy4sSJG856NdWrV3foWtmgQYMc3zc5Ofmq58HffvsNyNrdMjeGDh3Kiy++yDvvvHPdfePj4zlw4ECeTV4uBY9apKTIuFqXqCu1bNmSESNGMGHCBLZu3Ur79u1xdXVl//79zJ49m/fff5/evXtz++23U6JECQYOHMgjjzyCxWLhm2++KVDdR+666y5efvllBg8ezO23386OHTuYPn16vk36d/bsWXuLwpWioqK49957GTt2LC+99BIdO3akW7du7N27l48//pjbbrvN/o3jn3/+yejRo7nnnnuoXLkyGRkZfPPNN/bCAmzXqKxYsYIuXboQGRnJmTNn+PjjjylTpgzNmze/bs4+ffowZswYxowZQ2BgYJZvfocOHUpsbCx33nknZcqU4fDhw3z44YfUrVvXfk3N8ePHqVatGgMHDnSYPycn/P39GTdu3HX3e/3111m6dCmNGzdm2LBhVK9endjYWDZv3sySJUvsBeVdd93F3Llz6dGjB126dCEmJoZPPvmE6tWr26+BudUqVKjAK6+8wtixYzl06BDdu3fH19eXmJgYfvzxR4YPH86YMWNy9P4CNGjQgCVLlvDuu+8SHh5OVFRUlmHA/+2PP/7I9nqH7t27M3z4cD799FMGDRrEpk2bKFeuHHPmzGH16tVMnDjRfo1QTt776tWr06pVKxo0aEBgYCAbN25kzpw5jB49Olev3SuvvGKfF23kyJG4uLjw6aefkpqamidzz23evJlvv/0Wq9VKXFwcGzZs4IcffrCfw66cBPxm5fRzcC3/+c9/+P7773nwwQdZunQpzZo1IzMzkz179vD999+zaNEiGjZseEO5Lv/x/dxzz9GvXz9cXV3p2rXrNSczzsjIsHdj+7cePXo43DctLY02bdrQp08f+3mtefPmdOvWDbC1PObk/Ofk5MTkyZPp2rUrdevWZfDgwYSFhbFnzx527tzJokWLbuh55+TzfDV33303zz33HAkJCfZifvr06Tg7O9sLv3/r1q0bzz33HLNmzeKJJ564oay5FR0dne3/O/Xq1aNx48bcfvvtNGnShI4dOxIREUFcXBzz5s1j5cqVdO/enXr16t10hsjIyByd08E28IhhGNx99903/bhSQOXfAIEieedaQ41e6WrDpU6ZMsVo0KCB4enpafj6+hq1atUynn76aePEiRP2fVavXm00adLE8PT0NMLDw42nn37aWLRoUZZhUq82FPjAgQNvaGjXaw1/nt3w0SkpKcaTTz5phIWFGZ6enkazZs2MtWvXGi1btjRatmxp3+9qw5//eyhjw/hn6OPruTyUcXZLmzZt7PtNmjTJqFq1quHq6mqUKlXKeOihhxyG+T148KAxZMgQo0KFCoaHh4cRGBhotG7d2liyZIl9nz/++MO4++67jfDwcMPNzc0IDw83+vfvb+zbt++6OS9r1qyZARhDhw7Nsm3OnDlG+/btjZCQEMPNzc0oW7asMWLECOPkyZP2fS6/hjkZovt6Q8MbxtXf19OnTxujRo0yIiIiDFdXVyM0NNRo06aNMWXKFPs+VqvVeO2114zIyEjD3d3dqFevnrFgwYIsn7drDYf978/Z9VxtOOkffvjBaN68ueHt7W14e3sbVatWNUaNGmXs3bvXMIycvb+GYRh79uwxWrRoYXh6el73db78vK62fPPNN/bXcvDgwUbJkiUNNzc3o1atWg6/A4aRs/f+lVdeMRo1amQEBAQYnp6eRtWqVY1XX33VYfjra+XM7vXfvHmz0aFDB8PHx8fw8vIyWrdubaxZs8Zhn5ye4672uri4uBiBgYFG48aNjbFjxxqHDx/Ocp+bHf78sut9Dgzj2r8XaWlpxhtvvGHUqFHDcHd3N0qUKGE0aNDAeOmll+xDtRuG7XM7atSoLPePjIzM8pkZP368Ubp0acPJyem6Q6Ffa/jzK+97+T1Zvny5MXz4cKNEiRKGj4+Pce+99xrnz5/Pctzrnf8uW7VqldGuXTvD19fX8Pb2NmrXru0wFHlOz9c5+TxfzenTpw0XFxf7709aWpoRFBRk3HHHHde8X1RUlFGvXj2Hdbdy+POrvUcPPPCAkZ6ebnz22WdG9+7d7edHLy8vo169esZbb72VZdqIy3I6/Pm1XO33tW/fvkbz5s1z/Byl8LEYRgH6il1ERESkALo8kfuGDRtuuJWsMHjggQfYt28fK1euNDtKkXDq1CmioqKYNWuWWqSKMF0jJSIiIlLMvfjii2zYsIHVq1ebHaVImDhxIrVq1VIRVcTpGikRERGRYq5s2bI3Pc+S/CO7yZyl6FGLlIiIiIiIyA3SNVIiIiIiIiI3SC1SIiIiIiIiN0iFlIiIiIiIyA3SYBOA1WrlxIkT+Pr6YrFYzI4jIiIiIiImMQyDixcvEh4ejpPT1dudVEgBJ06cICIiwuwYIiIiIiJSQBw9epQyZcpcdbsKKcDX1xewvVh+fn4mpxEREREREbMkJCQQERFhrxGuRoUU2Lvz+fn5qZASEREREZHrXvKjwSZERERERERukAopERERERGRG6RCSkRERERE5AbpGikRERERMYVhGGRkZJCZmWl2FClGnJ2dcXFxuelpj1RIiYiIiEi+S0tL4+TJkyQnJ5sdRYohLy8vwsLCcHNzy/UxVEiJiIiISL6yWq3ExMTg7OxMeHg4bm5uN906IJIThmGQlpbG2bNniYmJoVKlStecdPdaVEiJiIiISL5KS0vDarUSERGBl5eX2XGkmPH09MTV1ZXDhw+TlpaGh4dHro5j6mATK1asoGvXroSHh2OxWJg3b57DdovFku3y1ltv2fcpV65clu2vv/56Pj8TEREREblRuW0JELlZefHZM/XTm5SURJ06dfjoo4+y3X7y5EmH5csvv8RisdCrVy+H/V5++WWH/R5++OH8iC8iIiIiIsWUqV37OnXqRKdOna66PTQ01OH2/Pnzad26NeXLl3dY7+vrm2VfERERERGRW6XQtKeePn2aX375hQceeCDLttdff52goCDq1avHW2+9RUZGxjWPlZqaSkJCgsMiIiIiIiJXN2jQILp37252jAKj0BRSX331Fb6+vvTs2dNh/SOPPMKsWbNYunQpI0aM4LXXXuPpp5++5rEmTJiAv7+/fYmIiLiV0UVERESkiBg0aBAWi4UHH3wwy7ZRo0ZhsVgYNGhQ/ge7QqtWra461oDFYqFVq1a5Ou7777/PtGnTbirbuHHjqFu37k0do6AoNKP2ffnll9x7771ZRtV44okn7D/Xrl0bNzc3RowYwYQJE3B3d8/2WGPHjnW4X0JCgoopEREREcmRiIgIZs2axXvvvYenpycAKSkpzJgxg7Jly5qcDubOnUtaWhoAR48epVGjRixZsoQaNWoAZJk7KT09HVdX1+se19/fP+/DFmKFokVq5cqV7N27l6FDh15338aNG5ORkcGhQ4euuo+7uzt+fn4Oi4iIiIiYLzkt46pLSnpmnu+bG/Xr1yciIoK5c+fa182dO5eyZctSr149h32tVisTJkwgKioKT09P6tSpw5w5c+zbMzMzeeCBB+zbq1Spwvvvv+9wjMtd6t5++23CwsIICgpi1KhRpKenZ5svMDCQ0NBQQkNDCQ4OBiAoKMi+LigoiMmTJ9OtWze8vb159dVXbyjHZa1ateKRRx7h6aeftj/muHHjcvOS2u3YsYM777wTT09PgoKCGD58OImJifbty5Yto1GjRnh7exMQEECzZs04fPgwANu2baN169b4+vri5+dHgwYN2Lhx403luZZC0SL1xRdf0KBBA+rUqXPdfbdu3YqTkxMhISH5kExERERE8lL1FxZddVvrKsFMHdzIfrvB+CVc+lfBdFnjqEC+G9HUfrv5G0uJTUrLst+h17vkKueQIUOYOnUq9957L2DrPTV48GCWLVvmsN+ECRP49ttv+eSTT6hUqRIrVqzgvvvuIzg4mJYtW2K1WilTpgyzZ88mKCiINWvWMHz4cMLCwujTp4/9OEuXLiUsLIylS5cSHR1N3759qVu3LsOGDctV/nHjxvH6668zceJEXFxccpzj37766iue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YUBakjmLYdxQ1Pr16xMREeFQkMydO5eyZctSr149h32tVisTJkwgKioKT09P6tSpw5w5c+zbMzMzeeCBB+zbq1Spwvvvv+9wjEGDBtG9e3fefvttwsLCCAoKYtSoUaSnp2ebLzAwkNDQUEJDQwkOts1PGhQUZF+3a9cu7rjjDjw9PYmIiOCRRx4hKSnJfv+PP/6YSpUq4eHhQalSpejdu7c9x/Lly3n//fftrVuHDh26odfush9++IEaNWrg7u5OuXLleOeddxy2Xy0DwJw5c6hVqxaenp4EBQXRtm1bh/z5RaP2FWC1ywTw18FY9p26aHYUERERkVsrPRleCzfnsZ89AW7eN3SXIUOGMHXqVO69914AvvzySwYPHsyyZcsc9pswYQLffvstn3zyCZUqVWLFihXcd999BAcH07JlS6xWK2XKlGH27NkEBQWxZs0ahg8fTlhYGH369LEfZ+nSpYSFhbF06VKio6Pp27cvdevWZdiwYTeU+8CBA3Ts2JFXXnmFL7/8krNnzzJ69GhGjx7N1KlT2bhxI4888gjffPMNt99+O7GxsaxcuRKA999/n3379lGzZk1efvllAHuhdiM2bdpEnz59GDduHH379mXNmjWMHDmSoKAgBg0adM0MJ0+epH///rz55pv06NGDixcvsnLlSowbLIbzggqpAmxws3Lc3zSS0gGeZkcRERERkSvcd999jB07lsOHDwOwevVqZs2a5VBIpaam8tprr7FkyRKaNm0KQPny5Vm1ahWffvopLVu2xNXVlZdeesl+n6ioKNauXcv333/vUEiVKFGCSZMm4ezsTNWqVenSpQt//PHHDRdSEyZM4N5777Vfv1SpUiU++OADWrZsyeTJkzly5Aje3t7cdddd+Pr6EhkZaW9l8/f3x83NDS8vL0JDQ3PzsgHw7rvv0qZNG55//nkAKleuzK5du3jrrbcYNGjQNTOcPHmSjIwMevbsSWRkJAC1atXKdZaboUKqAAvzVwElIiIixYSrl61lyKzHvkHBwcF06dKFadOmYRgGXbp0oWTJkg77REdHk5ycTLt27RzWp6WlOXQB/Oijj/jyyy85cuQIly5dIi0tjbp16zrcp0aNGjg7O9tvh4WFsWPHjhvOvW3bNrZv38706dPt6wzDwGq1EhMTQ7t27YiMjKR8+fJ07NiRjh070qNHD7y88m5e0927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sr3f0qVLadWqFZs3b2bkyJHs2bOH1NRUoqKi+M9//sMTTzxx1eujspPTfpCSd77bcIRnftiBr4cLy8a0Isgn5++XiIiIiMitktPaoMAMNmEmFVL5L9Nq0PXDVew6mcB9TcrySvdaZkcSERERESk6g01I0eTsZOH5u6oDMGPdEfaeumhyIhERERGRnFMhJaZpWiGIjjVCsRrw/cajZscREREREcmxQjMhrxRNYztXpVOtULrVCTc7ioiIiIhIjqmQElNFBnkTGeRtdgwRERERkRuirn1SYCSmZrDxUKzZMURERERErkuFlBQIB88m0uqtZQyZtoELSWlmxxERERERuSYVUlIgRAZ5U9LHjYSUDCYu2Wd2HBERERGRa1IhJQWCs5OFF/43HPq3645w8GyiyYlERERERK5OhZQUGLdXLMmdVUPItBq887tapURERESk4FIhJQXKMx2rYrHALztOsvVonNlxRERERESypUJKCpQqob70ql8GgAm/7sYwDJMTiYiIiIhkpUJKCpzH21XGw9WJUH8PUjOsZscREREREclCE/JKgVM6wJOVT99JsK+72VFERERERLKlFikpkFREiYiIiEhBpkJKCrQj55N5cf7fpKRnmh1FRERERMROXfukwLJaDe77Yh1HYpOJCPRi6B3lzY4kIiIiIgKoRUoKMCcnC6NbVwRg0tJo4i+lm5xIRERERMRGhZQUaD3rl6ZSiA9xyel8svyA2XFERERERAAVUlLAuTg78UzHqgB8uSqGU/EpJicSEREREVEhJYVAm2oh3FauBKkZViYu2Wd2HBERERERFVJS8FksFv6vk61V6vuNR9l3+qLJiURERESkuNOofVIoNIgMpGf90pQN9KJMCU+z44iIiIhIMadCSgqNd/vUNTuCiIiIiAigrn1SSFmtBlarYXYMERERESmmVEhJobM+JpZuH61izuZjZkcRERERkWJKhZQUOluPXuDv4wm8vWgvyWkZZscRERERkWJIhZQUOgNvL0eZEp6cuZjKZytizI4jIiIiIsWQCikpdNxdnO2T9H664gBnEjRJr4iIiIjkLxVSUijdVTuMemUDSE7L5N3FmqRXRERERPKXCikplCwWC//tUg2wTdK751SCyYlEREREpDhRISWFVoPIQDrXCsVqwPcbNIKfiIiIiOQfTcgrhdozHavSoUYoXWuHmx1F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n4fZkURERETkBuS0NshV177Y2NhsB5SoWrUqsbGxuTmkSJHQtXYY9csGcCk9k1d/2W12HBERERG5RXJVSNWpU4dJkyZlWT9p0iRq165906FECiuLxcKLXWvgZLG1Tn2/8ajZkURERETkFsjVNVJvvvkmXbp0YcmSJfY5pNauXcvRo0f59ddf8zSgSGFTJyKAJ9tX4a1Fe3l+3t/UKu1PtTB1GRUREREpSnLVItWyZUv27dtHjx49iIuLIy4ujp49e7Jz506++eabvM4oUug81LICLSsH4+bixOmEFLPjiIiIiEgey/WEvNnZtm0b9evXJzOzcA39rMEm5FaITUrjYko6kUHeZkcRERERkRy65RPyisi1BXq7EejtZr+tiXpFREREio5cde0TkRuzYt9ZWr65jB3H4s2OIiIiIiJ5QIWUSD6Yse4IpxJSGDljE/GX0s2OIyIiIiI36Ya69vXs2fOa2+Pi4m4mi0iR9Uav2uw8Gc/R2Es8NXsbn/6nARaLxexYIiIiIpJLN9Qi5e/vf80lMjKS+++//1ZlFSm0/L1c+WhAfdycnfh912m+WBVjdiQRERERuQl5OmpfYaVR+yS/fLP2EM/P34mLk4UfHrqdOhEBZkcSERERkSvktDbQNVIi+ei+JpF0rhVKhtXgkVlbSEzNMDuSiIiIiOSCCimRfGSxWJjQozalAzy5rVwgukpKREREpHDSPFIi+czfy5UFDzenxBVzTImIiIhI4aIWKRETXFlEGYZBXHKaiWlERERE5EapkBIx0fnEVIZM28DAL9eTlmE1O46IiIiI5JAKKRETpWRY2Xwkjm3H4nl38T6z44iIiIhIDhX4QqpcuXJYLJYsy6hRowBo1apVlm0PPvigyalFcqZ0gCdv9KoFwCfLD7By/1mTE4mIiIhIThT4QmrDhg2cPHnSvixevBiAe+65x77PsGHDHPZ58803zYorcsM61gxjQOOyADzx/TbOJ6aanEhERERErqfAF1LBwcGEhobalwULFlChQgVatmxp38fLy8thH02qK4XN812qUynEh7MXU3ni+21kWov9PNkiIiIiBVqBL6SulJaWxrfffsuQIUOwWP6ZgWf69OmULFmSmjVrMnbsWJKTk695nNTUVBISEhwWETN5ujnz4YB6uLs4sXzfWd5YuMfsSCIiIiJyDYVqHql58+YRFxfHoEGD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m29GVVUVzGYzMjIycO+99+L555/vsQ0KhQK/+93v8NxzzwGQ4Sw6OhobNmzgWi0ioiGMa6SIiGhQu+6664KCEgAkJCT4bxcUFATdV1BQgL179wIAysvLMXnyZH+IAoCZM2fC6/WioqICCoUCVVVVmDVr1nnbMGnSJP9to9EIk8mE2tra/r4kIiIaBBikiIhoUDMajd2m2l0sUVFRfTpPo9EEfa1QKOD1ei9Fk4iIKEJwjRQREQ1p27dv7/b12LFjAQBjx47Fvn37YLfb/fd/8803UCqVyM3NRUxMDEaMGIGSkpIBbTMREUU+jkgREdGg5nQ6YbFYgo6p1WokJSUBAFatWoW8vDxcc801WLFiBXbu3Im//OUvAIDCwkIsXboURUVFeOaZZ1BXV4eHHnoId911F8xmMwDgmWeewf3334+UlBTMmzcPNpsN33zzDR566KGBfaFERBRRGKSIiGhQ27hxI9LS0oKO5ebm4vDhwwBkRb2VK1figQceQFpaGj788EOMGzcOAGAwGPD5559j0aJFmD59OgwGAxYsWIDXXnvN/1hFRUVwOBz44x//iMceewxJSUm47bbbBu4FEhFRRGLVPiIiGrIUCgXWrFmD+fPnh7spREQ0xHCNFBERERERUYgYpIiIiIiIiELENVJERDRkcfY6ERFdKhyRIiIiIiIiChGDFBERERERUYgYpIiIiIiIiELEIEVERERERBQiBikiIiIiIqIQMUgRERERERGFiEGKiIiIiIgoRAxSREREREREIfr/5V7n26vXgxEAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# ATT-LSTM Epoch 60 Batch size 16\n","# Test MAE: 3.259897525732716\n","# Test MSE: 17.076032319190006\n","# Test RMSE: 4.132315612243334"],"metadata":{"id":"Njvhj-2uOHWw"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from keras.models import Sequential, Model\n","from keras.layers import LSTM, Dense, Attention, Input\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from sklearn.model_selection import train_test_split\n","from keras import layers\n","import tensorflow as tf\n","\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Assuming input sequence length and features\n","sequence_length = 10  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Split data into training and testing sets\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Create input and output sequences for LSTM\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","\n","# Define the model with Attention before the last LSTM layer\n","inputs = Input(shape=(sequence_length, features))\n","lstm_out = LSTM(units=50, return_sequences=True)(inputs)\n","att_out = AttentionLayer()(lstm_out)\n","outputs = Dense(1)(att_out)\n","model = Model(inputs=inputs, outputs=outputs)\n","\n","# Compile the model\n","model.compile(loss='mean_squared_error', optimizer='adam')\n","\n","# Train the model\n","model.fit(X_train, y_train, epochs=60, batch_size=16, validation_data=(X_test, y_test))\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vlr58LF8N8GV","executionInfo":{"status":"ok","timestamp":1713611751700,"user_tz":-360,"elapsed":15203,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"4e5aded0-6d54-4dc2-94b9-c3f8dcd9578b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (222, 10, 3)\n","Epoch 1/60\n","14/14 [==============================] - 5s 70ms/step - loss: 179.1913 - val_loss: 74.6356\n","Epoch 2/60\n","14/14 [==============================] - 0s 10ms/step - loss: 173.7239 - val_loss: 72.8667\n","Epoch 3/60\n","14/14 [==============================] - 0s 10ms/step - loss: 169.0113 - val_loss: 71.5438\n","Epoch 4/60\n","14/14 [==============================] - 0s 9ms/step - loss: 164.5867 - val_loss: 70.7267\n","Epoch 5/60\n","14/14 [==============================] - 0s 9ms/step - loss: 161.1496 - val_loss: 70.3306\n","Epoch 6/60\n","14/14 [==============================] - 0s 8ms/step - loss: 156.8528 - val_loss: 70.3540\n","Epoch 7/60\n","14/14 [==============================] - 0s 9ms/step - loss: 153.4077 - val_loss: 70.3881\n","Epoch 8/60\n","14/14 [==============================] - 0s 10ms/step - loss: 150.4594 - val_loss: 70.4974\n","Epoch 9/60\n","14/14 [==============================] - 0s 8ms/step - loss: 147.8519 - val_loss: 70.6600\n","Epoch 10/60\n","14/14 [==============================] - 0s 10ms/step - loss: 146.1310 - val_loss: 69.8303\n","Epoch 11/60\n","14/14 [==============================] - 0s 9ms/step - loss: 143.8306 - val_loss: 69.3612\n","Epoch 12/60\n","14/14 [==============================] - 0s 9ms/step - loss: 142.2844 - val_loss: 68.5151\n","Epoch 13/60\n","14/14 [==============================] - 0s 9ms/step - loss: 140.5906 - val_loss: 67.3323\n","Epoch 14/60\n","14/14 [==============================] - 0s 9ms/step - loss: 139.3979 - val_loss: 66.0089\n","Epoch 15/60\n","14/14 [==============================] - 0s 8ms/step - loss: 137.5819 - val_loss: 65.6205\n","Epoch 16/60\n","14/14 [==============================] - 0s 10ms/step - loss: 136.9411 - val_loss: 65.8375\n","Epoch 17/60\n","14/14 [==============================] - 0s 9ms/step - loss: 134.2934 - val_loss: 64.8956\n","Epoch 18/60\n","14/14 [==============================] - 0s 10ms/step - loss: 132.8556 - val_loss: 64.0564\n","Epoch 19/60\n","14/14 [==============================] - 0s 9ms/step - loss: 130.4801 - val_loss: 63.5792\n","Epoch 20/60\n","14/14 [==============================] - 0s 10ms/step - loss: 128.3882 - val_loss: 62.4677\n","Epoch 21/60\n","14/14 [==============================] - 0s 8ms/step - loss: 126.3575 - val_loss: 61.8610\n","Epoch 22/60\n","14/14 [==============================] - 0s 8ms/step - loss: 125.1171 - val_loss: 61.2240\n","Epoch 23/60\n","14/14 [==============================] - 0s 8ms/step - loss: 122.7652 - val_loss: 60.0539\n","Epoch 24/60\n","14/14 [==============================] - 0s 8ms/step - loss: 121.0538 - val_loss: 58.9569\n","Epoch 25/60\n","14/14 [==============================] - 0s 9ms/step - loss: 119.0591 - val_loss: 57.4948\n","Epoch 26/60\n","14/14 [==============================] - 0s 9ms/step - loss: 117.1603 - val_loss: 56.2585\n","Epoch 27/60\n","14/14 [==============================] - 0s 9ms/step - loss: 115.7842 - val_loss: 55.6988\n","Epoch 28/60\n","14/14 [==============================] - 0s 9ms/step - loss: 113.4656 - val_loss: 53.9484\n","Epoch 29/60\n","14/14 [==============================] - 0s 8ms/step - loss: 112.2047 - val_loss: 53.5003\n","Epoch 30/60\n","14/14 [==============================] - 0s 8ms/step - loss: 112.0703 - val_loss: 51.4391\n","Epoch 31/60\n","14/14 [==============================] - 0s 9ms/step - loss: 109.4472 - val_loss: 51.4831\n","Epoch 32/60\n","14/14 [==============================] - 0s 10ms/step - loss: 106.8428 - val_loss: 48.8305\n","Epoch 33/60\n","14/14 [==============================] - 0s 14ms/step - loss: 104.8863 - val_loss: 50.9547\n","Epoch 34/60\n","14/14 [==============================] - 0s 14ms/step - loss: 102.6577 - val_loss: 47.7239\n","Epoch 35/60\n","14/14 [==============================] - 0s 13ms/step - loss: 101.8990 - val_loss: 45.2891\n","Epoch 36/60\n","14/14 [==============================] - 0s 13ms/step - loss: 98.4901 - val_loss: 44.3922\n","Epoch 37/60\n","14/14 [==============================] - 0s 13ms/step - loss: 97.5996 - val_loss: 43.2477\n","Epoch 38/60\n","14/14 [==============================] - 0s 12ms/step - loss: 96.6031 - val_loss: 42.1896\n","Epoch 39/60\n","14/14 [==============================] - 0s 12ms/step - loss: 93.4352 - val_loss: 41.2610\n","Epoch 40/60\n","14/14 [==============================] - 0s 12ms/step - loss: 91.5643 - val_loss: 40.1035\n","Epoch 41/60\n","14/14 [==============================] - 0s 13ms/step - loss: 90.1623 - val_loss: 38.8639\n","Epoch 42/60\n","14/14 [==============================] - 0s 12ms/step - loss: 88.3488 - val_loss: 36.9659\n","Epoch 43/60\n","14/14 [==============================] - 0s 13ms/step - loss: 86.0428 - val_loss: 37.3148\n","Epoch 44/60\n","14/14 [==============================] - 0s 13ms/step - loss: 86.5730 - val_loss: 35.7149\n","Epoch 45/60\n","14/14 [==============================] - 0s 12ms/step - loss: 85.3004 - val_loss: 35.4194\n","Epoch 46/60\n","14/14 [==============================] - 0s 12ms/step - loss: 81.3404 - val_loss: 34.1920\n","Epoch 47/60\n","14/14 [==============================] - 0s 12ms/step - loss: 79.8049 - val_loss: 30.2488\n","Epoch 48/60\n","14/14 [==============================] - 0s 14ms/step - loss: 77.4242 - val_loss: 28.5183\n","Epoch 49/60\n","14/14 [==============================] - 0s 13ms/step - loss: 76.5195 - val_loss: 26.9514\n","Epoch 50/60\n","14/14 [==============================] - 0s 14ms/step - loss: 73.3230 - val_loss: 26.7318\n","Epoch 51/60\n","14/14 [==============================] - 0s 14ms/step - loss: 72.7113 - val_loss: 26.3204\n","Epoch 52/60\n","14/14 [==============================] - 0s 14ms/step - loss: 72.0016 - val_loss: 24.1271\n","Epoch 53/60\n","14/14 [==============================] - 0s 13ms/step - loss: 69.5679 - val_loss: 22.7426\n","Epoch 54/60\n","14/14 [==============================] - 0s 9ms/step - loss: 67.6619 - val_loss: 21.8106\n","Epoch 55/60\n","14/14 [==============================] - 0s 9ms/step - loss: 67.7272 - val_loss: 22.8201\n","Epoch 56/60\n","14/14 [==============================] - 0s 9ms/step - loss: 65.6780 - val_loss: 20.9973\n","Epoch 57/60\n","14/14 [==============================] - 0s 9ms/step - loss: 64.7272 - val_loss: 19.9732\n","Epoch 58/60\n","14/14 [==============================] - 0s 9ms/step - loss: 64.3564 - val_loss: 18.2902\n","Epoch 59/60\n","14/14 [==============================] - 0s 9ms/step - loss: 63.5580 - val_loss: 19.3804\n","Epoch 60/60\n","14/14 [==============================] - 0s 9ms/step - loss: 61.4438 - val_loss: 17.0760\n","2/2 [==============================] - 0s 7ms/step\n","Test MAE: 3.259897525732716\n","Test MSE: 17.076032319190006\n","Test RMSE: 4.132315612243334\n"]}]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/Maliha Prediction/ATT_LSTM_GVI_diff.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y8SgVUnw1lZt","executionInfo":{"status":"ok","timestamp":1708036007397,"user_tz":-360,"elapsed":4,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"558b6d9f-4e05-45a8-b712-3c2b606e6350"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["#ATT-GRU\n","#EPOCH 100, BATCH 16\n","#Test MAE: 1.8881149251634877\n","#Test MSE: 5.586142652852487\n","#Test RMSE: 2.3635022007293514"],"metadata":{"id":"btM9JdQr6bRS"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from keras.models import Sequential, Model\n","from keras.layers import GRU, Dense, Attention, Input\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from sklearn.model_selection import train_test_split\n","from keras import layers\n","import tensorflow as tf\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Assuming input sequence length and features\n","sequence_length = 10  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Split data into training and testing sets\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Create input and output sequences for GRU\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","\n","# Define the model with Attention before the last GRU layer\n","inputs = Input(shape=(sequence_length, features))\n","gru_out = GRU(units=50, return_sequences=True)(inputs)\n","att_out = AttentionLayer()(gru_out)\n","outputs = Dense(1)(att_out)\n","model = Model(inputs=inputs, outputs=outputs)\n","\n","# Compile the model\n","model.compile(loss='mean_squared_error', optimizer='adam')\n","\n","# Train the model\n","model.fit(X_train, y_train, epochs=100, batch_size=16, validation_data=(X_test, y_test))\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qiC69lx9yXxf","executionInfo":{"status":"ok","timestamp":1708036553145,"user_tz":-360,"elapsed":22362,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"3e1bc70e-4bbc-451c-aece-caa6d07b850f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (222, 10, 3)\n","Epoch 1/100\n","14/14 [==============================] - 5s 45ms/step - loss: 184.9377 - val_loss: 74.0181\n","Epoch 2/100\n","14/14 [==============================] - 0s 10ms/step - loss: 175.5604 - val_loss: 71.5389\n","Epoch 3/100\n","14/14 [==============================] - 0s 10ms/step - loss: 168.9282 - val_loss: 70.1882\n","Epoch 4/100\n","14/14 [==============================] - 0s 9ms/step - loss: 163.6113 - val_loss: 69.9153\n","Epoch 5/100\n","14/14 [==============================] - 0s 11ms/step - loss: 159.2718 - val_loss: 70.1592\n","Epoch 6/100\n","14/14 [==============================] - 0s 10ms/step - loss: 156.3995 - val_loss: 70.6130\n","Epoch 7/100\n","14/14 [==============================] - 0s 11ms/step - loss: 153.6832 - val_loss: 71.2336\n","Epoch 8/100\n","14/14 [==============================] - 0s 10ms/step - loss: 151.5892 - val_loss: 71.6291\n","Epoch 9/100\n","14/14 [==============================] - 0s 10ms/step - loss: 149.6120 - val_loss: 72.0171\n","Epoch 10/100\n","14/14 [==============================] - 0s 10ms/step - loss: 147.5449 - val_loss: 70.8238\n","Epoch 11/100\n","14/14 [==============================] - 0s 10ms/step - loss: 145.4596 - val_loss: 71.2681\n","Epoch 12/100\n","14/14 [==============================] - 0s 10ms/step - loss: 143.4696 - val_loss: 70.9136\n","Epoch 13/100\n","14/14 [==============================] - 0s 10ms/step - loss: 141.4657 - val_loss: 70.7099\n","Epoch 14/100\n","14/14 [==============================] - 0s 11ms/step - loss: 140.0520 - val_loss: 69.5134\n","Epoch 15/100\n","14/14 [==============================] - 0s 9ms/step - loss: 138.1621 - val_loss: 69.6018\n","Epoch 16/100\n","14/14 [==============================] - 0s 10ms/step - loss: 136.7285 - val_loss: 68.8492\n","Epoch 17/100\n","14/14 [==============================] - 0s 10ms/step - loss: 134.5805 - val_loss: 68.2271\n","Epoch 18/100\n","14/14 [==============================] - 0s 11ms/step - loss: 132.2591 - val_loss: 66.7142\n","Epoch 19/100\n","14/14 [==============================] - 0s 10ms/step - loss: 130.5873 - val_loss: 66.5434\n","Epoch 20/100\n","14/14 [==============================] - 0s 10ms/step - loss: 127.9777 - val_loss: 64.7224\n","Epoch 21/100\n","14/14 [==============================] - 0s 11ms/step - loss: 125.9633 - val_loss: 63.4912\n","Epoch 22/100\n","14/14 [==============================] - 0s 10ms/step - loss: 124.2014 - val_loss: 62.3891\n","Epoch 23/100\n","14/14 [==============================] - 0s 9ms/step - loss: 121.8590 - val_loss: 60.9573\n","Epoch 24/100\n","14/14 [==============================] - 0s 11ms/step - loss: 120.3653 - val_loss: 58.7254\n","Epoch 25/100\n","14/14 [==============================] - 0s 11ms/step - loss: 118.5094 - val_loss: 57.8351\n","Epoch 26/100\n","14/14 [==============================] - 0s 12ms/step - loss: 116.1217 - val_loss: 54.7751\n","Epoch 27/100\n","14/14 [==============================] - 0s 11ms/step - loss: 115.0518 - val_loss: 52.9531\n","Epoch 28/100\n","14/14 [==============================] - 0s 13ms/step - loss: 112.4130 - val_loss: 50.1854\n","Epoch 29/100\n","14/14 [==============================] - 0s 12ms/step - loss: 109.9361 - val_loss: 47.6778\n","Epoch 30/100\n","14/14 [==============================] - 0s 11ms/step - loss: 108.2710 - val_loss: 45.6851\n","Epoch 31/100\n","14/14 [==============================] - 0s 10ms/step - loss: 106.6622 - val_loss: 43.4050\n","Epoch 32/100\n","14/14 [==============================] - 0s 9ms/step - loss: 103.3756 - val_loss: 40.4051\n","Epoch 33/100\n","14/14 [==============================] - 0s 10ms/step - loss: 101.4621 - val_loss: 38.2370\n","Epoch 34/100\n","14/14 [==============================] - 0s 11ms/step - loss: 99.0596 - val_loss: 35.6028\n","Epoch 35/100\n","14/14 [==============================] - 0s 14ms/step - loss: 97.2465 - val_loss: 33.8500\n","Epoch 36/100\n","14/14 [==============================] - 0s 15ms/step - loss: 94.9823 - val_loss: 30.4549\n","Epoch 37/100\n","14/14 [==============================] - 0s 15ms/step - loss: 92.3961 - val_loss: 28.3963\n","Epoch 38/100\n","14/14 [==============================] - 0s 13ms/step - loss: 91.7648 - val_loss: 27.2246\n","Epoch 39/100\n","14/14 [==============================] - 0s 17ms/step - loss: 89.4568 - val_loss: 25.7070\n","Epoch 40/100\n","14/14 [==============================] - 0s 14ms/step - loss: 87.1490 - val_loss: 24.5741\n","Epoch 41/100\n","14/14 [==============================] - 0s 14ms/step - loss: 86.9133 - val_loss: 32.6212\n","Epoch 42/100\n","14/14 [==============================] - 0s 14ms/step - loss: 86.9226 - val_loss: 28.3269\n","Epoch 43/100\n","14/14 [==============================] - 0s 12ms/step - loss: 84.6550 - val_loss: 25.6938\n","Epoch 44/100\n","14/14 [==============================] - 0s 15ms/step - loss: 82.6502 - val_loss: 22.7601\n","Epoch 45/100\n","14/14 [==============================] - 0s 14ms/step - loss: 80.7463 - val_loss: 22.5743\n","Epoch 46/100\n","14/14 [==============================] - 0s 13ms/step - loss: 80.2755 - val_loss: 21.4727\n","Epoch 47/100\n","14/14 [==============================] - 0s 13ms/step - loss: 79.9976 - val_loss: 24.6471\n","Epoch 48/100\n","14/14 [==============================] - 0s 14ms/step - loss: 77.7135 - val_loss: 21.0246\n","Epoch 49/100\n","14/14 [==============================] - 0s 15ms/step - loss: 75.2161 - val_loss: 21.4334\n","Epoch 50/100\n","14/14 [==============================] - 0s 15ms/step - loss: 75.2972 - val_loss: 19.4794\n","Epoch 51/100\n","14/14 [==============================] - 0s 14ms/step - loss: 73.3292 - val_loss: 19.7351\n","Epoch 52/100\n","14/14 [==============================] - 0s 14ms/step - loss: 72.5567 - val_loss: 18.6273\n","Epoch 53/100\n","14/14 [==============================] - 0s 14ms/step - loss: 71.3782 - val_loss: 18.5682\n","Epoch 54/100\n","14/14 [==============================] - 0s 11ms/step - loss: 69.3353 - val_loss: 17.9575\n","Epoch 55/100\n","14/14 [==============================] - 0s 10ms/step - loss: 67.9835 - val_loss: 20.4403\n","Epoch 56/100\n","14/14 [==============================] - 0s 10ms/step - loss: 67.5150 - val_loss: 18.0261\n","Epoch 57/100\n","14/14 [==============================] - 0s 9ms/step - loss: 66.2261 - val_loss: 18.8561\n","Epoch 58/100\n","14/14 [==============================] - 0s 10ms/step - loss: 64.3915 - val_loss: 16.9549\n","Epoch 59/100\n","14/14 [==============================] - 0s 10ms/step - loss: 65.4920 - val_loss: 17.2017\n","Epoch 60/100\n","14/14 [==============================] - 0s 9ms/step - loss: 64.9624 - val_loss: 16.8334\n","Epoch 61/100\n","14/14 [==============================] - 0s 9ms/step - loss: 62.7367 - val_loss: 16.8896\n","Epoch 62/100\n","14/14 [==============================] - 0s 10ms/step - loss: 61.1054 - val_loss: 18.8756\n","Epoch 63/100\n","14/14 [==============================] - 0s 11ms/step - loss: 60.3650 - val_loss: 17.7135\n","Epoch 64/100\n","14/14 [==============================] - 0s 9ms/step - loss: 59.8898 - val_loss: 18.4871\n","Epoch 65/100\n","14/14 [==============================] - 0s 11ms/step - loss: 60.1101 - val_loss: 16.1809\n","Epoch 66/100\n","14/14 [==============================] - 0s 10ms/step - loss: 56.9307 - val_loss: 14.1295\n","Epoch 67/100\n","14/14 [==============================] - 0s 10ms/step - loss: 55.5118 - val_loss: 13.2722\n","Epoch 68/100\n","14/14 [==============================] - 0s 10ms/step - loss: 54.0408 - val_loss: 12.7265\n","Epoch 69/100\n","14/14 [==============================] - 0s 9ms/step - loss: 53.6330 - val_loss: 12.3655\n","Epoch 70/100\n","14/14 [==============================] - 0s 11ms/step - loss: 52.6879 - val_loss: 14.6722\n","Epoch 71/100\n","14/14 [==============================] - 0s 10ms/step - loss: 51.9328 - val_loss: 14.3716\n","Epoch 72/100\n","14/14 [==============================] - 0s 9ms/step - loss: 51.0938 - val_loss: 15.1136\n","Epoch 73/100\n","14/14 [==============================] - 0s 10ms/step - loss: 50.8815 - val_loss: 19.2003\n","Epoch 74/100\n","14/14 [==============================] - 0s 9ms/step - loss: 50.3083 - val_loss: 11.2692\n","Epoch 75/100\n","14/14 [==============================] - 0s 10ms/step - loss: 47.7881 - val_loss: 12.1495\n","Epoch 76/100\n","14/14 [==============================] - 0s 11ms/step - loss: 45.9633 - val_loss: 11.6234\n","Epoch 77/100\n","14/14 [==============================] - 0s 11ms/step - loss: 46.3705 - val_loss: 10.8501\n","Epoch 78/100\n","14/14 [==============================] - 0s 10ms/step - loss: 45.8585 - val_loss: 13.6817\n","Epoch 79/100\n","14/14 [==============================] - 0s 10ms/step - loss: 45.4348 - val_loss: 11.6142\n","Epoch 80/100\n","14/14 [==============================] - 0s 11ms/step - loss: 44.0275 - val_loss: 11.1568\n","Epoch 81/100\n","14/14 [==============================] - 0s 10ms/step - loss: 43.1363 - val_loss: 10.8148\n","Epoch 82/100\n","14/14 [==============================] - 0s 11ms/step - loss: 41.5512 - val_loss: 8.2849\n","Epoch 83/100\n","14/14 [==============================] - 0s 11ms/step - loss: 42.9796 - val_loss: 10.9753\n","Epoch 84/100\n","14/14 [==============================] - 0s 11ms/step - loss: 41.3114 - val_loss: 11.4264\n","Epoch 85/100\n","14/14 [==============================] - 0s 11ms/step - loss: 41.1631 - val_loss: 9.3288\n","Epoch 86/100\n","14/14 [==============================] - 0s 10ms/step - loss: 40.6731 - val_loss: 9.9235\n","Epoch 87/100\n","14/14 [==============================] - 0s 9ms/step - loss: 39.5551 - val_loss: 7.2660\n","Epoch 88/100\n","14/14 [==============================] - 0s 10ms/step - loss: 38.1535 - val_loss: 6.7736\n","Epoch 89/100\n","14/14 [==============================] - 0s 9ms/step - loss: 38.1724 - val_loss: 8.2692\n","Epoch 90/100\n","14/14 [==============================] - 0s 9ms/step - loss: 38.7303 - val_loss: 15.9727\n","Epoch 91/100\n","14/14 [==============================] - 0s 11ms/step - loss: 39.8088 - val_loss: 6.3416\n","Epoch 92/100\n","14/14 [==============================] - 0s 9ms/step - loss: 37.0478 - val_loss: 6.4593\n","Epoch 93/100\n","14/14 [==============================] - 0s 9ms/step - loss: 37.4011 - val_loss: 6.9242\n","Epoch 94/100\n","14/14 [==============================] - 0s 9ms/step - loss: 36.6396 - val_loss: 10.2767\n","Epoch 95/100\n","14/14 [==============================] - 0s 9ms/step - loss: 36.5919 - val_loss: 5.9734\n","Epoch 96/100\n","14/14 [==============================] - 0s 10ms/step - loss: 35.8787 - val_loss: 8.7822\n","Epoch 97/100\n","14/14 [==============================] - 0s 9ms/step - loss: 35.6159 - val_loss: 8.8272\n","Epoch 98/100\n","14/14 [==============================] - 0s 10ms/step - loss: 34.1510 - val_loss: 5.4842\n","Epoch 99/100\n","14/14 [==============================] - 0s 9ms/step - loss: 34.1566 - val_loss: 7.2245\n","Epoch 100/100\n","14/14 [==============================] - 0s 10ms/step - loss: 34.4934 - val_loss: 5.5861\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:6 out of the last 11 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7e61a35b7880> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 8ms/step\n","Test MAE: 1.8881149251634877\n","Test MSE: 5.586142652852487\n","Test RMSE: 2.3635022007293514\n"]}]},{"cell_type":"markdown","source":["# ATT-GRU EPOCH 60 BATCH SIZE16\n","# Test MAE: 3.101955852160851\n","# Test MSE: 15.259302396994698\n","# Test RMSE: 3.9063157062627054"],"metadata":{"id":"D2EwpMuCO73I"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from keras.models import Sequential, Model\n","from keras.layers import GRU, Dense, Attention, Input\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from sklearn.model_selection import train_test_split\n","from keras import layers\n","import tensorflow as tf\n","\n","class AttentionLayer(layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1], 1), initializer=\"normal\")\n","        self.b = self.add_weight(name=\"att_bias\", shape=(input_shape[1], 1), initializer=\"zeros\")\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, x):\n","        et = tf.squeeze(tf.tanh(tf.matmul(x, self.W) + self.b), axis=-1)\n","        at = tf.expand_dims(tf.nn.softmax(et, axis=-1), axis=-1)\n","        output = tf.reduce_sum(x * at, axis=1)\n","\n","        return output\n","\n","# Assuming input sequence length and features\n","sequence_length = 10  # Update this based on your actual sequence length\n","features = 3  # Number of input features\n","\n","# Split data into training and testing sets\n","training_data = data[:int(0.8 * len(data))]\n","testing_data = data[int(0.8 * len(data)):]\n","\n","# Create input and output sequences for GRU\n","X_train = np.array([training_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(training_data))])\n","y_train = np.array(training_data[\"2020-2015\"][sequence_length:])\n","X_test = np.array([testing_data.iloc[i - sequence_length:i].values[:, :-1] for i in range(sequence_length, len(testing_data))])\n","y_test = np.array(testing_data[\"2020-2015\"][sequence_length:])\n","\n","# Print the shape of input data before reshaping\n","print(\"X_train shape before reshaping:\", X_train.shape)\n","\n","# Define the model with Attention before the last GRU layer\n","inputs = Input(shape=(sequence_length, features))\n","gru_out = GRU(units=50, return_sequences=True)(inputs)\n","att_out = AttentionLayer()(gru_out)\n","outputs = Dense(1)(att_out)\n","model = Model(inputs=inputs, outputs=outputs)\n","\n","# Compile the model\n","model.compile(loss='mean_squared_error', optimizer='adam')\n","\n","# Train the model\n","model.fit(X_train, y_train, epochs=60, batch_size=16, validation_data=(X_test, y_test))\n","\n","# Evaluate the model on test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","\n","# Print evaluation metrics\n","print(\"Test MAE:\", mae)\n","print(\"Test MSE:\", mse)\n","print(\"Test RMSE:\", rmse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y0GBVNbEOUIj","executionInfo":{"status":"ok","timestamp":1713611842093,"user_tz":-360,"elapsed":15039,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"0ffec912-39ff-4825-f89e-6c5cd27a5c17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before reshaping: (222, 10, 3)\n","Epoch 1/60\n","14/14 [==============================] - 4s 41ms/step - loss: 175.9483 - val_loss: 74.9100\n","Epoch 2/60\n","14/14 [==============================] - 0s 10ms/step - loss: 166.3372 - val_loss: 72.3807\n","Epoch 3/60\n","14/14 [==============================] - 0s 10ms/step - loss: 160.1484 - val_loss: 71.5452\n","Epoch 4/60\n","14/14 [==============================] - 0s 9ms/step - loss: 156.1896 - val_loss: 71.4749\n","Epoch 5/60\n","14/14 [==============================] - 0s 9ms/step - loss: 153.5920 - val_loss: 71.7490\n","Epoch 6/60\n","14/14 [==============================] - 0s 10ms/step - loss: 151.4677 - val_loss: 71.8697\n","Epoch 7/60\n","14/14 [==============================] - 0s 11ms/step - loss: 150.0500 - val_loss: 71.6905\n","Epoch 8/60\n","14/14 [==============================] - 0s 8ms/step - loss: 148.0999 - val_loss: 71.6611\n","Epoch 9/60\n","14/14 [==============================] - 0s 8ms/step - loss: 146.4591 - val_loss: 71.3592\n","Epoch 10/60\n","14/14 [==============================] - 0s 9ms/step - loss: 144.7826 - val_loss: 70.8626\n","Epoch 11/60\n","14/14 [==============================] - 0s 9ms/step - loss: 142.7767 - val_loss: 70.2660\n","Epoch 12/60\n","14/14 [==============================] - 0s 10ms/step - loss: 141.2887 - val_loss: 69.7948\n","Epoch 13/60\n","14/14 [==============================] - 0s 10ms/step - loss: 139.4021 - val_loss: 69.6532\n","Epoch 14/60\n","14/14 [==============================] - 0s 9ms/step - loss: 137.6192 - val_loss: 69.2364\n","Epoch 15/60\n","14/14 [==============================] - 0s 9ms/step - loss: 135.6399 - val_loss: 69.6275\n","Epoch 16/60\n","14/14 [==============================] - 0s 8ms/step - loss: 133.9346 - val_loss: 69.0318\n","Epoch 17/60\n","14/14 [==============================] - 0s 10ms/step - loss: 131.6552 - val_loss: 68.1213\n","Epoch 18/60\n","14/14 [==============================] - 0s 10ms/step - loss: 129.4385 - val_loss: 67.0501\n","Epoch 19/60\n","14/14 [==============================] - 0s 10ms/step - loss: 127.8285 - val_loss: 66.7094\n","Epoch 20/60\n","14/14 [==============================] - 0s 11ms/step - loss: 125.4816 - val_loss: 65.5691\n","Epoch 21/60\n","14/14 [==============================] - 0s 9ms/step - loss: 124.2267 - val_loss: 64.1480\n","Epoch 22/60\n","14/14 [==============================] - 0s 9ms/step - loss: 122.1032 - val_loss: 63.2824\n","Epoch 23/60\n","14/14 [==============================] - 0s 9ms/step - loss: 120.3132 - val_loss: 61.7690\n","Epoch 24/60\n","14/14 [==============================] - 0s 10ms/step - loss: 118.4162 - val_loss: 60.5098\n","Epoch 25/60\n","14/14 [==============================] - 0s 9ms/step - loss: 116.7712 - val_loss: 59.1427\n","Epoch 26/60\n","14/14 [==============================] - 0s 9ms/step - loss: 114.8756 - val_loss: 57.9801\n","Epoch 27/60\n","14/14 [==============================] - 0s 10ms/step - loss: 113.5017 - val_loss: 55.2067\n","Epoch 28/60\n","14/14 [==============================] - 0s 10ms/step - loss: 112.0004 - val_loss: 54.4946\n","Epoch 29/60\n","14/14 [==============================] - 0s 9ms/step - loss: 110.2332 - val_loss: 51.7827\n","Epoch 30/60\n","14/14 [==============================] - 0s 9ms/step - loss: 108.4844 - val_loss: 49.7319\n","Epoch 31/60\n","14/14 [==============================] - 0s 9ms/step - loss: 106.4896 - val_loss: 47.7757\n","Epoch 32/60\n","14/14 [==============================] - 0s 9ms/step - loss: 105.2738 - val_loss: 45.0563\n","Epoch 33/60\n","14/14 [==============================] - 0s 9ms/step - loss: 103.4192 - val_loss: 43.1899\n","Epoch 34/60\n","14/14 [==============================] - 0s 10ms/step - loss: 103.0197 - val_loss: 42.1378\n","Epoch 35/60\n","14/14 [==============================] - 0s 9ms/step - loss: 100.8896 - val_loss: 40.8534\n","Epoch 36/60\n","14/14 [==============================] - 0s 8ms/step - loss: 97.7771 - val_loss: 38.9299\n","Epoch 37/60\n","14/14 [==============================] - 0s 9ms/step - loss: 96.1266 - val_loss: 37.6264\n","Epoch 38/60\n","14/14 [==============================] - 0s 10ms/step - loss: 94.4553 - val_loss: 33.5761\n","Epoch 39/60\n","14/14 [==============================] - 0s 9ms/step - loss: 91.0278 - val_loss: 31.8909\n","Epoch 40/60\n","14/14 [==============================] - 0s 9ms/step - loss: 89.2736 - val_loss: 30.0756\n","Epoch 41/60\n","14/14 [==============================] - 0s 8ms/step - loss: 87.2395 - val_loss: 28.2162\n","Epoch 42/60\n","14/14 [==============================] - 0s 11ms/step - loss: 87.2023 - val_loss: 28.3977\n","Epoch 43/60\n","14/14 [==============================] - 0s 15ms/step - loss: 85.8386 - val_loss: 28.8171\n","Epoch 44/60\n","14/14 [==============================] - 0s 12ms/step - loss: 83.7476 - val_loss: 26.9122\n","Epoch 45/60\n","14/14 [==============================] - 0s 12ms/step - loss: 81.1789 - val_loss: 28.8264\n","Epoch 46/60\n","14/14 [==============================] - 0s 13ms/step - loss: 79.5478 - val_loss: 23.7263\n","Epoch 47/60\n","14/14 [==============================] - 0s 13ms/step - loss: 77.7856 - val_loss: 22.5338\n","Epoch 48/60\n","14/14 [==============================] - 0s 13ms/step - loss: 76.5207 - val_loss: 26.0720\n","Epoch 49/60\n","14/14 [==============================] - 0s 12ms/step - loss: 75.1691 - val_loss: 20.6365\n","Epoch 50/60\n","14/14 [==============================] - 0s 13ms/step - loss: 72.1418 - val_loss: 20.0758\n","Epoch 51/60\n","14/14 [==============================] - 0s 12ms/step - loss: 70.9609 - val_loss: 19.1605\n","Epoch 52/60\n","14/14 [==============================] - 0s 14ms/step - loss: 69.4161 - val_loss: 23.2983\n","Epoch 53/60\n","14/14 [==============================] - 0s 13ms/step - loss: 68.7411 - val_loss: 19.0075\n","Epoch 54/60\n","14/14 [==============================] - 0s 15ms/step - loss: 67.0205 - val_loss: 18.3029\n","Epoch 55/60\n","14/14 [==============================] - 0s 13ms/step - loss: 66.7531 - val_loss: 17.5937\n","Epoch 56/60\n","14/14 [==============================] - 0s 13ms/step - loss: 65.5318 - val_loss: 23.8586\n","Epoch 57/60\n","14/14 [==============================] - 0s 13ms/step - loss: 71.4255 - val_loss: 16.4719\n","Epoch 58/60\n","14/14 [==============================] - 0s 12ms/step - loss: 66.2591 - val_loss: 15.8453\n","Epoch 59/60\n","14/14 [==============================] - 0s 15ms/step - loss: 61.6502 - val_loss: 15.1075\n","Epoch 60/60\n","14/14 [==============================] - 0s 14ms/step - loss: 61.5708 - val_loss: 15.2593\n","2/2 [==============================] - 0s 8ms/step\n","Test MAE: 3.101955852160851\n","Test MSE: 15.259302396994698\n","Test RMSE: 3.9063157062627054\n"]}]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/Maliha Prediction/Att_GRU_GVI_Diff.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VUEnSoaK6hII","executionInfo":{"status":"ok","timestamp":1708036623340,"user_tz":-360,"elapsed":473,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"de0b3851-ff15-47ab-f39c-773f1047a472"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["|\n"],"metadata":{"id":"lVoszN0ZIrPG"}},{"cell_type":"markdown","metadata":{"id":"57V9LyPfLXNS"},"source":["code for converting binary mask"]},{"cell_type":"code","source":["import os\n","import cv2\n","import numpy as np\n","from google.colab.patches import cv2_imshow\n","\n","\n","# Function to calculate GVI from a binary image\n","def calculate_gvi(binary_image):\n","    white_pixels = np.sum(binary_image == 255)\n","    black_pixels = np.sum(binary_image == 0)\n","    gvi = white_pixels / (white_pixels + black_pixels)\n","    return gvi\n","\n","# Path to the first image in Google Drive\n","img1 = \"/content/drive/MyDrive/Sowmik Dataset/Recheck_prediction_valid_dataset/city2_deforest_2000.jpg\"\n","\n","# Load the first image and process it\n","image1 = cv2.imread(img1)\n","hsv_image1 = cv2.cvtColor(image1, cv2.COLOR_BGR2HSV)\n","lower_green1 = np.array([40, 40, 40])\n","upper_green1 = np.array([80, 255, 255])\n","green_mask1 = cv2.inRange(hsv_image1, lower_green1, upper_green1)\n","green_binary_image1 = np.where(green_mask1 == 255, 255, 0)\n","gvi_value1 = calculate_gvi(green_binary_image1)\n","\n","# Print GVI value for the first image\n","print(f\"GVI Value for 2000: {gvi_value1}\")\n","\n","\n","\n","# Path to the second image in Google Drive\n","img2 = \"/content/drive/MyDrive/Sowmik Dataset/Recheck_prediction_valid_dataset/city2_deforest_2005.jpg\"\n","\n","# Load the second image and process it\n","image2 = cv2.imread(img2)\n","hsv_image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2HSV)\n","lower_green2 = np.array([40, 40, 40])\n","upper_green2 = np.array([80, 255, 255])\n","green_mask2 = cv2.inRange(hsv_image2, lower_green2, upper_green2)\n","green_binary_image2 = np.where(green_mask2 == 255, 255, 0)\n","gvi_value2 = calculate_gvi(green_binary_image2)\n","\n","# Print GVI value for the second image\n","print(f\"GVI Value for 2005: {gvi_value2}\")\n","\n","# Path to the second image in Google Drive\n","img3 = \"/content/drive/MyDrive/Sowmik Dataset/Recheck_prediction_valid_dataset/city2_deforest_2010.jpg\"\n","\n","# Load the second image and process it\n","image3 = cv2.imread(img3)\n","hsv_image3 = cv2.cvtColor(image3, cv2.COLOR_BGR2HSV)\n","lower_green3 = np.array([40, 40, 40])\n","upper_green3 = np.array([80, 255, 255])\n","green_mask3= cv2.inRange(hsv_image3, lower_green3, upper_green3)\n","green_binary_image3 = np.where(green_mask3 == 255, 255, 0)\n","gvi_value3 = calculate_gvi(green_binary_image3)\n","\n","# Print GVI value for the second image\n","print(f\"GVI Value for 2010: {gvi_value3}\")\n","\n","# Path to the second image in Google Drive\n","img4 = \"/content/drive/MyDrive/Sowmik Dataset/Recheck_prediction_valid_dataset/city2_deforest_2015.jpg\"\n","\n","# Load the second image and process it\n","image4 = cv2.imread(img4)\n","hsv_image4 = cv2.cvtColor(image4, cv2.COLOR_BGR2HSV)\n","lower_green4 = np.array([40, 40, 40])\n","upper_green4 = np.array([80, 255, 255])\n","green_mask4= cv2.inRange(hsv_image4, lower_green4, upper_green4)\n","green_binary_image4 = np.where(green_mask4 == 255, 255, 0)\n","gvi_value4 = calculate_gvi(green_binary_image4)\n","\n","# Print GVI value for the second image\n","print(f\"GVI Value for 2015: {gvi_value4}\")\n","\n","\n","# Path to the second image in Google Drive\n","img5 = \"/content/drive/MyDrive/Sowmik Dataset/Recheck_prediction_valid_dataset/city2_deforest_2020.jpg\"\n","\n","# Load the second image and process it\n","image5 = cv2.imread(img5)\n","hsv_image5 = cv2.cvtColor(image5, cv2.COLOR_BGR2HSV)\n","lower_green5 = np.array([40, 40, 40])\n","upper_green5 = np.array([80, 255, 255])\n","green_mask5= cv2.inRange(hsv_image5, lower_green5, upper_green5)\n","green_binary_image5 = np.where(green_mask5 == 255, 255, 0)\n","gvi_value5 = calculate_gvi(green_binary_image4)\n","\n","# Print GVI value for the second image\n","print(f\"GVI Value for 2020: {gvi_value4}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cqutubZvW-ak","executionInfo":{"status":"ok","timestamp":1707726636489,"user_tz":-360,"elapsed":4812,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"cbed0fe6-dac2-468c-f0f3-b1e7b186f1c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["GVI Value for 2000: 0.20131148599110746\n","GVI Value for 2005: 0.032748520867494954\n","GVI Value for 2010: 0.013983714760973764\n","GVI Value for 2015: 0.19156029756086024\n","GVI Value for 2020: 0.19156029756086024\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from numpy import reshape\n","#from tensorflow.keras.models import load_model  # Assuming TensorFlow/Keras model\n","\n","\n","# Prepare your 4 GVI values (years 2000, 2005, 2010, 2015)\n","new_data = [0.20131,0.03274,0.01398,0.19156]  # Replace with your values\n","\n","# Ensure values are numeric and compatible with your model's data format\n","new_data = pd.to_numeric(new_data)  # Convert to numeric if necessary\n","print(new_data)\n","# Reshape the data for LSTM input (samples, time steps, features)\n","new_data = reshape(new_data, (1, 1, 4))  # 1 sample, 1 time step, 4 features\n","\n","# Make the prediction\n","prediction = model.predict(new_data)\n","\n","# Print the predicted GVI value for 2025\n","print(\"Predicted GVI value for 2020:\", prediction[0][0])  # Access the first element of the 1D array"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v1xx4u9kXMos","executionInfo":{"status":"ok","timestamp":1707725393381,"user_tz":-360,"elapsed":3,"user":{"displayName":"thesis research","userId":"06634674941398765871"}},"outputId":"6d73343d-7078-4b01-fbc5-1be288f4232f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.20131 0.03274 0.01398 0.19156]\n","1/1 [==============================] - 0s 17ms/step\n","Predicted GVI value for 2020: 0.048384003\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1qNvF1WoQncQWxixuZw8dY3zA1spiAfJV","timestamp":1707723794146},{"file_id":"1Z-W1r0XQ8L7_zD8P0H_D4QrQFLsJH83E","timestamp":1706953985924}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}